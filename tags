!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
(sect2,	.vim/pack/ide/start/airline/autoload/airline/themes.vim	/^    map(sect2, (_, v) => type(v) != type('') ? string(v) : v)$/;"	m
1. Bug reports / GitHub issues	.vim/pack/ide/start/syntastic/CONTRIBUTING.md	/^## 1. Bug reports \/ GitHub issues$/;"	s	chapter:CONTRIBUTING
1\\. Introduction	.vim/pack/ide/start/syntastic/README.markdown	/^## 1\\. Introduction$/;"	s
2. Submitting a patch	.vim/pack/ide/start/syntastic/CONTRIBUTING.md	/^## 2. Submitting a patch$/;"	s	chapter:CONTRIBUTING
2.1.17	.vim/pack/ide/start/nerdcommenter/CHANGELOG.md	/^### 2.1.17$/;"	S	chapter:Changelog
2.1.18	.vim/pack/ide/start/nerdcommenter/CHANGELOG.md	/^### 2.1.18$/;"	S	chapter:Changelog
2.1\\. Requirements	.vim/pack/ide/start/syntastic/README.markdown	/^### 2.1\\. Requirements$/;"	S	section:2\\. Installation
2.2.0	.vim/pack/ide/start/nerdcommenter/CHANGELOG.md	/^### 2.2.0$/;"	S	chapter:Changelog
2.2.1	.vim/pack/ide/start/nerdcommenter/CHANGELOG.md	/^### 2.2.1$/;"	S	chapter:Changelog
2.2.1\\. Step 1: Install pathogen.vim	.vim/pack/ide/start/syntastic/README.markdown	/^#### 2.2.1\\. Step 1: Install pathogen.vim$/;"	t	subsection:2\\. Installation""2.2\\. Installing syntastic with Pathogen
2.2.2	.vim/pack/ide/start/nerdcommenter/CHANGELOG.md	/^### 2.2.2$/;"	S	chapter:Changelog
2.2.2\\. Step 2: Install syntastic as a Pathogen bundle	.vim/pack/ide/start/syntastic/README.markdown	/^#### 2.2.2\\. Step 2: Install syntastic as a Pathogen bundle$/;"	t	subsection:2\\. Installation""2.2\\. Installing syntastic with Pathogen
2.2\\. Installing syntastic with Pathogen	.vim/pack/ide/start/syntastic/README.markdown	/^### 2.2\\. Installing syntastic with Pathogen$/;"	S	section:2\\. Installation
2.3.0	.vim/pack/ide/start/nerdcommenter/CHANGELOG.md	/^### 2.3.0$/;"	S	chapter:Changelog
2.4.0	.vim/pack/ide/start/nerdcommenter/CHANGELOG.md	/^### 2.4.0$/;"	S	chapter:Changelog
2.5.0	.vim/pack/ide/start/nerdcommenter/CHANGELOG.md	/^### 2.5.0$/;"	S	chapter:Changelog
2.5.1	.vim/pack/ide/start/nerdcommenter/CHANGELOG.md	/^### 2.5.1$/;"	S	chapter:Changelog
2.5.2	.vim/pack/ide/start/nerdcommenter/CHANGELOG.md	/^### 2.5.2$/;"	S	chapter:Changelog
2\\. Installation	.vim/pack/ide/start/syntastic/README.markdown	/^## 2\\. Installation$/;"	s
3. General style notes	.vim/pack/ide/start/syntastic/CONTRIBUTING.md	/^## 3. General style notes$/;"	s	chapter:CONTRIBUTING
3.0.0	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^#### 3.0.0$/;"	t	chapter:NERDTree Change Log
3.0.1	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^#### 3.0.1$/;"	t	chapter:NERDTree Change Log
3.1.0	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^#### 3.1.0$/;"	t	chapter:NERDTree Change Log
3.1.1	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^#### 3.1.1$/;"	t	chapter:NERDTree Change Log
3\\. Recommended settings	.vim/pack/ide/start/syntastic/README.markdown	/^## 3\\. Recommended settings$/;"	s
4. Syntax checker notes	.vim/pack/ide/start/syntastic/CONTRIBUTING.md	/^## 4. Syntax checker notes$/;"	s	chapter:CONTRIBUTING
4.0.0	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^#### 4.0.0$/;"	t	chapter:NERDTree Change Log
4.1.0	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^#### 4.1.0$/;"	t	chapter:NERDTree Change Log
4.2.0	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^#### 4.2.0$/;"	t	chapter:NERDTree Change Log
4\\. FAQ	.vim/pack/ide/start/syntastic/README.markdown	/^## 4\\. FAQ$/;"	s
5.0.0	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^#### 5.0.0$/;"	t	chapter:NERDTree Change Log
5.1	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^#### 5.1$/;"	t	chapter:NERDTree Change Log
5.2	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^#### 5.2$/;"	t	chapter:NERDTree Change Log
5.3	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^#### 5.3$/;"	t	chapter:NERDTree Change Log
5\\. Resources	.vim/pack/ide/start/syntastic/README.markdown	/^## 5\\. Resources$/;"	s
6.0	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^#### 6.0$/;"	t	chapter:NERDTree Change Log
6.1	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^#### 6.1$/;"	t	chapter:NERDTree Change Log
6.10	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^#### 6.10$/;"	t	chapter:NERDTree Change Log
6.2	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^#### 6.2$/;"	t	chapter:NERDTree Change Log
6.3	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^#### 6.3$/;"	t	chapter:NERDTree Change Log
6.4	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^#### 6.4$/;"	t	chapter:NERDTree Change Log
6.5	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^#### 6.5$/;"	t	chapter:NERDTree Change Log
6.6	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^#### 6.6$/;"	t	chapter:NERDTree Change Log
6.7	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^#### 6.7$/;"	t	chapter:NERDTree Change Log
6.8	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^#### 6.8$/;"	t	chapter:NERDTree Change Log
6.9	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^#### 6.9$/;"	t	chapter:NERDTree Change Log
<2-LeftMouse>	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^    inoremap <script> <silent> <buffer> <2-LeftMouse>$/;"	m
<2-LeftMouse>	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^    nnoremap <script> <silent> <buffer> <2-LeftMouse>$/;"	m
<C-G>S	.vim/pack/ide/start/surround/plugin/surround.vim	/^    imap      <C-G>S <Plug>ISurround$/;"	m
<C-G>s	.vim/pack/ide/start/surround/plugin/surround.vim	/^    imap      <C-G>s <Plug>Isurround$/;"	m
<C-S-tab>	.vim/mapping.vim	/^map <C-S-tab> :tabprevious<CR>$/;"	m
<C-S>	.vim/pack/ide/start/surround/plugin/surround.vim	/^      imap    <C-S> <Plug>Isurround$/;"	m
<C-n>	.vim/mapping.vim	/^map <C-n> :tabnew<CR>$/;"	m
<C-o>b	.vim/mapping.vim	/^nmap <silent> <C-o>b :CtrlPBuffer<CR>$/;"	m
<C-o>f	.vim/mapping.vim	/^nmap <silent> <C-o>f :CtrlP<CR>$/;"	m
<C-tab>	.vim/mapping.vim	/^map <C-tab> :tabnext<CR>$/;"	m
<C-x>	.vim/mapping.vim	/^map <C-x> :tabclose<CR>$/;"	m
<Down>	.vim/mapping.vim	/^inoremap <Down> <Nop>$/;"	m
<Down>	.vim/mapping.vim	/^noremap <Down> <Nop>$/;"	m
<F5>	.vim/mapping.vim	/^nmap <silent> <F5> :NERDTreeToggle<CR>$/;"	m
<F8>	.vim/mapping.vim	/^nmap <silent> <F8> :TagbarToggle<CR>$/;"	m
<Left>	.vim/mapping.vim	/^inoremap <Left> <Nop>$/;"	m
<Left>	.vim/mapping.vim	/^noremap <Left> <Nop>$/;"	m
<LeftRelease>	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^    inoremap <script> <silent> <buffer> <LeftRelease>$/;"	m
<LeftRelease>	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^    nnoremap <script> <silent> <buffer> <LeftRelease>$/;"	m
<Plug>AirlineSelectNextTab	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^    noremap <silent> <Plug>AirlineSelectNextTab :<C-u>call <SID>jump_to_tab(v:count1)<CR>$/;"	m
<Plug>AirlineSelectNextTab	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabs.vim	/^  noremap <silent> <Plug>AirlineSelectNextTab :<C-U>exe repeat(':tabn\\|', v:count1)<cr>$/;"	m
<Plug>AirlineSelectPrevTab	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^    noremap <silent> <Plug>AirlineSelectPrevTab :<C-u>call <SID>jump_to_tab(-v:count1)<CR>$/;"	m
<Plug>AirlineSelectPrevTab	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabs.vim	/^  noremap <silent> <Plug>AirlineSelectPrevTab gT$/;"	m
<Plug>BufKillAlt	.vim/plugin/bufkill.vim	/^  noremap <Plug>BufKillAlt         :call <SID>GotoBuffer('#', '')<CR>$/;"	m
<Plug>BufKillBack	.vim/plugin/bufkill.vim	/^  noremap <Plug>BufKillBack        :call <SID>GotoBuffer('bufback', '')<CR>$/;"	m
<Plug>BufKillBangAlt	.vim/plugin/bufkill.vim	/^  noremap <Plug>BufKillBangAlt     :call <SID>GotoBuffer('#', '!')<CR>$/;"	m
<Plug>BufKillBangBack	.vim/plugin/bufkill.vim	/^  noremap <Plug>BufKillBangBack    :call <SID>GotoBuffer('bufback', '!')<CR>$/;"	m
<Plug>BufKillBangBd	.vim/plugin/bufkill.vim	/^  noremap <Plug>BufKillBangBd      :call <SID>BufKill('bd', '!')<CR>$/;"	m
<Plug>BufKillBangBun	.vim/plugin/bufkill.vim	/^  noremap <Plug>BufKillBangBun     :call <SID>BufKill('bun', '!')<CR>$/;"	m
<Plug>BufKillBangBw	.vim/plugin/bufkill.vim	/^  noremap <Plug>BufKillBangBw      :call <SID>BufKill('bw', '!')<CR>$/;"	m
<Plug>BufKillBangForward	.vim/plugin/bufkill.vim	/^  noremap <Plug>BufKillBangForward :call <SID>GotoBuffer('bufforward', '!')<CR>$/;"	m
<Plug>BufKillBd	.vim/plugin/bufkill.vim	/^  noremap <Plug>BufKillBd          :call <SID>BufKill('bd', '')<CR>$/;"	m
<Plug>BufKillBun	.vim/plugin/bufkill.vim	/^  noremap <Plug>BufKillBun         :call <SID>BufKill('bun', '')<CR>$/;"	m
<Plug>BufKillBw	.vim/plugin/bufkill.vim	/^  noremap <Plug>BufKillBw          :call <SID>BufKill('bw', '')<CR>$/;"	m
<Plug>BufKillForward	.vim/plugin/bufkill.vim	/^  noremap <Plug>BufKillForward     :call <SID>GotoBuffer('bufforward', '')<CR>$/;"	m
<Plug>BufKillUndo	.vim/plugin/bufkill.vim	/^  noremap <Plug>BufKillUndo        :call <SID>UndoKill()<CR>$/;"	m
<Plug>CSurround	.vim/pack/ide/start/surround/plugin/surround.vim	/^nnoremap <silent> <Plug>CSurround  :<C-U>call <SID>changesurround(1)<CR>$/;"	m
<Plug>Csurround	.vim/pack/ide/start/surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>CtrlSFCCwordExec	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^nnoremap <silent> <expr> <Plug>CtrlSFCCwordExec <SID>SearchCwordCmd('CtrlSF', 1, 1)$/;"	m
<Plug>CtrlSFCCwordPath	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^nnoremap          <expr> <Plug>CtrlSFCCwordPath <SID>SearchCwordCmd('CtrlSF', 1, 0)$/;"	m
<Plug>CtrlSFCwordExec	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^nnoremap <silent> <expr> <Plug>CtrlSFCwordExec  <SID>SearchCwordCmd('CtrlSF', 0, 1)$/;"	m
<Plug>CtrlSFCwordPath	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^nnoremap          <expr> <Plug>CtrlSFCwordPath  <SID>SearchCwordCmd('CtrlSF', 0, 0)$/;"	m
<Plug>CtrlSFPrompt	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^nnoremap                 <Plug>CtrlSFPrompt     :CtrlSF<Space>$/;"	m
<Plug>CtrlSFPwordExec	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^nnoremap <silent> <expr> <Plug>CtrlSFPwordExec  <SID>SearchPwordCmd('CtrlSF', 1)$/;"	m
<Plug>CtrlSFPwordPath	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^nnoremap          <expr> <Plug>CtrlSFPwordPath  <SID>SearchPwordCmd('CtrlSF', 0)$/;"	m
<Plug>CtrlSFQuickfixCCwordExec	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^nnoremap <silent> <expr> <Plug>CtrlSFQuickfixCCwordExec <SID>SearchCwordCmd('CtrlSFQuickfix', 1,/;"	m
<Plug>CtrlSFQuickfixCCwordPath	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^nnoremap          <expr> <Plug>CtrlSFQuickfixCCwordPath <SID>SearchCwordCmd('CtrlSFQuickfix', 1,/;"	m
<Plug>CtrlSFQuickfixCwordExec	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^nnoremap <silent> <expr> <Plug>CtrlSFQuickfixCwordExec  <SID>SearchCwordCmd('CtrlSFQuickfix', 0,/;"	m
<Plug>CtrlSFQuickfixCwordPath	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^nnoremap          <expr> <Plug>CtrlSFQuickfixCwordPath  <SID>SearchCwordCmd('CtrlSFQuickfix', 0,/;"	m
<Plug>CtrlSFQuickfixPrompt	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^nnoremap                 <Plug>CtrlSFQuickfixPrompt     :CtrlSFQuickfix<Space>$/;"	m
<Plug>CtrlSFQuickfixPwordExec	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^nnoremap <silent> <expr> <Plug>CtrlSFQuickfixPwordExec  <SID>SearchPwordCmd('CtrlSFQuickfix', 1)$/;"	m
<Plug>CtrlSFQuickfixPwordPath	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^nnoremap          <expr> <Plug>CtrlSFQuickfixPwordPath  <SID>SearchPwordCmd('CtrlSFQuickfix', 0)$/;"	m
<Plug>CtrlSFQuickfixVwordExec	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^vnoremap <silent> <expr> <Plug>CtrlSFQuickfixVwordExec  <SID>SearchVwordCmd('CtrlSFQuickfix', 1)$/;"	m
<Plug>CtrlSFQuickfixVwordPath	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^vnoremap          <expr> <Plug>CtrlSFQuickfixVwordPath  <SID>SearchVwordCmd('CtrlSFQuickfix', 0)$/;"	m
<Plug>CtrlSFVwordExec	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^vnoremap <silent> <expr> <Plug>CtrlSFVwordExec  <SID>SearchVwordCmd('CtrlSF', 1)$/;"	m
<Plug>CtrlSFVwordPath	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^vnoremap          <expr> <Plug>CtrlSFVwordPath  <SID>SearchVwordCmd('CtrlSF', 0)$/;"	m
<Plug>Dsurround	.vim/pack/ide/start/surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>ISurround	.vim/pack/ide/start/surround/plugin/surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>Isurround	.vim/pack/ide/start/surround/plugin/surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>NERDCommenterAltDelims	.vim/pack/ide/start/nerdcommenter/plugin/nerdcommenter.vim	/^nnoremap <Plug>NERDCommenterAltDelims :call nerdcommenter#SwitchToAlternativeDelimiters(1)<CR>$/;"	m
<Plug>NERDCommenterInsert	.vim/pack/ide/start/nerdcommenter/plugin/nerdcommenter.vim	/^inoremap <silent> <Plug>NERDCommenterInsert <Space><BS><Esc>:call nerdcommenter#Comment('i', "in/;"	m
<Plug>SurroundRepeat	.vim/pack/ide/start/surround/plugin/surround.vim	/^nnoremap <silent> <Plug>SurroundRepeat .$/;"	m
<Plug>TComment_<Leader>_<space>	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>_<space> :TComment $/;"	m
<Plug>TComment_<Leader>__	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>__ :TComment<cr>$/;"	m
<Plug>TComment_<Leader>__	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^xnoremap <Plug>TComment_<Leader>__ :TCommentMaybeInline<cr>$/;"	m
<Plug>TComment_<Leader>_a	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>_a :TCommentAs $/;"	m
<Plug>TComment_<Leader>_b	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>_b :TCommentBlock<cr>$/;"	m
<Plug>TComment_<Leader>_i	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^xnoremap <Plug>TComment_<Leader>_i :TCommentInline<cr>$/;"	m
<Plug>TComment_<Leader>_n	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>_n :TCommentAs <c-r>=&ft<cr> $/;"	m
<Plug>TComment_<Leader>_p	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>_p vip:TComment<cr>$/;"	m
<Plug>TComment_<Leader>_r	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>_r :TCommentRight<cr>$/;"	m
<Plug>TComment_<Leader>_s	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>_s :TCommentAs <c-r>=&ft<cr>_$/;"	m
<Plug>TComment_<c-_><c-_>	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_><c-_> <c-o>:TComment<cr>$/;"	m
<Plug>TComment_<c-_><c-_>	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_><c-_> :TComment<cr>$/;"	m
<Plug>TComment_<c-_><c-_>	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^vnoremap <Plug>TComment_<c-_><c-_> :TCommentMaybeInline<cr>$/;"	m
<Plug>TComment_<c-_><space>	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_><space> <c-o>:TComment $/;"	m
<Plug>TComment_<c-_><space>	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_><space> :TComment $/;"	m
<Plug>TComment_<c-_>a	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_>a <c-o>:TCommentAs $/;"	m
<Plug>TComment_<c-_>a	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>a :TCommentAs $/;"	m
<Plug>TComment_<c-_>b	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_>b <c-\\><c-o>:TCommentBlock mode=#<cr>$/;"	m
<Plug>TComment_<c-_>b	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>b :TCommentBlock<cr>$/;"	m
<Plug>TComment_<c-_>ca	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>ca :<c-u>call tcomment#SetOption("as", input("Comment as: ", &filety/;"	m
<Plug>TComment_<c-_>cc	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>cc :<c-u>call tcomment#SetOption("count", v:count1)<cr>$/;"	m
<Plug>TComment_<c-_>i	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_>i <c-\\><c-o>v:TCommentInline mode=#<cr>$/;"	m
<Plug>TComment_<c-_>i	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>i v:TCommentInline mode=I#<cr>$/;"	m
<Plug>TComment_<c-_>i	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^vnoremap <Plug>TComment_<c-_>i :TCommentInline<cr>$/;"	m
<Plug>TComment_<c-_>n	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_>n <c-o>:TCommentAs <c-r>=&ft<cr> $/;"	m
<Plug>TComment_<c-_>n	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>n :TCommentAs <c-r>=&ft<cr> $/;"	m
<Plug>TComment_<c-_>p	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_>p <c-o>:norm! m`vip<cr>:TComment<cr><c-o>``$/;"	m
<Plug>TComment_<c-_>p	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>p m`vip:TComment<cr>``$/;"	m
<Plug>TComment_<c-_>r	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_>r <c-o>:TCommentRight<cr>$/;"	m
<Plug>TComment_<c-_>r	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>r :TCommentRight<cr>$/;"	m
<Plug>TComment_<c-_>s	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_>s <c-o>:TCommentAs <c-r>=&ft<cr>_$/;"	m
<Plug>TComment_<c-_>s	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>s :TCommentAs <c-r>=&ft<cr>_$/;"	m
<Plug>TComment_Comment	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^xnoremap <Plug>TComment_Comment :<c-u>if v:count > 0 \\| call tcomment#SetOption("count", v:coun/;"	m
<Plug>TComment_Uncomment	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^xnoremap <Plug>TComment_Uncomment :<c-u>if v:count > 0 \\| call tcomment#SetOption("count", v:co/;"	m
<Plug>TComment_gc	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^xnoremap <Plug>TComment_gc :TCommentMaybeInline<cr>$/;"	m
<Plug>TComment_ic	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^noremap <Plug>TComment_ic :<c-U>call tcomment#textobject#InlineComment()<cr>$/;"	m
<Plug>TComment_ic	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^vnoremap <Plug>TComment_ic :<c-U>call tcomment#textobject#InlineComment()<cr>$/;"	m
<Plug>ToggleBackground	.vim/pack/ide/start/colors-solarized/autoload/togglebg.vim	/^inoremap <unique> <script> <Plug>ToggleBackground <ESC><SID>TogBG<ESC>a$/;"	m
<Plug>ToggleBackground	.vim/pack/ide/start/colors-solarized/autoload/togglebg.vim	/^nnoremap <unique> <script> <Plug>ToggleBackground <SID>TogBG$/;"	m
<Plug>ToggleBackground	.vim/pack/ide/start/colors-solarized/autoload/togglebg.vim	/^vnoremap <unique> <script> <Plug>ToggleBackground <ESC><SID>TogBG<ESC>gv$/;"	m
<Plug>VSurround	.vim/pack/ide/start/surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 /;"	m
<Plug>VgSurround	.vim/pack/ide/start/surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 /;"	m
<Plug>XTablineCdCurrent	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdCurrent :cd %:p:h<cr>:call airline#util#doaut/;"	m
<Plug>XTablineCdDown1	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdDown1   :cd %:p:h:h<cr>:call airline#util#doa/;"	m
<Plug>XTablineCdDown2	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdDown2   :cd %:p:h:h:h<cr>:call airline#util#d/;"	m
<Plug>XTablineCdDown3	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdDown3   :cd %:p:h:h:h:h<cr>:call airline#util/;"	m
<Plug>XTablineCdHome	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdHome    :cd ~<cr>:call airline#util#doautocmd/;"	m
<Plug>XTablineNextBuffer	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineNextBuffer <SID>NextBuffer$/;"	m
<Plug>XTablinePrevBuffer	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablinePrevBuffer <SID>PrevBuffer$/;"	m
<Plug>XTablineReopen	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineReopen <SID>ReopenLastTab$/;"	m
<Plug>XTablineSelectBuffer	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineSelectBuffer <SID>SelectBuffer$/;"	m
<Plug>XTablineToggleFiltering	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineToggleFiltering <SID>ToggleFiltering$/;"	m
<Plug>XTablineToggleTabs	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineToggleTabs <SID>ToggleTabs$/;"	m
<Plug>YSsurround	.vim/pack/ide/start/surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>YSsurround <SID>opfunc2('setup').'_'$/;"	m
<Plug>YSurround	.vim/pack/ide/start/surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>YSurround  <SID>opfunc2('setup')$/;"	m
<Plug>Yssurround	.vim/pack/ide/start/surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>Yssurround '^'.v:count1.<SID>opfunc('setup').'g_'$/;"	m
<Plug>Ysurround	.vim/pack/ide/start/surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>Ysurround  <SID>opfunc('setup')$/;"	m
<Right>	.vim/mapping.vim	/^inoremap <Right> <Nop>$/;"	m
<Right>	.vim/mapping.vim	/^noremap <Right> <Nop>$/;"	m
<SID>:	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^nnoremap <SID>: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
<SID>NextBuffer	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <expr> <SID>NextBuffer airline#extensions#tabline#xtabline#next_buffer(v:c/;"	m
<SID>PrevBuffer	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <expr> <SID>PrevBuffer airline#extensions#tabline#xtabline#prev_buffer(v:c/;"	m
<SID>ReopenLastTab	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <SID>ReopenLastTab :XTabReopen<cr>$/;"	m
<SID>SelectBuffer	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <expr> <SID>SelectBuffer g:xtabline_changing_buffer ? "\\<C-c>" : ":<C-u>c/;"	m
<SID>TogBG	.vim/pack/ide/start/colors-solarized/autoload/togglebg.vim	/^noremap <SID>TogBG  :call <SID>TogBG()<CR>$/;"	m
<SID>ToggleFiltering	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <SID>ToggleFiltering :call airline#extensions#tabline#xtabline#toggle_buff/;"	m
<SID>ToggleTabs	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <SID>ToggleTabs :call airline#extensions#tabline#xtabline#toggle_tabs()<cr/;"	m
<Up>	.vim/mapping.vim	/^inoremap <Up> <Nop>$/;"	m
<Up>	.vim/mapping.vim	/^noremap <Up> <Nop>$/;"	m
<c-s>	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^    imap <buffer> <c-s> <c-o>call tlib#input#EditCallback(1)<cr>$/;"	m
<c-s>	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^    map <buffer> <c-s> :call tlib#input#EditCallback(1)<cr>$/;"	m
<c-w><cr>	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^    imap <buffer> <c-w><cr> <c-o>call tlib#input#EditCallback(1)<cr>$/;"	m
<c-w><cr>	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^    map <buffer> <c-w><cr> :call tlib#input#EditCallback(1)<cr>$/;"	m
<c-w>c	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^    imap <buffer> <c-w>c <c-o>call tlib#input#EditCallback(0)<cr>$/;"	m
<c-w>c	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^    map <buffer> <c-w>c :call tlib#input#EditCallback(0)<cr>$/;"	m
<cr>	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^      nnoremap <buffer> <cr> :call b:filtered_view.Continue()<cr>$/;"	m
<leader>cd2	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cd2 <Plug>XTablineCdDown2$/;"	m
<leader>cd3	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cd3 <Plug>XTablineCdDown3$/;"	m
<leader>cdc	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cdc <Plug>XTablineCdCurrent$/;"	m
<leader>cdd	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cdd <Plug>XTablineCdDown1$/;"	m
<leader>cdh	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cdh <Plug>XTablineCdHome$/;"	m
<plug>(goyo-resize)	.vim/pack/ide/opt/goyo/autoload/goyo.vim	/^nnoremap <silent> <plug>(goyo-resize) :<c-u>call <sid>resize_pads()<cr>$/;"	m
<plug>(signify-motion-inner-pending)	.vim/pack/ide/start/signify/plugin/signify.vim	/^onoremap <silent> <plug>(signify-motion-inner-pending) :<c-u>call sy#util#hunk_text_object(0)<cr/;"	m
<plug>(signify-motion-inner-visual)	.vim/pack/ide/start/signify/plugin/signify.vim	/^xnoremap <silent> <plug>(signify-motion-inner-visual)  :<c-u>call sy#util#hunk_text_object(0)<cr/;"	m
<plug>(signify-motion-outer-pending)	.vim/pack/ide/start/signify/plugin/signify.vim	/^onoremap <silent> <plug>(signify-motion-outer-pending) :<c-u>call sy#util#hunk_text_object(1)<cr/;"	m
<plug>(signify-motion-outer-visual)	.vim/pack/ide/start/signify/plugin/signify.vim	/^xnoremap <silent> <plug>(signify-motion-outer-visual)  :<c-u>call sy#util#hunk_text_object(1)<cr/;"	m
<plug>(signify-next-hunk)	.vim/pack/ide/start/signify/plugin/signify.vim	/^nnoremap <silent> <expr> <plug>(signify-next-hunk) &diff$/;"	m
<plug>(signify-prev-hunk)	.vim/pack/ide/start/signify/plugin/signify.vim	/^nnoremap <silent> <expr> <plug>(signify-prev-hunk) &diff$/;"	m
Add	.vim/pack/ide/start/tlib/spec/tlib/list.vim	/^fun! Add(a,b)$/;"	f
Add	.vim/pack/ide/start/tlib/test/tlib.vim	/^fun! Add(a,b)$/;"	f
AirlineExtensions	.vim/pack/ide/start/airline/plugin/airline.vim	/^command! AirlineExtensions   call s:airline_extensions()$/;"	c
AirlineRefresh	.vim/pack/ide/start/airline/plugin/airline.vim	/^command! -bar -bang AirlineRefresh call s:airline_refresh(<q-bang>)$/;"	c
AirlineTheme	.vim/pack/ide/start/airline/plugin/airline.vim	/^command! -bar -nargs=? -complete=customlist,<sid>get_airline_themes AirlineTheme call <sid>airli/;"	c
AirlineToggle	.vim/pack/ide/start/airline/plugin/airline.vim	/^command! -bar AirlineToggle  call s:airline_toggle()$/;"	c
AirlineToggleWhitespace	.vim/pack/ide/start/airline/plugin/airline.vim	/^command! -bar AirlineToggleWhitespace call airline#extensions#whitespace#toggle()$/;"	c
Alternate 256-xterm -> sRGB mapping	.vim/pack/ide/opt/seoul256/README.md	/^Alternate 256-xterm -> sRGB mapping$/;"	s
AnonymousFunctionf7961ed40100	.vim/pack/ide/start/syntastic/syntax_checkers/less/less-lint.js	/^  args = args.filter(function(arg) {$/;"	f
AnonymousFunctionf7961ed40200	.vim/pack/ide/start/syntastic/syntax_checkers/less/less-lint.js	/^        return options.paths = match[2].split(os.type().match(\/Windows\/) ? ';' : ':').map(func/;"	f
AnonymousFunctionf7961ed40300	.vim/pack/ide/start/syntastic/syntax_checkers/less/less-lint.js	/^  fs.readFile(options.filename, 'utf-8', function(err, data) {$/;"	f
AnonymousFunctionf7961ed40400	.vim/pack/ide/start/syntastic/syntax_checkers/less/less-lint.js	/^    return parser.parse(data, function(err, tree) {$/;"	f
Arguments	.vim/pack/ide/opt/ctrlsf/README.md	/^## Arguments$/;"	s	chapter:ctrlsf.vim
As part of [vim-polyglot](https://github.com/sheerun/vim-polyglot)	.vim/pack/ide/start/vim-glsl/README.md	/^#### As part of [vim-polyglot](https:\/\/github.com\/sheerun\/vim-polyglot)$/;"	t	section:vim-glsl""Installation
Asynchronous Search	.vim/pack/ide/opt/ctrlsf/README.md	/^### Asynchronous Search$/;"	S	chapter:ctrlsf.vim
Author	.vim/pack/ide/opt/seoul256/README.md	/^Author$/;"	s
Author and Feedback	.vim/pack/ide/start/signify/README.md	/^## Author and Feedback$/;"	s
Author's Instructions	.vim/pack/ide/start/nerdtree/.github/PULL_REQUEST_TEMPLATE.md	/^#### Author's Instructions$/;"	t	subsection:New Version Info
Automatic truncation	.vim/pack/ide/start/airline/README.md	/^## Automatic truncation$/;"	s	chapter:Features
BUILD_INVERTED_INDEX	.vim/pack/ide/start/gutentags/plat/win32/update_scopedb.cmd	/^    set BUILD_INVERTED_INDEX=1$/;"	v
BUILD_INVERTED_INDEX	.vim/pack/ide/start/gutentags/plat/win32/update_scopedb.cmd	/^set BUILD_INVERTED_INDEX=0$/;"	v
Basic Options	.vim/pack/ide/start/ctrlp/readme.md	/^## Basic Options$/;"	s	chapter:ctrlp.vim
Basic Usage	.vim/pack/ide/start/ctrlp/readme.md	/^## Basic Usage$/;"	s	chapter:ctrlp.vim
Before submitting your issue（请在提交 issue 前一定要检查以下项目！）	.vim/pack/ide/opt/ctrlsf/.github/ISSUE_TEMPLATE.md	/^## Before submitting your issue（请在提交 issue 前一定要检查以下项目！）$/;"	s
Bookmark	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=? Bookmark :call nerdtree#ui_glue#bookmarkNode('<args>')$/;"	c
BookmarkToRoot	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=+ BookmarkToRoot cal/;"	c
BufKill	.vim/plugin/bufkill.vim	/^augroup BufKill$/;"	a
BufKill	.vim/plugin/bufkill.vim	/^function! <SID>BufKill(cmd, bang) "{{{1$/;"	f
Bugs	.vim/pack/ide/start/airline/CONTRIBUTING.md	/^# Bugs$/;"	c
CHANGE LOG	.vim/pack/ide/start/yajs/CHANGES.markdown	/^CHANGE LOG$/;"	c
CONFIG_FILE	.vim/pack/ide/start/yajs/Makefile	/^CONFIG_FILE=config.mk$/;"	m
CONTRIBUTING	.vim/pack/ide/start/signify/CONTRIBUTING.md	/^CONTRIBUTING$/;"	c
CONTRIBUTING	.vim/pack/ide/start/syntastic/CONTRIBUTING.md	/^# CONTRIBUTING$/;"	c
CSAHi	.vim/colors/maroloccio.vim	/^   command! -nargs=+ CSAHi exe "hi" <q-args>$/;"	c
CSAHi	.vim/colors/maroloccio.vim	/^   command! -nargs=+ CSAHi exe "hi" substitute(substitute(<q-args>, "undercurl", "underline", "g/;"	c
CSCOPE_ARGS	.vim/pack/ide/start/gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -q$/;"	v
CSCOPE_ARGS	.vim/pack/ide/start/gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=$/;"	v
CSCOPE_ARGS	.vim/pack/ide/start/gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=%CSCOPE_ARGS% -i %DB_FILE%.files$/;"	v
CSCOPE_EXE	.vim/pack/ide/start/gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_EXE=%~2$/;"	v
CSCOPE_EXE	.vim/pack/ide/start/gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_EXE=cscope$/;"	v
CTAGS_ARGS	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% "%PROJECT_ROOT%"$/;"	v
CTAGS_ARGS	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% --append "%UPDATED_SOURCE%"$/;"	v
CTAGS_ARGS	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% -L %TAGS_FILE%.files$/;"	v
CTAGS_ARGS	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% %~2$/;"	v
CTAGS_ARGS	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --exclude=%2$/;"	v
CTAGS_ARGS	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --options=%2$/;"	v
CTAGS_ARGS	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^set CTAGS_ARGS=$/;"	v
CTAGS_EXE	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_EXE=%~2$/;"	v
CTAGS_EXE	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^set CTAGS_EXE=ctags$/;"	v
CURL_OPT	.vim/pack/ide/start/yajs/Makefile	/^CURL_OPT=$/;"	m
Callbacks	.vim/pack/ide/opt/goyo/README.md	/^### Callbacks$/;"	S	section:goyo.vim ([고요](http://en.wiktionary.org/wiki/고요하다))""Configuration
Can I have the same NERDTree on every tab automatically?	.vim/pack/ide/start/nerdtree/README.markdown	/^### Can I have the same NERDTree on every tab automatically?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
Can NERDTree access remote files via scp or ftp?	.vim/pack/ide/start/nerdtree/README.markdown	/^### Can NERDTree access remote files via scp or ftp?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
Change Log	.vim/pack/ide/start/airline/CHANGELOG.md	/^# Change Log$/;"	c
Change background color	.vim/pack/ide/opt/seoul256/README.md	/^Change background color$/;"	s
Changelog	.vim/pack/ide/start/nerdcommenter/CHANGELOG.md	/^# Changelog$/;"	c
Changes	.vim/pack/ide/start/yajs/README.md	/^Changes$/;"	s	chapter:YAJS: Yet Another JavaScript Syntax
CleanUp	.vim/pack/ide/start/gutentags/plat/unix/update_scopedb.sh	/^CleanUp() {$/;"	f
ClearAllBookmarks	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 ClearAllBookmarks call g:NERDTreeBookmark.ClearAll() <bar> call b:/;"	c
ClearAllCtrlPCaches	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -bar ClearAllCtrlPCaches cal ctrlp#clra()$/;"	c
ClearBookmarks	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=* ClearBookmarks cal/;"	c
ClearCtrlPCache	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -bar ClearCtrlPCache     cal ctrlp#clr()$/;"	c
Collaborator's Instructions	.vim/pack/ide/start/nerdtree/.github/PULL_REQUEST_TEMPLATE.md	/^#### Collaborator's Instructions$/;"	t	subsection:New Version Info
Color schemes	.vim/pack/ide/opt/seoul256/README.md	/^Color schemes$/;"	s
Compact View	.vim/pack/ide/opt/ctrlsf/README.md	/^### Compact View$/;"	S	chapter:ctrlsf.vim
Configurable and extensible	.vim/pack/ide/start/airline/README.md	/^## Configurable and extensible$/;"	s	chapter:Features
Configuration	.vim/pack/ide/opt/ctrlsf/README.md	/^## Configuration$/;"	s	chapter:ctrlsf.vim
Configuration	.vim/pack/ide/opt/goyo/README.md	/^Configuration$/;"	s	chapter:goyo.vim ([고요](http://en.wiktionary.org/wiki/고요하다))
Configuration for async update	.vim/pack/ide/start/signify/README.md	/^## Configuration for async update$/;"	s
Contribute	.vim/pack/ide/start/elixir/README.md	/^### Contribute$/;"	S	chapter:Elixir for VIM
Contributing	.vim/pack/ide/start/gutentags/CONTRIBUTING.md	/^# Contributing$/;"	c
Contributing	.vim/pack/ide/start/surround/README.markdown	/^## Contributing$/;"	s	chapter:surround.vim
Contributions	.vim/pack/ide/start/airline/CONTRIBUTING.md	/^# Contributions$/;"	c
Contributions	.vim/pack/ide/start/nerdcommenter/README.md	/^## Contributions$/;"	s	chapter:NERD Commenter
Contributors	.vim/pack/ide/start/tagbar/README.md	/^## Contributors$/;"	s	chapter:Tagbar: a class outline viewer for Vim
CreateUniqueCommand	.vim/plugin/bufkill.vim	/^function! <SID>CreateUniqueCommand(lhs, rhs)$/;"	f
CreateUniqueMapping	.vim/plugin/bufkill.vim	/^  function! <SID>CreateUniqueMapping(lhs, rhs, ...)$/;"	f
Credits	.vim/pack/ide/start/yajs/README.md	/^Credits$/;"	s	chapter:YAJS: Yet Another JavaScript Syntax
CtrlP	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -n=? -com=dir CtrlP         cal ctrlp#init(0, { 'dir': <q-args> })$/;"	c
CtrlPAug	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^	aug CtrlPAug$/;"	a
CtrlPBookmarkDir	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -bar CtrlPBookmarkDir cal ctrlp#init(ctrlp#bookmarkdir#id())$/;"	c
CtrlPBookmarkDirAdd	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -n=? -com=dir -bang CtrlPBookmarkDirAdd$/;"	c
CtrlPBufTag	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -n=? -com=buffer CtrlPBufTag$/;"	c
CtrlPBufTagAll	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -bar CtrlPBufTagAll cal ctrlp#init(ctrlp#buffertag#cmd(1))$/;"	c
CtrlPBuffer	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -bar CtrlPBuffer   cal ctrlp#init('buf')$/;"	c
CtrlPChange	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -n=? -com=buffer CtrlPChange$/;"	c
CtrlPChangeAll	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -bar CtrlPChangeAll   cal ctrlp#init(ctrlp#changes#cmd(1))$/;"	c
CtrlPClearAllCaches	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -bar CtrlPClearAllCaches cal ctrlp#clra()$/;"	c
CtrlPClearCache	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -bar CtrlPClearCache     cal ctrlp#clr()$/;"	c
CtrlPCurFile	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -bar CtrlPCurFile cal ctrlp#init('fil', { 'mode': 'c' })$/;"	c
CtrlPCurWD	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -bar CtrlPCurWD   cal ctrlp#init('fil', { 'mode': '' })$/;"	c
CtrlPDir	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -n=? -com=dir CtrlPDir$/;"	c
CtrlPLastMode	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -n=? CtrlPLastMode cal ctrlp#init(-1, { 'args': <q-args> })$/;"	c
CtrlPLazy	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^		aug CtrlPLazy$/;"	a
CtrlPLine	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -n=? -com=buffer CtrlPLine$/;"	c
CtrlPMRUF	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mrufiles.vim	/^	aug CtrlPMRUF$/;"	a
CtrlPMRUFiles	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -n=? -com=dir CtrlPMRUFiles cal ctrlp#init('mru', { 'dir': <q-args> })$/;"	c
CtrlPMixed	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -bar CtrlPMixed       cal ctrlp#init(ctrlp#mixed#id())$/;"	c
CtrlPQuickfix	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -bar CtrlPQuickfix cal ctrlp#init(ctrlp#quickfix#id())$/;"	c
CtrlPRTS	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -bar CtrlPRTS       cal ctrlp#init(ctrlp#rtscript#id())$/;"	c
CtrlPRoot	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -bar CtrlPRoot    cal ctrlp#init('fil', { 'mode': 'r' })$/;"	c
CtrlPTag	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -bar CtrlPTag      cal ctrlp#init(ctrlp#tag#id())$/;"	c
CtrlPUndo	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^com! -bar CtrlPUndo      cal ctrlp#init(ctrlp#undo#id())$/;"	c
CtrlSF	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^com! -n=* -comp=customlist,ctrlsf#comp#Completion CtrlSF         call ctrlsf#Search(<q-args>)$/;"	c
CtrlSFClearHL	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^com! -n=0                                         CtrlSFClearHL  call ctrlsf#ClearSelectedLine()$/;"	c
CtrlSFClose	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^com! -n=0                                         CtrlSFClose    call ctrlsf#Quit()$/;"	c
CtrlSFFocus	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^com! -n=0                                         CtrlSFFocus    call ctrlsf#Focus()$/;"	c
CtrlSFGetVisualSelection	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^func! g:CtrlSFGetVisualSelection()$/;"	f
CtrlSFOpen	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^com! -n=0                                         CtrlSFOpen     call ctrlsf#Open()$/;"	c
CtrlSFQuickfix	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^com! -n=* -comp=customlist,ctrlsf#comp#Completion CtrlSFQuickfix call ctrlsf#Quickfix(<q-args>)$/;"	c
CtrlSFStatusLine	.vim/pack/ide/opt/ctrlsf/after/plugin/ctrlsf.vim	/^func! CtrlSFStatusLine(...)$/;"	f
CtrlSFStop	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^com! -n=0                                         CtrlSFStop     call ctrlsf#StopSearch()$/;"	c
CtrlSFSwitchViewMode	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^    command! -buffer CtrlSFSwitchViewMode call ctrlsf#SwitchViewMode()$/;"	c
CtrlSFToggle	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^com! -n=0                                         CtrlSFToggle   call ctrlsf#Toggle()$/;"	c
CtrlSFToggleMap	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^    command! -buffer CtrlSFToggleMap      call ctrlsf#ToggleMap()$/;"	c
CtrlSFUpdate	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^com! -n=0                                         CtrlSFUpdate   call ctrlsf#Update()$/;"	c
Current Behavior (Include screenshots where appropriate.)	.vim/pack/ide/start/nerdtree/.github/ISSUE_TEMPLATE/bug.md	/^#### Current Behavior (Include screenshots where appropriate.)$/;"	t	section:labels: bug
Current background color	.vim/pack/ide/opt/seoul256/README.md	/^Current background color$/;"	s
DB_FILE	.vim/pack/ide/start/gutentags/plat/win32/update_scopedb.cmd	/^    set DB_FILE=%~2$/;"	v
DB_FILE	.vim/pack/ide/start/gutentags/plat/win32/update_scopedb.cmd	/^set DB_FILE=cscope.out$/;"	v
DEPEND_DIR	.vim/pack/ide/start/yajs/Makefile	/^DEPEND_DIR=\/tmp\/vim-deps$/;"	m
DIRS	.vim/pack/ide/start/yajs/Makefile	/^DIRS=`ls -1F | grep \/ | sed -e 's\/\\\/\/\/'`$/;"	m
Default mappings	.vim/pack/ide/start/nerdcommenter/README.md	/^### Default mappings$/;"	S	section:NERD Commenter""Usage
Demo	.vim/pack/ide/start/signify/README.md	/^## Demo$/;"	s
Dependencies	.vim/pack/ide/start/tagbar/README.md	/^## Dependencies$/;"	s	chapter:Tagbar: a class outline viewer for Vim
Description	.vim/pack/ide/start/nerdtree/.github/ISSUE_TEMPLATE/feature_request.md	/^#### Description$/;"	t	section:labels: "feature request"
Description of Changes	.vim/pack/ide/start/nerdtree/.github/PULL_REQUEST_TEMPLATE.md	/^### Description of Changes$/;"	S
Difference between v1.0 and pre-v1.0	.vim/pack/ide/opt/ctrlsf/README.md	/^### Difference between v1.0 and pre-v1.0$/;"	S	section:ctrlsf.vim""For user comes from pre v1.0
Differences from jelera/vim-javascript-syntax	.vim/pack/ide/start/yajs/README.md	/^### Differences from jelera\/vim-javascript-syntax$/;"	S	chapter:YAJS: Yet Another JavaScript Syntax
Dimension expression	.vim/pack/ide/opt/goyo/README.md	/^### Dimension expression$/;"	S	section:goyo.vim ([고요](http://en.wiktionary.org/wiki/고요하다))""Usage
Documentation	.vim/pack/ide/start/airline/README.md	/^# Documentation$/;"	c
Documentation	.vim/pack/ide/start/nerdcommenter/README.md	/^### Documentation$/;"	S	section:NERD Commenter""Usage
DoneParseArgs	.vim/pack/ide/start/gutentags/plat/win32/update_scopedb.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^:DoneParseArgs$/;"	l
E2T	.vim/colors/vividchalk.vim	/^function! E2T(a)$/;"	f
Edit Mode	.vim/pack/ide/opt/ctrlsf/README.md	/^## Edit Mode$/;"	s	chapter:ctrlsf.vim
Edit Mode	.vim/pack/ide/opt/ctrlsf/README.md	/^### Edit Mode$/;"	S	chapter:ctrlsf.vim
EditBookmarks	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 EditBookmarks call g:NERDTreeBookmark.Edit()$/;"	c
Elixir for VIM	.vim/pack/ide/start/elixir/README.md	/^Elixir for VIM$/;"	c
Emacs color theme	.vim/pack/ide/opt/seoul256/README.md	/^Emacs color theme$/;"	s
Environment	.vim/pack/ide/start/nerdtree/.github/ISSUE_TEMPLATE/bug.md	/^#### Environment$/;"	t	section:labels: bug
Errors	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^command! -bar Errors              call SyntasticErrors()$/;"	c
Example	.vim/pack/ide/opt/ctrlsf/README.md	/^### Example$/;"	S	section:ctrlsf.vim""Arguments
Examples	.vim/pack/ide/start/signify/CONTRIBUTING.md	/^Examples$/;"	s	chapter:CONTRIBUTING
Expected Result	.vim/pack/ide/start/nerdtree/.github/ISSUE_TEMPLATE/bug.md	/^#### Expected Result$/;"	t	section:labels: bug
Extensible pipeline	.vim/pack/ide/start/airline/README.md	/^#### Extensible pipeline$/;"	t	section:Features""Configurable and extensible
Extras	.vim/pack/ide/start/airline/README.md	/^## Extras$/;"	s	chapter:Features
F	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^    noremap <buffer> F :call b:filtered_view.FilterFromKeyboard(0,'')<cr>$/;"	m
FAQ	.vim/pack/ide/start/airline/README.md	/^# FAQ$/;"	c
FAQ	.vim/pack/ide/start/fugitive/README.markdown	/^## FAQ$/;"	s	chapter:fugitive.vim
FILES	.vim/pack/ide/start/yajs/Makefile	/^FILES=`ls -1 | grep '.vim$$'`$/;"	m
FILESIZE	.vim/pack/ide/start/gutentags/plat/win32/update_scopedb.cmd	/^for \/F %%F in ("%DB_FILE%.files") do set FILESIZE=%%~zF$/;"	v
FILESIZE	.vim/pack/ide/start/gutentags/plat/win32/update_scopedb.cmd	/^set FILESIZE=0$/;"	v
FILE_LIST_CMD	.vim/pack/ide/start/gutentags/plat/win32/update_scopedb.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	.vim/pack/ide/start/gutentags/plat/win32/update_scopedb.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD_IS_ABSOLUTE=1$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD_IS_ABSOLUTE=0$/;"	v
Features	.vim/pack/ide/opt/ctrlsf/README.md	/^## Features$/;"	s	chapter:ctrlsf.vim
Features	.vim/pack/ide/start/airline/README.md	/^# Features$/;"	c
Features	.vim/pack/ide/start/elixir/README.md	/^### Features$/;"	S	chapter:Elixir for VIM
Features	README.md	/^## Features$/;"	s	chapter:VIm IDE
Fine-tuned configuration	.vim/pack/ide/start/airline/README.md	/^#### Fine-tuned configuration$/;"	t	section:Features""Configurable and extensible
For user comes from pre v1.0	.vim/pack/ide/opt/ctrlsf/README.md	/^## For user comes from pre v1.0$/;"	s	chapter:ctrlsf.vim
Frequently Asked Questions	.vim/pack/ide/start/nerdtree/README.markdown	/^## Frequently Asked Questions$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
FugitiveCommonDir	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveCommonDir(...) abort$/;"	f
FugitiveConfig	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveConfig(...) abort$/;"	f
FugitiveConfigGet	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGet(name, ...) abort$/;"	f
FugitiveConfigGetAll	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGetAll(name, ...) abort$/;"	f
FugitiveConfigGetRegexp	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGetRegexp(pattern, ...) abort$/;"	f
FugitiveDetect	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveDetect(...) abort$/;"	f
FugitiveDidChange	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveDidChange(...) abort$/;"	f
FugitiveExecute	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveExecute(args, ...) abort$/;"	f
FugitiveExtractGitDir	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveExtractGitDir(path) abort$/;"	f
FugitiveFind	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveFind(...) abort$/;"	f
FugitiveGitDir	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveGitDir(...) abort$/;"	f
FugitiveGitPath	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveGitPath(path) abort$/;"	f
FugitiveGitVersion	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveGitVersion(...) abort$/;"	f
FugitiveHead	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveHead(...) abort$/;"	f
FugitiveIsGitDir	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveIsGitDir(...) abort$/;"	f
FugitiveParse	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveParse(...) abort$/;"	f
FugitivePath	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitivePath(...) abort$/;"	f
FugitivePrepare	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitivePrepare(...) abort$/;"	f
FugitiveReal	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveReal(...) abort$/;"	f
FugitiveRemoteUrl	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveRemoteUrl(...) abort$/;"	f
FugitiveResult	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveResult(...) abort$/;"	f
FugitiveShellCommand	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveShellCommand(...) abort$/;"	f
FugitiveStatusline	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveStatusline(...) abort$/;"	f
FugitiveVimPath	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveVimPath(path) abort$/;"	f
FugitiveWorkTree	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! FugitiveWorkTree(...) abort$/;"	f
G	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^  command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete G   exe fugitive#Comm/;"	c
GIT_SOURCES	.vim/pack/ide/start/yajs/Makefile	/^GIT_SOURCES=$/;"	m
GetContents	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/scratch_buffer.vim	/^    command! -buffer -nargs=0 GetContents call tovl#scratch_buffer#GetContents()$/;"	c
Getting Started	.vim/pack/ide/start/nerdtree/README.markdown	/^## Getting Started$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
Git	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete Git exe fugitive#Comman/;"	c
GotoBuffer	.vim/plugin/bufkill.vim	/^function! <SID>GotoBuffer(cmd, bang) "{{{1$/;"	f
Goyo	.vim/pack/ide/opt/goyo/plugin/goyo.vim	/^command! -nargs=? -bar -bang Goyo call goyo#execute(<bang>0, <q-args>)$/;"	c
Gutentags	.vim/pack/ide/start/gutentags/README.md	/^# Gutentags$/;"	c
GutentagsToggleEnabled	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleEnabled :let g:gutentags_enabled=!g:gutentags_enabled$/;"	c
GutentagsToggleFake	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleFake    :call gutentags#fake()$/;"	c
GutentagsToggleTrace	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleTrace   :call gutentags#toggletrace()$/;"	c
GutentagsUpdate	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^    command! -buffer -bang GutentagsUpdate :call s:manual_update_tags(<bang>0)$/;"	c
Help	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/scratch_buffer.vim	/^  command! -buffer -nargs=0 Help call tovl#scratch_buffer#Help()$/;"	c
HiLink	.vim/pack/ide/start/yajs/syntax/javascript.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.vim/pack/ide/start/yajs/syntax/javascript.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.vim/syntax/gnuplot.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.vim/syntax/gnuplot.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.vim/syntax/jinja.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.vim/syntax/jinja.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
How can I change the default arrows?	.vim/pack/ide/start/nerdtree/README.markdown	/^### How can I change the default arrows?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How can I close Vim or a tab automatically when NERDTree is the last window?	.vim/pack/ide/start/nerdtree/README.markdown	/^### How can I close Vim or a tab automatically when NERDTree is the last window?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How can I map a specific key or shortcut to open NERDTree?	.vim/pack/ide/start/nerdtree/README.markdown	/^### How can I map a specific key or shortcut to open NERDTree?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How can I prevent other buffers replacing NERDTree in its window?	.vim/pack/ide/start/nerdtree/README.markdown	/^### How can I prevent other buffers replacing NERDTree in its window?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How do I open NERDTree automatically when Vim starts?	.vim/pack/ide/start/nerdtree/README.markdown	/^### How do I open NERDTree automatically when Vim starts?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How to use	README.md	/^## How to use$/;"	s	chapter:VIm IDE
How?	.vim/pack/ide/start/gutentags/README.md	/^## How?$/;"	s	chapter:Gutentags
INDEX_WHOLE_PROJECT	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^        set INDEX_WHOLE_PROJECT=0$/;"	v
INDEX_WHOLE_PROJECT	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^set INDEX_WHOLE_PROJECT=1$/;"	v
Inspiration	.vim/pack/ide/opt/goyo/README.md	/^Inspiration$/;"	s	chapter:goyo.vim ([고요](http://en.wiktionary.org/wiki/고요하다))
Installation	.vim/pack/ide/opt/ctrlsf/README.md	/^## Installation$/;"	s	chapter:ctrlsf.vim
Installation	.vim/pack/ide/opt/goyo/README.md	/^Installation$/;"	s	chapter:goyo.vim ([고요](http://en.wiktionary.org/wiki/고요하다))
Installation	.vim/pack/ide/opt/seoul256/README.md	/^Installation$/;"	s
Installation	.vim/pack/ide/start/airline/README.md	/^# Installation$/;"	c
Installation	.vim/pack/ide/start/ctrlp/readme.md	/^## Installation$/;"	s	chapter:ctrlp.vim
Installation	.vim/pack/ide/start/fugitive/README.markdown	/^## Installation$/;"	s	chapter:fugitive.vim
Installation	.vim/pack/ide/start/nerdcommenter/README.md	/^## Installation$/;"	s	chapter:NERD Commenter
Installation	.vim/pack/ide/start/nerdtree/README.markdown	/^## Installation$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
Installation	.vim/pack/ide/start/signify/README.md	/^## Installation$/;"	s
Installation	.vim/pack/ide/start/surround/README.markdown	/^## Installation$/;"	s	chapter:surround.vim
Installation	.vim/pack/ide/start/tagbar/README.md	/^## Installation$/;"	s	chapter:Tagbar: a class outline viewer for Vim
Installation	.vim/pack/ide/start/vim-glsl/README.md	/^## Installation$/;"	s	chapter:vim-glsl
Installation	.vim/pack/ide/start/yajs/README.md	/^### Installation$/;"	S	chapter:YAJS: Yet Another JavaScript Syntax
Integrating with powerline fonts	.vim/pack/ide/start/airline/README.md	/^# Integrating with powerline fonts$/;"	c
Introduction	.vim/pack/ide/start/nerdtree/README.markdown	/^## Introduction$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
IsBufferNew	.vim/plugin/bufkill.vim	/^function! <SID>IsBufferNew(buf) "{{{1$/;"	f
Issue description	.vim/pack/ide/opt/ctrlsf/.github/ISSUE_TEMPLATE.md	/^#### Issue description$/;"	t	section:Issue template
Issue template	.vim/pack/ide/opt/ctrlsf/.github/ISSUE_TEMPLATE.md	/^## Issue template$/;"	s
JSDoc	.vim/pack/ide/start/yajs/README.md	/^### JSDoc$/;"	S	section:YAJS: Yet Another JavaScript Syntax""Reference
Key Maps	.vim/pack/ide/opt/ctrlsf/README.md	/^## Key Maps$/;"	s	chapter:ctrlsf.vim
LOG_FILE	.vim/pack/ide/start/gutentags/plat/win32/update_scopedb.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	.vim/pack/ide/start/gutentags/plat/win32/update_scopedb.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	.vim/pack/ide/start/gutentags/plat/win32/update_scopedb.cmd	/^set LOG_FILE=$/;"	v
LOG_FILE	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^set LOG_FILE=$/;"	v
License	.vim/pack/ide/opt/goyo/README.md	/^License$/;"	s	chapter:goyo.vim ([고요](http://en.wiktionary.org/wiki/고요하다))
License	.vim/pack/ide/opt/seoul256/README.md	/^License$/;"	s
License	.vim/pack/ide/start/airline/README.md	/^# License$/;"	c
License	.vim/pack/ide/start/ctrlp/readme.md	/^## License$/;"	s	chapter:ctrlp.vim
License	.vim/pack/ide/start/fugitive/README.markdown	/^## License$/;"	s	chapter:fugitive.vim
License	.vim/pack/ide/start/surround/README.markdown	/^## License$/;"	s	chapter:surround.vim
License	.vim/pack/ide/start/tagbar/README.md	/^## License$/;"	s	chapter:Tagbar: a class outline viewer for Vim
License	.vim/pack/ide/start/yajs/CHANGES.markdown	/^License$/;"	s	chapter:CHANGE LOG
License	.vim/pack/ide/start/yajs/README.md	/^License$/;"	s	chapter:YAJS: Yet Another JavaScript Syntax
Limitation	.vim/pack/ide/opt/ctrlsf/README.md	/^### Limitation$/;"	S	section:ctrlsf.vim""Edit Mode
LoopParseArgs	.vim/pack/ide/start/gutentags/plat/win32/update_scopedb.cmd	/^:LoopParseArgs$/;"	l
LoopParseArgs	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^:LoopParseArgs$/;"	l
M	.vim/colors/inkpot.vim	/^fun! <SID>M(a)$/;"	f
MKFILES	.vim/pack/ide/start/yajs/Makefile	/^MKFILES=Makefile `ls -1 | grep '.mk$$'`$/;"	m
Maintainers	.vim/pack/ide/start/airline/README.md	/^# Maintainers$/;"	c
Maintenance	.vim/pack/ide/start/airline/CONTRIBUTING.md	/^# Maintenance$/;"	c
Manual	.vim/pack/ide/start/vim-glsl/README.md	/^#### Manual$/;"	t	section:vim-glsl""Installation
Manual Installation	.vim/pack/ide/start/nerdcommenter/README.md	/^### Manual Installation$/;"	S	section:NERD Commenter""Installation
Marklar	.vim/colors/marklar.vim	/^        command! -nargs=*  Marklar  :call s:Marklar(<f-args>)$/;"	c
Motions	.vim/pack/ide/start/nerdcommenter/README.md	/^## Motions$/;"	s	chapter:NERD Commenter
MyAppend1	.vim/pack/ide/start/airline/t/airline.vim	/^function! MyAppend1(...)$/;"	f
MyAppend2	.vim/pack/ide/start/airline/t/airline.vim	/^function! MyAppend2(...)$/;"	f
MyFuncref	.vim/pack/ide/start/airline/t/airline.vim	/^function! MyFuncref(...)$/;"	f
MyIgnoreFuncref	.vim/pack/ide/start/airline/t/airline.vim	/^function! MyIgnoreFuncref(...)$/;"	f
NAME	.vim/pack/ide/start/yajs/Makefile	/^NAME=`basename \\`pwd\\``$/;"	m
NAME	.vim/pack/ide/start/yajs/config.mk	/^NAME=yajs.vim$/;"	m
NERD Commenter	.vim/pack/ide/start/nerdcommenter/README.md	/^# NERD Commenter$/;"	c
NERDComment	.vim/pack/ide/start/nerdcommenter/plugin/nerdcommenter.vim	/^function! NERDComment(mode, type) range$/;"	f
NERDCommentIsCharCommented	.vim/pack/ide/start/nerdcommenter/plugin/nerdcommenter.vim	/^function! NERDCommentIsCharCommented(line, col)$/;"	f
NERDCommentIsLineCommented	.vim/pack/ide/start/nerdcommenter/plugin/nerdcommenter.vim	/^function! NERDCommentIsLineCommented(lineNo)$/;"	f
NERDTree	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=dir -bar NERDTree :call g:NERDTreeCreator.CreateTabTree('<args>')$/;"	c
NERDTree	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree Change Log	.vim/pack/ide/start/nerdtree/CHANGELOG.md	/^# NERDTree Change Log$/;"	c
NERDTree Plugins	.vim/pack/ide/start/nerdtree/README.markdown	/^## NERDTree Plugins$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
NERDTreeAddKeyMap	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	.vim/pack/ide/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddPathFilter	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddPathFilter(callback)$/;"	f
NERDTreeAddSubmenu	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeCWD	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeCWD call NERDTreeCWD()$/;"	c
NERDTreeCWD	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeCWD()$/;"	f
NERDTreeChDirOnTabSwitch	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeChDirOnTabSwitch$/;"	a
NERDTreeClose	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeClose :call g:NERDTree.Close()$/;"	c
NERDTreeCopyNode	.vim/pack/ide/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeCopyPath	.vim/pack/ide/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyPath()$/;"	f
NERDTreeDeleteNode	.vim/pack/ide/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeExecFile	.vim/pack/ide/start/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	.vim/pack/ide/start/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeExecuteFile	.vim/pack/ide/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFile()$/;"	f
NERDTreeExecuteFileLinux	.vim/pack/ide/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFileLinux()$/;"	f
NERDTreeExecuteFileWindows	.vim/pack/ide/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFileWindows()$/;"	f
NERDTreeFind	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=file -bar NERDTreeFind call s:findAndRevealPath('<args>')$/;"	c
NERDTreeFocus	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeFocus call NERDTreeFocus()$/;"	c
NERDTreeFocus	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeFocus()$/;"	f
NERDTreeFromBookmark	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=1 -complete=customlist,nerdtree#completeBookmarks -bar NERDTreeFromBookmark call/;"	c
NERDTreeHijackNetrw	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeIgnore	.vimrc	/^let NERDTreeIgnore = ['\\.lo$', '\\.o$', '\\.pyc', '\\.map', '\\.git']$/;"	v
NERDTreeListNode	.vim/pack/ide/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNode()$/;"	f
NERDTreeListNodeWin32	.vim/pack/ide/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNodeWin32()$/;"	f
NERDTreeMirror	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeMirror call g:NERDTreeCreator.CreateMirror()$/;"	c
NERDTreeMoveNode	.vim/pack/ide/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeQuickLook	.vim/pack/ide/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeQuickLook()$/;"	f
NERDTreeRefreshRoot	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeRefreshRoot call s:refreshRoot()$/;"	c
NERDTreeRender	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeRevealFileLinux	.vim/pack/ide/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealFileLinux()$/;"	f
NERDTreeRevealInFinder	.vim/pack/ide/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealInFinder()$/;"	f
NERDTreeSystemCommand	.vim/pack/ide/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeSystemCommand()$/;"	f
NERDTreeToggle	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=dir -bar NERDTreeToggle :call g:NERDTreeCreator.ToggleTabTree('<args/;"	c
NERDTreeToggleVCS	.vim/pack/ide/start/nerdtree/nerdtree_plugin/vcs.vim	/^command! -n=? -complete=dir -bar NERDTreeToggleVCS :call <SID>ToggleTabTreeVCS('<args>')$/;"	c
NERDTreeVCS	.vim/pack/ide/start/nerdtree/nerdtree_plugin/vcs.vim	/^command! -n=? -complete=dir -bar NERDTreeVCS :call <SID>CreateTabTreeVCS('<args>')$/;"	c
New Version Info	.vim/pack/ide/start/nerdtree/.github/PULL_REQUEST_TEMPLATE.md	/^### New Version Info$/;"	S
Note: If the file structure display is wrong	.vim/pack/ide/start/tagbar/README.md	/^## Note: If the file structure display is wrong$/;"	s	chapter:Tagbar: a class outline viewer for Vim
Once CtrlP is open:	.vim/pack/ide/start/ctrlp/readme.md	/^##### Once CtrlP is open:$/;"	T	section:ctrlp.vim""Basic Usage
OpenBookmark	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=1 OpenBookmark call /;"	c
PAUSE_BEFORE_EXIT	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^    set PAUSE_BEFORE_EXIT=1$/;"	v
PAUSE_BEFORE_EXIT	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^set PAUSE_BEFORE_EXIT=0$/;"	v
POST_PROCESS_CMD	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^    set POST_PROCESS_CMD=%~2$/;"	v
POST_PROCESS_CMD	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^set POST_PROCESS_CMD=$/;"	v
PROJECT_ROOT	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^    set PROJECT_ROOT=%~2$/;"	v
PROJECT_ROOT	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^set PROJECT_ROOT=$/;"	v
PROJ_ROOT	.vim/pack/ide/start/gutentags/plat/win32/update_scopedb.cmd	/^    set PROJ_ROOT=%~2$/;"	v
PWD	.vim/pack/ide/start/yajs/Makefile	/^PWD=`pwd`$/;"	m
ParseArgs	.vim/pack/ide/start/gutentags/plat/win32/update_scopedb.cmd	/^:ParseArgs$/;"	l
ParseArgs	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^:ParseArgs$/;"	l
Performance	.vim/pack/ide/start/airline/README.md	/^# Performance$/;"	c
Performance Issue	.vim/pack/ide/start/yajs/README.md	/^### Performance Issue$/;"	S	chapter:YAJS: Yet Another JavaScript Syntax
Post Installation	.vim/pack/ide/start/nerdcommenter/README.md	/^### Post Installation$/;"	S	section:NERD Commenter""Installation
PowerlineMain	.vim/pack/ide/opt/goyo/autoload/goyo.vim	/^    augroup PowerlineMain$/;"	a
Prerequisite	.vim/pack/ide/opt/seoul256/test/README.md	/^### Prerequisite$/;"	S	chapter:Test cases for seoul256.vim
PrintMe	.vim/pack/ide/start/tlib/samples/tlib/input/tlib_input_list.vim	/^function! PrintMe(state, items) "{{{3$/;"	f
Pros.	.vim/pack/ide/opt/goyo/README.md	/^Pros.$/;"	s	chapter:goyo.vim ([고요](http://en.wiktionary.org/wiki/고요하다))
Pushing	.vim/pack/ide/start/gutentags/CONTRIBUTING.md	/^## Pushing$/;"	s	chapter:Contributing
Quick Start	.vim/pack/ide/opt/ctrlsf/README.md	/^## Quick Start$/;"	s	chapter:ctrlsf.vim
Quickstart	.vim/pack/ide/start/tagbar/README.md	/^## Quickstart$/;"	s	chapter:Tagbar: a class outline viewer for Vim
README_FILES	.vim/pack/ide/start/yajs/Makefile	/^README_FILES=`ls -1 | grep -i readme`$/;"	m
RECORD_FILE	.vim/pack/ide/start/yajs/Makefile	/^RECORD_FILE=.record$/;"	m
RECORD_SCRIPT	.vim/pack/ide/start/yajs/Makefile	/^RECORD_SCRIPT=.mkrecord$/;"	m
Rationale	.vim/pack/ide/start/airline/README.md	/^# Rationale$/;"	c
ReadBookmarks	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 ReadBookmarks call g:NERDTreeBookmark.CacheBookmarks(0) <bar> call/;"	c
Reference	.vim/pack/ide/start/yajs/README.md	/^Reference$/;"	s	chapter:YAJS: Yet Another JavaScript Syntax
Related Projects	.vim/pack/ide/start/gutentags/README.md	/^# Related Projects$/;"	c
RemoveFilters	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^    command! -buffer -nargs=0 RemoveFilters call b:filtered_view.RemoveFilters()$/;"	c
Report Issue	.vim/pack/ide/start/yajs/README.md	/^Report Issue$/;"	s	chapter:YAJS: Yet Another JavaScript Syntax
RestoreView	.vim/plugin/bufkill.vim	/^function! <SID>RestoreView() "{{{1$/;"	f
RestoreWindowPos	.vim/plugin/bufkill.vim	/^function! <SID>RestoreWindowPos() "{{{1$/;"	f
RevealBookmark	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=1 RevealBookmark :ca/;"	c
Run	.vim/pack/ide/opt/seoul256/test/README.md	/^### Run$/;"	S	chapter:Test cases for seoul256.vim
S	.vim/pack/ide/start/surround/plugin/surround.vim	/^  xmap S   <Plug>VSurround$/;"	m
SHELL	.vim/pack/ide/start/yajs/Makefile	/^SHELL=bash$/;"	m
SaveView	.vim/plugin/bufkill.vim	/^function! <SID>SaveView() "{{{1$/;"	f
SaveWindowPos	.vim/plugin/bufkill.vim	/^function! <SID>SaveWindowPos() "{{{1$/;"	f
Screencasts	.vim/pack/ide/start/fugitive/README.markdown	/^## Screencasts$/;"	s	chapter:fugitive.vim
Screenshots	.vim/pack/ide/start/airline/README.md	/^# Screenshots$/;"	c
Screenshots	.vim/pack/ide/start/tagbar/README.md	/^## Screenshots$/;"	s	chapter:Tagbar: a class outline viewer for Vim
Seamless integration	.vim/pack/ide/start/airline/README.md	/^## Seamless integration$/;"	s	chapter:Features
SectionSpec	.vim/pack/ide/start/airline/t/section.vim	/^function! SectionSpec()$/;"	f
SelectOutput	.vim/pack/ide/start/tlib/samples/tlib/input/tlib_input_list.vim	/^function! SelectOutput(ex) "{{{3$/;"	f
Self-Diagnosis	.vim/pack/ide/start/nerdtree/.github/ISSUE_TEMPLATE/bug.md	/^#### Self-Diagnosis$/;"	t	section:labels: bug
Self-Promotion	.vim/pack/ide/start/fugitive/README.markdown	/^## Self-Promotion$/;"	s	chapter:fugitive.vim
Self-Promotion	.vim/pack/ide/start/surround/README.markdown	/^## Self-Promotion$/;"	s	chapter:surround.vim
Settings	.vim/pack/ide/start/nerdcommenter/README.md	/^### Settings$/;"	S	section:NERD Commenter""Usage
ShowAppliedFilters	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^    command! -buffer -nargs=0 ShowAppliedFilters call b:filtered_view.ShowAppliedFilters()$/;"	c
ShowUsage	.vim/pack/ide/start/gutentags/plat/unix/update_scopedb.sh	/^ShowUsage() {$/;"	f
ShowUsage	.vim/pack/ide/start/gutentags/plat/unix/update_tags.sh	/^ShowUsage() {$/;"	f
SignifyDebug	.vim/pack/ide/start/signify/plugin/signify.vim	/^command! -nargs=0 -bar       SignifyDebug           call sy#repo#debug_detection()$/;"	c
SignifyDiff	.vim/pack/ide/start/signify/plugin/signify.vim	/^command! -nargs=0 -bar -bang SignifyDiff            call sy#repo#diffmode(<bang>1)$/;"	c
SignifyDisable	.vim/pack/ide/start/signify/plugin/signify.vim	/^command! -nargs=0 -bar       SignifyDisable         call sy#stop()$/;"	c
SignifyDisableAll	.vim/pack/ide/start/signify/plugin/signify.vim	/^command! -nargs=0 -bar       SignifyDisableAll      call sy#stop_all()$/;"	c
SignifyEnable	.vim/pack/ide/start/signify/plugin/signify.vim	/^command! -nargs=0 -bar       SignifyEnable          call sy#start()$/;"	c
SignifyEnableAll	.vim/pack/ide/start/signify/plugin/signify.vim	/^command! -nargs=0 -bar       SignifyEnableAll       call sy#start_all()$/;"	c
SignifyFold	.vim/pack/ide/start/signify/plugin/signify.vim	/^command! -nargs=0 -bar -bang SignifyFold            call sy#fold#dispatch(<bang>1)$/;"	c
SignifyFoldExpr	.vim/pack/ide/start/signify/autoload/sy/fold.vim	/^function! SignifyFoldExpr(lnum)$/;"	f
SignifyFoldText	.vim/pack/ide/start/signify/autoload/sy/fold.vim	/^function! SignifyFoldText()$/;"	f
SignifyHunkDiff	.vim/pack/ide/start/signify/plugin/signify.vim	/^command! -nargs=0 -bar       SignifyHunkDiff        call sy#repo#diff_hunk()$/;"	c
SignifyHunkUndo	.vim/pack/ide/start/signify/plugin/signify.vim	/^command! -nargs=0 -bar       SignifyHunkUndo        call sy#repo#undo_hunk()$/;"	c
SignifyList	.vim/pack/ide/start/signify/plugin/signify.vim	/^command! -nargs=0 -bar       SignifyList            call sy#debug#list_active_buffers()$/;"	c
SignifyRefresh	.vim/pack/ide/start/signify/plugin/signify.vim	/^command! -nargs=0 -bar       SignifyRefresh         call sy#util#refresh_windows()$/;"	c
SignifyToggle	.vim/pack/ide/start/signify/plugin/signify.vim	/^command! -nargs=0 -bar       SignifyToggle          call sy#toggle()$/;"	c
SignifyToggleHighlight	.vim/pack/ide/start/signify/plugin/signify.vim	/^command! -nargs=0 -bar       SignifyToggleHighlight call sy#highlight#line_toggle()$/;"	c
Smarter tab line	.vim/pack/ide/start/airline/README.md	/^## Smarter tab line$/;"	s	chapter:Features
SolarizedHiTrail	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^augroup SolarizedHiTrail$/;"	a
SolarizedMenu	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^function! SolarizedMenu()$/;"	f
SolarizedOptions	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    command SolarizedOptions :call s:SolarizedOptions()$/;"	c
State Your Question	.vim/pack/ide/start/nerdtree/.github/ISSUE_TEMPLATE/question.md	/^#### State Your Question$/;"	t	section:labels: "general question"
Steps to Reproduce the Issue	.vim/pack/ide/start/nerdtree/.github/ISSUE_TEMPLATE/bug.md	/^#### Steps to Reproduce the Issue$/;"	t	section:labels: bug
Straightforward customization	.vim/pack/ide/start/airline/README.md	/^## Straightforward customization$/;"	s	chapter:Features
Support for additional filetypes	.vim/pack/ide/start/tagbar/README.md	/^## Support for additional filetypes$/;"	s	chapter:Tagbar: a class outline viewer for Vim
Supported GLSL Versions	.vim/pack/ide/start/vim-glsl/README.md	/^## Supported GLSL Versions$/;"	s	chapter:vim-glsl
SwitchToNewBuffer	.vim/plugin/bufkill.vim	/^function! <SID>SwitchToNewBuffer(bang) "{{1$/;"	f
SyntasticAutoloclistNotifier.AutoToggle	.vim/pack/ide/start/syntastic/plugin/syntastic/autoloclist.vim	/^function! g:SyntasticAutoloclistNotifier.AutoToggle(loclist) abort " {{{2$/;"	f
SyntasticAutoloclistNotifier.New	.vim/pack/ide/start/syntastic/plugin/syntastic/autoloclist.vim	/^function! g:SyntasticAutoloclistNotifier.New() abort " {{{2$/;"	f
SyntasticAutoloclistNotifier.refresh	.vim/pack/ide/start/syntastic/plugin/syntastic/autoloclist.vim	/^function! g:SyntasticAutoloclistNotifier.refresh(loclist) abort " {{{2$/;"	f
SyntasticBalloonsExprNotifier	.vim/pack/ide/start/syntastic/plugin/syntastic/balloons.vim	/^function! SyntasticBalloonsExprNotifier() abort " {{{2$/;"	f
SyntasticBalloonsNotifier.New	.vim/pack/ide/start/syntastic/plugin/syntastic/balloons.vim	/^function! g:SyntasticBalloonsNotifier.New() abort " {{{2$/;"	f
SyntasticBalloonsNotifier.enabled	.vim/pack/ide/start/syntastic/plugin/syntastic/balloons.vim	/^function! g:SyntasticBalloonsNotifier.enabled() abort " {{{2$/;"	f
SyntasticBalloonsNotifier.refresh	.vim/pack/ide/start/syntastic/plugin/syntastic/balloons.vim	/^function! g:SyntasticBalloonsNotifier.refresh(loclist) abort " {{{2$/;"	f
SyntasticBalloonsNotifier.reset	.vim/pack/ide/start/syntastic/plugin/syntastic/balloons.vim	/^function! g:SyntasticBalloonsNotifier.reset(loclist) abort " {{{2$/;"	f
SyntasticCheck	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^command! -bar -nargs=* -complete=custom,s:CompleteCheckerName SyntasticCheck call SyntasticCheck/;"	c
SyntasticCheck	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! SyntasticCheck(...) abort " {{{2$/;"	f
SyntasticChecker.New	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.New(args, ...) abort " {{{2$/;"	f
SyntasticChecker._getOpt	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker._getOpt(opts, basename, name, default) abort " {{{2$/;"	f
SyntasticChecker._populateHighlightRegexes	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker._populateHighlightRegexes(errors) abort " {{{2$/;"	f
SyntasticChecker._quietMessages	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker._quietMessages(errors) abort " {{{2$/;"	f
SyntasticChecker.getCName	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getCName() abort " {{{2$/;"	f
SyntasticChecker.getExec	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getExec() abort " {{{2$/;"	f
SyntasticChecker.getExecEscaped	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getExecEscaped() abort " {{{2$/;"	f
SyntasticChecker.getFiletype	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getFiletype() abort " {{{2$/;"	f
SyntasticChecker.getLocList	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getLocList() abort " {{{2$/;"	f
SyntasticChecker.getLocListRaw	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getLocListRaw() abort " {{{2$/;"	f
SyntasticChecker.getName	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getName() abort " {{{2$/;"	f
SyntasticChecker.getVersion	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getVersion(...) abort " {{{2$/;"	f
SyntasticChecker.isAvailable	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.isAvailable() abort " {{{2$/;"	f
SyntasticChecker.isDisabled	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.isDisabled() abort " {{{2$/;"	f
SyntasticChecker.log	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.log(msg, ...) abort " {{{2$/;"	f
SyntasticChecker.makeprgBuild	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.makeprgBuild(opts) abort " {{{2$/;"	f
SyntasticChecker.setVersion	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.setVersion(version) abort " {{{2$/;"	f
SyntasticChecker.setWantSort	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.setWantSort(val) abort " {{{2$/;"	f
SyntasticChecker.syncExec	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.syncExec(...) abort " {{{2$/;"	f
SyntasticChecker.wantSort	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.wantSort() abort " {{{2$/;"	f
SyntasticCursorNotifier.New	.vim/pack/ide/start/syntastic/plugin/syntastic/cursor.vim	/^function! g:SyntasticCursorNotifier.New() abort " {{{2$/;"	f
SyntasticCursorNotifier.enabled	.vim/pack/ide/start/syntastic/plugin/syntastic/cursor.vim	/^function! g:SyntasticCursorNotifier.enabled() abort " {{{2$/;"	f
SyntasticCursorNotifier.refresh	.vim/pack/ide/start/syntastic/plugin/syntastic/cursor.vim	/^function! g:SyntasticCursorNotifier.refresh(loclist) abort " {{{2$/;"	f
SyntasticCursorNotifier.reset	.vim/pack/ide/start/syntastic/plugin/syntastic/cursor.vim	/^function! g:SyntasticCursorNotifier.reset(loclist) abort " {{{2$/;"	f
SyntasticErrors	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! SyntasticErrors() abort " {{{2$/;"	f
SyntasticHighlightingNotifier.New	.vim/pack/ide/start/syntastic/plugin/syntastic/highlighting.vim	/^function! g:SyntasticHighlightingNotifier.New() abort " {{{2$/;"	f
SyntasticHighlightingNotifier._reset	.vim/pack/ide/start/syntastic/plugin/syntastic/highlighting.vim	/^function! g:SyntasticHighlightingNotifier._reset() abort " {{{2$/;"	f
SyntasticHighlightingNotifier._setup	.vim/pack/ide/start/syntastic/plugin/syntastic/highlighting.vim	/^function! g:SyntasticHighlightingNotifier._setup() abort " {{{2$/;"	f
SyntasticHighlightingNotifier.enabled	.vim/pack/ide/start/syntastic/plugin/syntastic/highlighting.vim	/^function! g:SyntasticHighlightingNotifier.enabled() abort " {{{2$/;"	f
SyntasticHighlightingNotifier.refresh	.vim/pack/ide/start/syntastic/plugin/syntastic/highlighting.vim	/^function! g:SyntasticHighlightingNotifier.refresh(loclist) abort " {{{2$/;"	f
SyntasticHighlightingNotifier.reset	.vim/pack/ide/start/syntastic/plugin/syntastic/highlighting.vim	/^function! g:SyntasticHighlightingNotifier.reset(loclist) abort " {{{2$/;"	f
SyntasticInfo	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^command! -bar -nargs=? -complete=custom,s:CompleteFiletypes   SyntasticInfo  call SyntasticInfo(/;"	c
SyntasticInfo	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! SyntasticInfo(...) abort " {{{2$/;"	f
SyntasticJavacEditClasspath	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^command! SyntasticJavacEditClasspath runtime! syntax_checkers\/java\/*.vim | SyntasticJavacEditC/;"	c
SyntasticJavacEditClasspath	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^command! SyntasticJavacEditClasspath call s:EditClasspath()$/;"	c
SyntasticJavacEditConfig	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^command! SyntasticJavacEditConfig    runtime! syntax_checkers\/java\/*.vim | SyntasticJavacEditC/;"	c
SyntasticJavacEditConfig	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^command! SyntasticJavacEditConfig    call s:EditConfig()$/;"	c
SyntasticLoclist.New	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.New(rawLoclist) abort " {{{2$/;"	f
SyntasticLoclist.balloons	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.balloons() abort " {{{2$/;"	f
SyntasticLoclist.copyRaw	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.copyRaw() abort " {{{2$/;"	f
SyntasticLoclist.current	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.current(...) abort " {{{2$/;"	f
SyntasticLoclist.decorate	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.decorate(tag) abort " {{{2$/;"	f
SyntasticLoclist.deploy	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.deploy() abort " {{{2$/;"	f
SyntasticLoclist.destroy	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.destroy() abort " {{{2$/;"	f
SyntasticLoclist.errors	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.errors() abort " {{{2$/;"	f
SyntasticLoclist.extend	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.extend(other) abort " {{{2$/;"	f
SyntasticLoclist.filter	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.filter(filters) abort " {{{2$/;"	f
SyntasticLoclist.getBuffers	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.getBuffers() abort " {{{2$/;"	f
SyntasticLoclist.getCursorColumns	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.getCursorColumns() abort " {{{2$/;"	f
SyntasticLoclist.getFirstError	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.getFirstError(...) abort " {{{2$/;"	f
SyntasticLoclist.getName	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.getName() abort " {{{2$/;"	f
SyntasticLoclist.getOwner	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.getOwner() abort " {{{2$/;"	f
SyntasticLoclist.getRaw	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.getRaw() abort " {{{2$/;"	f
SyntasticLoclist.getStatuslineFlag	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.getStatuslineFlag() abort " {{{2$/;"	f
SyntasticLoclist.hasErrorsOrWarningsToDisplay	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.hasErrorsOrWarningsToDisplay() abort " {{{2$/;"	f
SyntasticLoclist.isEmpty	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.isEmpty() abort " {{{2$/;"	f
SyntasticLoclist.isNewerThan	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.isNewerThan(stamp) abort " {{{2$/;"	f
SyntasticLoclist.messages	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.messages(buf) abort " {{{2$/;"	f
SyntasticLoclist.setName	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.setName(name) abort " {{{2$/;"	f
SyntasticLoclist.setOwner	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.setOwner(buffer) abort " {{{2$/;"	f
SyntasticLoclist.setloclist	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.setloclist(new) abort " {{{2$/;"	f
SyntasticLoclist.show	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.show() abort " {{{2$/;"	f
SyntasticLoclist.sort	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.sort() abort " {{{2$/;"	f
SyntasticLoclist.warnings	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.warnings() abort " {{{2$/;"	f
SyntasticLoclistHide	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! SyntasticLoclistHide() abort " {{{2$/;"	f
SyntasticMake	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! SyntasticMake(options) abort " {{{2$/;"	f
SyntasticModeMap.Instance	.vim/pack/ide/start/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.Instance() abort " {{{2$/;"	f
SyntasticModeMap._isOneFiletypeActive	.vim/pack/ide/start/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap._isOneFiletypeActive(filetypes) abort " {{{2$/;"	f
SyntasticModeMap._noFiletypesArePassive	.vim/pack/ide/start/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap._noFiletypesArePassive(filetypes) abort " {{{2$/;"	f
SyntasticModeMap.allowsAutoChecking	.vim/pack/ide/start/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.allowsAutoChecking(filetype) abort " {{{2$/;"	f
SyntasticModeMap.doAutoChecking	.vim/pack/ide/start/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.doAutoChecking(buf) abort " {{{2$/;"	f
SyntasticModeMap.echoMode	.vim/pack/ide/start/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.echoMode() abort " {{{2$/;"	f
SyntasticModeMap.isPassive	.vim/pack/ide/start/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.isPassive() abort " {{{2$/;"	f
SyntasticModeMap.modeInfo	.vim/pack/ide/start/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.modeInfo(filetypes) abort " {{{2$/;"	f
SyntasticModeMap.synch	.vim/pack/ide/start/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.synch() abort " {{{2$/;"	f
SyntasticModeMap.toggleMode	.vim/pack/ide/start/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.toggleMode() abort " {{{2$/;"	f
SyntasticNotifiers.Instance	.vim/pack/ide/start/syntastic/plugin/syntastic/notifiers.vim	/^function! g:SyntasticNotifiers.Instance() abort " {{{2$/;"	f
SyntasticNotifiers._initNotifiers	.vim/pack/ide/start/syntastic/plugin/syntastic/notifiers.vim	/^function! g:SyntasticNotifiers._initNotifiers() abort " {{{2$/;"	f
SyntasticNotifiers.refresh	.vim/pack/ide/start/syntastic/plugin/syntastic/notifiers.vim	/^function! g:SyntasticNotifiers.refresh(loclist) abort " {{{2$/;"	f
SyntasticNotifiers.reset	.vim/pack/ide/start/syntastic/plugin/syntastic/notifiers.vim	/^function! g:SyntasticNotifiers.reset(loclist) abort " {{{2$/;"	f
SyntasticRefreshCursor	.vim/pack/ide/start/syntastic/plugin/syntastic/cursor.vim	/^function! SyntasticRefreshCursor() abort " {{{2$/;"	f
SyntasticRegistry.CreateAndRegisterChecker	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.CreateAndRegisterChecker(args) abort " {{{2$/;"	f
SyntasticRegistry.Instance	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.Instance() abort " {{{2$/;"	f
SyntasticRegistry._filterCheckersByName	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry._filterCheckersByName(cnames) abort " {{{2$/;"	f
SyntasticRegistry._findChecker	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry._findChecker(cname) abort " {{{2$/;"	f
SyntasticRegistry._loadCheckersFor	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry._loadCheckersFor(filetype, force) abort " {{{2$/;"	f
SyntasticRegistry._registerChecker	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry._registerChecker(checker) abort " {{{2$/;"	f
SyntasticRegistry._sanityCheck	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry._sanityCheck(filetype) abort " {{{2$/;"	f
SyntasticRegistry.echoInfoFor	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.echoInfoFor(ftalias_list) abort " {{{2$/;"	f
SyntasticRegistry.getCheckers	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.getCheckers(ftalias, hints_list) abort " {{{2$/;"	f
SyntasticRegistry.getCheckersAvailable	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.getCheckersAvailable(ftalias, hints_list) abort " {{{2$/;"	f
SyntasticRegistry.getCheckersDisabled	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.getCheckersDisabled(ftalias, hints_list) abort " {{{2$/;"	f
SyntasticRegistry.getKnownFiletypes	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.getKnownFiletypes() abort " {{{2$/;"	f
SyntasticRegistry.getNamesOfAvailableCheckers	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.getNamesOfAvailableCheckers(ftalias) abort " {{{2$/;"	f
SyntasticRegistry.resolveFiletypes	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.resolveFiletypes(ftalias) abort " {{{2$/;"	f
SyntasticReset	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^command! -bar SyntasticReset      call SyntasticReset()$/;"	c
SyntasticReset	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! SyntasticReset() abort " {{{2$/;"	f
SyntasticSetLoclist	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^command! -bar SyntasticSetLoclist call SyntasticSetLoclist()$/;"	c
SyntasticSetLoclist	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! SyntasticSetLoclist() abort " {{{2$/;"	f
SyntasticSignsNotifier.New	.vim/pack/ide/start/syntastic/plugin/syntastic/signs.vim	/^function! g:SyntasticSignsNotifier.New() abort " {{{2$/;"	f
SyntasticSignsNotifier._bufSignIds	.vim/pack/ide/start/syntastic/plugin/syntastic/signs.vim	/^function! g:SyntasticSignsNotifier._bufSignIds() abort " {{{2$/;"	f
SyntasticSignsNotifier._removeSigns	.vim/pack/ide/start/syntastic/plugin/syntastic/signs.vim	/^function! g:SyntasticSignsNotifier._removeSigns(ids) abort " {{{2$/;"	f
SyntasticSignsNotifier._setup	.vim/pack/ide/start/syntastic/plugin/syntastic/signs.vim	/^function! g:SyntasticSignsNotifier._setup() abort " {{{2$/;"	f
SyntasticSignsNotifier._signErrors	.vim/pack/ide/start/syntastic/plugin/syntastic/signs.vim	/^function! g:SyntasticSignsNotifier._signErrors(loclist) abort " {{{2$/;"	f
SyntasticSignsNotifier.enabled	.vim/pack/ide/start/syntastic/plugin/syntastic/signs.vim	/^function! g:SyntasticSignsNotifier.enabled() abort " {{{2$/;"	f
SyntasticSignsNotifier.refresh	.vim/pack/ide/start/syntastic/plugin/syntastic/signs.vim	/^function! g:SyntasticSignsNotifier.refresh(loclist) abort " {{{2$/;"	f
SyntasticStatuslineFlag	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! SyntasticStatuslineFlag() abort " {{{2$/;"	f
SyntasticToggleMode	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^command! -bar SyntasticToggleMode call SyntasticToggleMode()$/;"	c
SyntasticToggleMode	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! SyntasticToggleMode() abort " {{{2$/;"	f
SyntaxCheckers_actionscript_mxmlc_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/actionscript/mxmlc.vim	/^function! SyntaxCheckers_actionscript_mxmlc_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_actionscript_mxmlc_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/actionscript/mxmlc.vim	/^function! SyntaxCheckers_actionscript_mxmlc_GetLocList() dict$/;"	f
SyntaxCheckers_ada_gcc_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/ada/gcc.vim	/^function! SyntaxCheckers_ada_gcc_GetLocList() dict$/;"	f
SyntaxCheckers_ada_gcc_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/ada/gcc.vim	/^function! SyntaxCheckers_ada_gcc_IsAvailable() dict$/;"	f
SyntaxCheckers_ansible_ansible_lint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/ansible/ansible_lint.vim	/^function! SyntaxCheckers_ansible_ansible_lint_GetLocList() dict$/;"	f
SyntaxCheckers_ansible_ansible_lint_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/ansible/ansible_lint.vim	/^function! SyntaxCheckers_ansible_ansible_lint_IsAvailable() dict$/;"	f
SyntaxCheckers_apiblueprint_drafter_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/apiblueprint/drafter.vim	/^function! SyntaxCheckers_apiblueprint_drafter_GetLocList() dict$/;"	f
SyntaxCheckers_applescript_osacompile_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/applescript/osacompile.vim	/^function! SyntaxCheckers_applescript_osacompile_GetLocList() dict$/;"	f
SyntaxCheckers_asciidoc_asciidoc_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/asciidoc/asciidoc.vim	/^function! SyntaxCheckers_asciidoc_asciidoc_GetLocList() dict$/;"	f
SyntaxCheckers_asl_iasl_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/asl/iasl.vim	/^function! SyntaxCheckers_asl_iasl_GetLocList() dict$/;"	f
SyntaxCheckers_asm_gcc_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/asm/gcc.vim	/^function! SyntaxCheckers_asm_gcc_GetLocList() dict " {{{1$/;"	f
SyntaxCheckers_asm_gcc_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/asm/gcc.vim	/^function! SyntaxCheckers_asm_gcc_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_bemhtml_bemhtmllint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/bemhtml/bemhtmllint.vim	/^function SyntaxCheckers_bemhtml_bemhtmllint_GetLocList() dict$/;"	f
SyntaxCheckers_bro_bro_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/bro/bro.vim	/^function! SyntaxCheckers_bro_bro_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_bro_bro_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/bro/bro.vim	/^function! SyntaxCheckers_bro_bro_GetLocList() dict$/;"	f
SyntaxCheckers_bro_bro_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/bro/bro.vim	/^function! SyntaxCheckers_bro_bro_IsAvailable() dict$/;"	f
SyntaxCheckers_c_avrgcc_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/c/avrgcc.vim	/^function! SyntaxCheckers_c_avrgcc_GetLocList() dict$/;"	f
SyntaxCheckers_c_checkpatch_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/c/checkpatch.vim	/^function! SyntaxCheckers_c_checkpatch_GetLocList() dict$/;"	f
SyntaxCheckers_c_checkpatch_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/c/checkpatch.vim	/^function! SyntaxCheckers_c_checkpatch_IsAvailable() dict$/;"	f
SyntaxCheckers_c_clang_check_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/c/clang_check.vim	/^function! SyntaxCheckers_c_clang_check_GetLocList() dict$/;"	f
SyntaxCheckers_c_clang_tidy_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/c/clang_tidy.vim	/^function! SyntaxCheckers_c_clang_tidy_GetLocList() dict$/;"	f
SyntaxCheckers_c_cppcheck_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/c/cppcheck.vim	/^function! SyntaxCheckers_c_cppcheck_GetLocList() dict$/;"	f
SyntaxCheckers_c_cppclean_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/c/cppclean.vim	/^function! SyntaxCheckers_c_cppclean_GetLocList() dict$/;"	f
SyntaxCheckers_c_flawfinder_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/c/flawfinder.vim	/^function! SyntaxCheckers_c_flawfinder_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_c_flawfinder_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/c/flawfinder.vim	/^function! SyntaxCheckers_c_flawfinder_GetLocList() dict$/;"	f
SyntaxCheckers_c_gcc_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/c/gcc.vim	/^function! SyntaxCheckers_c_gcc_GetLocList() dict$/;"	f
SyntaxCheckers_c_gcc_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/c/gcc.vim	/^function! SyntaxCheckers_c_gcc_IsAvailable() dict$/;"	f
SyntaxCheckers_c_make_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/c/make.vim	/^function! SyntaxCheckers_c_make_GetLocList() dict$/;"	f
SyntaxCheckers_c_oclint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/c/oclint.vim	/^function! SyntaxCheckers_c_oclint_GetLocList() dict$/;"	f
SyntaxCheckers_c_pc_lint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/c/pc_lint.vim	/^function! SyntaxCheckers_c_pc_lint_GetLocList() dict$/;"	f
SyntaxCheckers_c_sparse_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/c/sparse.vim	/^function! SyntaxCheckers_c_sparse_GetLocList() dict$/;"	f
SyntaxCheckers_c_splint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/c/splint.vim	/^function! SyntaxCheckers_c_splint_GetLocList() dict$/;"	f
SyntaxCheckers_cabal_cabal_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/cabal/cabal.vim	/^function! SyntaxCheckers_cabal_cabal_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_cabal_cabal_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/cabal/cabal.vim	/^function! SyntaxCheckers_cabal_cabal_GetLocList() dict$/;"	f
SyntaxCheckers_chef_foodcritic_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/chef/foodcritic.vim	/^function! SyntaxCheckers_chef_foodcritic_GetLocList() dict$/;"	f
SyntaxCheckers_cmake_cmakelint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/cmake/cmakelint.vim	/^function! SyntaxCheckers_cmake_cmakelint_GetLocList() dict$/;"	f
SyntaxCheckers_co_coco_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/co/coco.vim	/^function! SyntaxCheckers_co_coco_GetLocList() dict$/;"	f
SyntaxCheckers_cobol_cobc_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/cobol/cobc.vim	/^function! SyntaxCheckers_cobol_cobc_GetLocList() dict$/;"	f
SyntaxCheckers_cobol_cobc_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/cobol/cobc.vim	/^function! SyntaxCheckers_cobol_cobc_IsAvailable() dict$/;"	f
SyntaxCheckers_coffee_coffee_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/coffee/coffee.vim	/^function! SyntaxCheckers_coffee_coffee_GetLocList() dict$/;"	f
SyntaxCheckers_coffee_coffee_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/coffee/coffee.vim	/^function! SyntaxCheckers_coffee_coffee_IsAvailable() dict$/;"	f
SyntaxCheckers_coffee_coffee_jshint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/coffee/coffee_jshint.vim	/^function! SyntaxCheckers_coffee_coffee_jshint_GetLocList() dict$/;"	f
SyntaxCheckers_coffee_coffeelint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/coffee/coffeelint.vim	/^function! SyntaxCheckers_coffee_coffeelint_GetLocList() dict$/;"	f
SyntaxCheckers_coq_coqtop_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/coq/coqtop.vim	/^function! SyntaxCheckers_coq_coqtop_GetLocList() dict$/;"	f
SyntaxCheckers_cpp_cpplint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/cpp/cpplint.vim	/^function! SyntaxCheckers_cpp_cpplint_GetLocList() dict$/;"	f
SyntaxCheckers_cpp_gcc_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/cpp/gcc.vim	/^function! SyntaxCheckers_cpp_gcc_GetLocList() dict$/;"	f
SyntaxCheckers_cpp_gcc_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/cpp/gcc.vim	/^function! SyntaxCheckers_cpp_gcc_IsAvailable() dict$/;"	f
SyntaxCheckers_cpp_verapp_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/cpp/verapp.vim	/^function! SyntaxCheckers_cpp_verapp_GetLocList() dict$/;"	f
SyntaxCheckers_cs_mcs_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/cs/mcs.vim	/^function! SyntaxCheckers_cs_mcs_GetLocList() dict$/;"	f
SyntaxCheckers_css_csslint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/css/csslint.vim	/^function! SyntaxCheckers_css_csslint_GetLocList() dict$/;"	f
SyntaxCheckers_css_prettycss_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/css/prettycss.vim	/^function! SyntaxCheckers_css_prettycss_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_css_prettycss_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/css/prettycss.vim	/^function! SyntaxCheckers_css_prettycss_GetLocList() dict$/;"	f
SyntaxCheckers_css_stylelint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/css/stylelint.vim	/^function! SyntaxCheckers_css_stylelint_GetLocList() dict$/;"	f
SyntaxCheckers_cucumber_cucumber_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/cucumber/cucumber.vim	/^function! SyntaxCheckers_cucumber_cucumber_GetLocList() dict$/;"	f
SyntaxCheckers_cuda_nvcc_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/cuda/nvcc.vim	/^function! SyntaxCheckers_cuda_nvcc_GetLocList() dict$/;"	f
SyntaxCheckers_d_dmd_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/d/dmd.vim	/^function! SyntaxCheckers_d_dmd_GetLocList() dict " {{{1$/;"	f
SyntaxCheckers_d_dmd_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/d/dmd.vim	/^function! SyntaxCheckers_d_dmd_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_d_dscanner_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/d/dscanner.vim	/^function! SyntaxCheckers_d_dscanner_GetHighlightRegex(i)$/;"	f
SyntaxCheckers_d_dscanner_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/d/dscanner.vim	/^function! SyntaxCheckers_d_dscanner_GetLocList() dict$/;"	f
SyntaxCheckers_dart_dartanalyzer_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/dart/dartanalyzer.vim	/^function! SyntaxCheckers_dart_dartanalyzer_GetHighlightRegex(error)$/;"	f
SyntaxCheckers_dart_dartanalyzer_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/dart/dartanalyzer.vim	/^function! SyntaxCheckers_dart_dartanalyzer_GetLocList() dict$/;"	f
SyntaxCheckers_docbk_igor_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/docbk/igor.vim	/^function! SyntaxCheckers_docbk_igor_GetLocList() dict$/;"	f
SyntaxCheckers_dockerfile_dockerfile_lint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/dockerfile/dockerfile_lint.vim	/^function! SyntaxCheckers_dockerfile_dockerfile_lint_GetLocList() dict$/;"	f
SyntaxCheckers_dockerfile_hadolint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/dockerfile/hadolint.vim	/^function! SyntaxCheckers_dockerfile_hadolint_GetLocList() dict$/;"	f
SyntaxCheckers_dustjs_swiffer_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/dustjs/swiffer.vim	/^function! SyntaxCheckers_dustjs_swiffer_GetLocList() dict$/;"	f
SyntaxCheckers_elixir_elixir_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/elixir/elixir.vim	/^function! SyntaxCheckers_elixir_elixir_GetLocList() dict$/;"	f
SyntaxCheckers_elixir_elixir_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/elixir/elixir.vim	/^function! SyntaxCheckers_elixir_elixir_IsAvailable() dict$/;"	f
SyntaxCheckers_erlang_escript_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/escript.vim	/^function! SyntaxCheckers_erlang_escript_GetLocList() dict$/;"	f
SyntaxCheckers_erlang_syntaxerl_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/syntaxerl.vim	/^function! SyntaxCheckers_erlang_syntaxerl_GetLocList() dict$/;"	f
SyntaxCheckers_eruby_ruby_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/eruby/ruby.vim	/^function! SyntaxCheckers_eruby_ruby_GetLocList() dict$/;"	f
SyntaxCheckers_eruby_ruby_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/eruby/ruby.vim	/^function! SyntaxCheckers_eruby_ruby_IsAvailable() dict$/;"	f
SyntaxCheckers_fortran_gfortran_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/fortran/gfortran.vim	/^function! SyntaxCheckers_fortran_gfortran_GetLocList() dict " {{{1$/;"	f
SyntaxCheckers_fortran_gfortran_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/fortran/gfortran.vim	/^function! SyntaxCheckers_fortran_gfortran_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_glsl_cgc_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/glsl/cgc.vim	/^function! SyntaxCheckers_glsl_cgc_GetLocList() dict " {{{1$/;"	f
SyntaxCheckers_go_go_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/go/go.vim	/^function! SyntaxCheckers_go_go_GetLocList() dict$/;"	f
SyntaxCheckers_go_go_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/go/go.vim	/^function! SyntaxCheckers_go_go_IsAvailable() dict$/;"	f
SyntaxCheckers_go_gofmt_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/go/gofmt.vim	/^function! SyntaxCheckers_go_gofmt_GetLocList() dict$/;"	f
SyntaxCheckers_go_golangci_lint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/go/golangci_lint.vim	/^function! SyntaxCheckers_go_golangci_lint_GetLocList() dict$/;"	f
SyntaxCheckers_go_golint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/go/golint.vim	/^function! SyntaxCheckers_go_golint_GetLocList() dict$/;"	f
SyntaxCheckers_go_gometalinter_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/go/gometalinter.vim	/^function! SyntaxCheckers_go_gometalinter_GetLocList() dict$/;"	f
SyntaxCheckers_go_gotype_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/go/gotype.vim	/^function! SyntaxCheckers_go_gotype_GetLocList() dict$/;"	f
SyntaxCheckers_go_govet_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/go/govet.vim	/^function! SyntaxCheckers_go_govet_GetLocList() dict$/;"	f
SyntaxCheckers_haml_haml_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/haml/haml.vim	/^function! SyntaxCheckers_haml_haml_GetLocList() dict$/;"	f
SyntaxCheckers_haml_haml_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/haml/haml.vim	/^function! SyntaxCheckers_haml_haml_IsAvailable() dict$/;"	f
SyntaxCheckers_haml_haml_lint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/haml/haml_lint.vim	/^function! SyntaxCheckers_haml_haml_lint_GetLocList() dict$/;"	f
SyntaxCheckers_handlebars_handlebars_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/handlebars/handlebars.vim	/^function! SyntaxCheckers_handlebars_handlebars_GetLocList() dict$/;"	f
SyntaxCheckers_haskell_hdevtools_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/haskell/hdevtools.vim	/^function! SyntaxCheckers_haskell_hdevtools_GetLocList() dict$/;"	f
SyntaxCheckers_haskell_hlint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/haskell/hlint.vim	/^function! SyntaxCheckers_haskell_hlint_GetLocList() dict$/;"	f
SyntaxCheckers_haskell_hlint_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/haskell/hlint.vim	/^function! SyntaxCheckers_haskell_hlint_IsAvailable() dict$/;"	f
SyntaxCheckers_haskell_scan_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/haskell/scan.vim	/^function! SyntaxCheckers_haskell_scan_GetLocList() dict$/;"	f
SyntaxCheckers_haxe_haxe_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/haxe/haxe.vim	/^function! SyntaxCheckers_haxe_haxe_GetLocList() dict$/;"	f
SyntaxCheckers_hss_hss_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/hss/hss.vim	/^function! SyntaxCheckers_hss_hss_GetLocList() dict$/;"	f
SyntaxCheckers_html_htmlhint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/html/htmlhint.vim	/^function! SyntaxCheckers_html_htmlhint_GetLocList() dict$/;"	f
SyntaxCheckers_html_htmlhint_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/html/htmlhint.vim	/^function! SyntaxCheckers_html_htmlhint_IsAvailable() dict$/;"	f
SyntaxCheckers_html_jshint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/html/jshint.vim	/^function! SyntaxCheckers_html_jshint_GetLocList() dict$/;"	f
SyntaxCheckers_html_jshint_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/html/jshint.vim	/^function! SyntaxCheckers_html_jshint_IsAvailable() dict$/;"	f
SyntaxCheckers_html_tidy_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/html/tidy.vim	/^function! SyntaxCheckers_html_tidy_GetLocList() dict " {{{1$/;"	f
SyntaxCheckers_html_validator_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/html/validator.vim	/^function! SyntaxCheckers_html_validator_GetLocList() dict " {{{1$/;"	f
SyntaxCheckers_html_w3_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/html/w3.vim	/^function! SyntaxCheckers_html_w3_GetLocList() dict " {{{1$/;"	f
SyntaxCheckers_java_checkstyle_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/java/checkstyle.vim	/^function! SyntaxCheckers_java_checkstyle_GetLocList() dict$/;"	f
SyntaxCheckers_java_checkstyle_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/java/checkstyle.vim	/^function! SyntaxCheckers_java_checkstyle_IsAvailable() dict$/;"	f
SyntaxCheckers_java_javac_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^function! SyntaxCheckers_java_javac_GetLocList() dict " {{{1$/;"	f
SyntaxCheckers_java_javac_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^function! SyntaxCheckers_java_javac_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_javascript_closurecompiler_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/closurecompiler.vim	/^function! SyntaxCheckers_javascript_closurecompiler_GetLocList() dict$/;"	f
SyntaxCheckers_javascript_closurecompiler_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/closurecompiler.vim	/^function! SyntaxCheckers_javascript_closurecompiler_IsAvailable() dict$/;"	f
SyntaxCheckers_javascript_eslint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/eslint.vim	/^function! SyntaxCheckers_javascript_eslint_GetLocList() dict$/;"	f
SyntaxCheckers_javascript_eslint_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/eslint.vim	/^function! SyntaxCheckers_javascript_eslint_IsAvailable() dict$/;"	f
SyntaxCheckers_javascript_flow_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/flow.vim	/^function! SyntaxCheckers_javascript_flow_GetLocList() dict$/;"	f
SyntaxCheckers_javascript_flow_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/flow.vim	/^function! SyntaxCheckers_javascript_flow_IsAvailable() dict$/;"	f
SyntaxCheckers_javascript_gjslint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/gjslint.vim	/^function! SyntaxCheckers_javascript_gjslint_GetLocList() dict$/;"	f
SyntaxCheckers_javascript_jscs_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/jscs.vim	/^function! SyntaxCheckers_javascript_jscs_GetLocList() dict$/;"	f
SyntaxCheckers_javascript_jscs_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/jscs.vim	/^function! SyntaxCheckers_javascript_jscs_IsAvailable() dict$/;"	f
SyntaxCheckers_javascript_jshint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/jshint.vim	/^function! SyntaxCheckers_javascript_jshint_GetLocList() dict$/;"	f
SyntaxCheckers_javascript_jshint_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/jshint.vim	/^function! SyntaxCheckers_javascript_jshint_IsAvailable() dict$/;"	f
SyntaxCheckers_javascript_jsl_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/jsl.vim	/^function! SyntaxCheckers_javascript_jsl_GetLocList() dict$/;"	f
SyntaxCheckers_javascript_jslint_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/jslint.vim	/^function! SyntaxCheckers_javascript_jslint_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_javascript_jslint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/jslint.vim	/^function! SyntaxCheckers_javascript_jslint_GetLocList() dict$/;"	f
SyntaxCheckers_javascript_jsxhint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/jsxhint.vim	/^function! SyntaxCheckers_javascript_jsxhint_GetLocList() dict " {{{1$/;"	f
SyntaxCheckers_javascript_jsxhint_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/jsxhint.vim	/^function! SyntaxCheckers_javascript_jsxhint_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_javascript_lynt_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/lynt.vim	/^function! SyntaxCheckers_javascript_lynt_GetLocList() dict$/;"	f
SyntaxCheckers_javascript_mixedindentlint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/mixedindentlint.vim	/^function! SyntaxCheckers_javascript_mixedindentlint_GetLocList() dict$/;"	f
SyntaxCheckers_javascript_standard_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/standard.vim	/^function! SyntaxCheckers_javascript_standard_GetLocList() dict$/;"	f
SyntaxCheckers_javascript_standard_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/standard.vim	/^function! SyntaxCheckers_javascript_standard_IsAvailable() dict$/;"	f
SyntaxCheckers_javascript_tern_lint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/tern_lint.vim	/^function! SyntaxCheckers_javascript_tern_lint_GetLocList() dict$/;"	f
SyntaxCheckers_javascript_tern_lint_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/tern_lint.vim	/^function! SyntaxCheckers_javascript_tern_lint_IsAvailable() dict$/;"	f
SyntaxCheckers_json_jsonlint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/json/jsonlint.vim	/^function! SyntaxCheckers_json_jsonlint_GetLocList() dict$/;"	f
SyntaxCheckers_json_jsonval_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/json/jsonval.vim	/^function! SyntaxCheckers_json_jsonval_GetLocList() dict$/;"	f
SyntaxCheckers_less_lessc_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/less/lessc.vim	/^function! SyntaxCheckers_less_lessc_GetLocList() dict$/;"	f
SyntaxCheckers_less_lessc_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/less/lessc.vim	/^function! SyntaxCheckers_less_lessc_IsAvailable() dict$/;"	f
SyntaxCheckers_less_recess_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/less/recess.vim	/^function! SyntaxCheckers_less_recess_GetLocList() dict$/;"	f
SyntaxCheckers_lex_flex_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/lex/flex.vim	/^function! SyntaxCheckers_lex_flex_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_lex_flex_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/lex/flex.vim	/^function! SyntaxCheckers_lex_flex_GetLocList() dict$/;"	f
SyntaxCheckers_limbo_limbo_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/limbo/limbo.vim	/^function! SyntaxCheckers_limbo_limbo_GetLocList() dict$/;"	f
SyntaxCheckers_lisp_clisp_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/lisp/clisp.vim	/^function! SyntaxCheckers_lisp_clisp_GetLocList() dict$/;"	f
SyntaxCheckers_llvm_llvm_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/llvm/llvm.vim	/^function! SyntaxCheckers_llvm_llvm_GetLocList() dict$/;"	f
SyntaxCheckers_lua_luac_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/lua/luac.vim	/^function! SyntaxCheckers_lua_luac_GetHighlightRegex(pos)$/;"	f
SyntaxCheckers_lua_luac_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/lua/luac.vim	/^function! SyntaxCheckers_lua_luac_GetLocList() dict$/;"	f
SyntaxCheckers_lua_luacheck_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/lua/luacheck.vim	/^function! SyntaxCheckers_lua_luacheck_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_lua_luacheck_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/lua/luacheck.vim	/^function! SyntaxCheckers_lua_luacheck_GetLocList() dict$/;"	f
SyntaxCheckers_markdown_mdl_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/markdown/mdl.vim	/^function! SyntaxCheckers_markdown_mdl_GetLocList() dict$/;"	f
SyntaxCheckers_markdown_remark_lint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/markdown/remark_lint.vim	/^function! SyntaxCheckers_markdown_remark_lint_GetLocList() dict$/;"	f
SyntaxCheckers_matlab_mlint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/matlab/mlint.vim	/^function! SyntaxCheckers_matlab_mlint_GetLocList() dict$/;"	f
SyntaxCheckers_mercury_mmc_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/mercury/mmc.vim	/^function! SyntaxCheckers_mercury_mmc_GetLocList() dict$/;"	f
SyntaxCheckers_nasm_nasm_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/nasm/nasm.vim	/^function! SyntaxCheckers_nasm_nasm_GetLocList() dict$/;"	f
SyntaxCheckers_nix_nix_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/nix/nix.vim	/^function! SyntaxCheckers_nix_nix_GetLocList() dict$/;"	f
SyntaxCheckers_nroff_mandoc_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/nroff/mandoc.vim	/^function! SyntaxCheckers_nroff_mandoc_GetLocList() dict$/;"	f
SyntaxCheckers_objc_gcc_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/objc/gcc.vim	/^function! SyntaxCheckers_objc_gcc_GetLocList() dict$/;"	f
SyntaxCheckers_objc_gcc_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/objc/gcc.vim	/^function! SyntaxCheckers_objc_gcc_IsAvailable() dict$/;"	f
SyntaxCheckers_objcpp_gcc_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/objcpp/gcc.vim	/^function! SyntaxCheckers_objcpp_gcc_GetLocList() dict$/;"	f
SyntaxCheckers_objcpp_gcc_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/objcpp/gcc.vim	/^function! SyntaxCheckers_objcpp_gcc_IsAvailable() dict$/;"	f
SyntaxCheckers_ocaml_camlp4o_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^function! SyntaxCheckers_ocaml_camlp4o_GetLocList() dict " {{{1$/;"	f
SyntaxCheckers_ocaml_camlp4o_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^function! SyntaxCheckers_ocaml_camlp4o_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_perl_perl_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/perl/perl.vim	/^function! SyntaxCheckers_perl_perl_GetLocList() dict " {{{1$/;"	f
SyntaxCheckers_perl_perl_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/perl/perl.vim	/^function! SyntaxCheckers_perl_perl_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_perl_perlcritic_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/perl/perlcritic.vim	/^function! SyntaxCheckers_perl_perlcritic_GetLocList() dict$/;"	f
SyntaxCheckers_php_php_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/php/php.vim	/^function! SyntaxCheckers_php_php_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_php_php_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/php/php.vim	/^function! SyntaxCheckers_php_php_GetLocList() dict$/;"	f
SyntaxCheckers_php_phpcs_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/php/phpcs.vim	/^function! SyntaxCheckers_php_phpcs_GetLocList() dict$/;"	f
SyntaxCheckers_php_phplint_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/php/phplint.vim	/^function! SyntaxCheckers_php_phplint_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_php_phplint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/php/phplint.vim	/^function! SyntaxCheckers_php_phplint_GetLocList() dict$/;"	f
SyntaxCheckers_php_phpmd_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/php/phpmd.vim	/^function! SyntaxCheckers_php_phpmd_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_php_phpmd_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/php/phpmd.vim	/^function! SyntaxCheckers_php_phpmd_GetLocList() dict$/;"	f
SyntaxCheckers_php_phpstan_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/php/phpstan.vim	/^function! SyntaxCheckers_php_phpstan_GetLocList() dict$/;"	f
SyntaxCheckers_php_phpstan_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/php/phpstan.vim	/^function! SyntaxCheckers_php_phpstan_IsAvailable() dict$/;"	f
SyntaxCheckers_po_dennis_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/po/dennis.vim	/^function! SyntaxCheckers_po_dennis_GetLocList() dict$/;"	f
SyntaxCheckers_po_msgfmt_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/po/msgfmt.vim	/^function! SyntaxCheckers_po_msgfmt_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_po_msgfmt_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/po/msgfmt.vim	/^function! SyntaxCheckers_po_msgfmt_GetLocList() dict$/;"	f
SyntaxCheckers_pod_podchecker_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/pod/podchecker.vim	/^function! SyntaxCheckers_pod_podchecker_GetLocList() dict$/;"	f
SyntaxCheckers_pug_pug_lint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/pug/pug_lint.vim	/^function! SyntaxCheckers_pug_pug_lint_GetLocList() dict$/;"	f
SyntaxCheckers_puppet_puppet_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/puppet/puppet.vim	/^function! SyntaxCheckers_puppet_puppet_GetLocList() dict$/;"	f
SyntaxCheckers_puppet_puppetlint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/puppet/puppetlint.vim	/^function! SyntaxCheckers_puppet_puppetlint_GetLocList() dict$/;"	f
SyntaxCheckers_puppet_puppetlint_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/puppet/puppetlint.vim	/^function! SyntaxCheckers_puppet_puppetlint_IsAvailable() dict$/;"	f
SyntaxCheckers_python_bandit_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/python/bandit.vim	/^function! SyntaxCheckers_python_bandit_GetLocList() dict$/;"	f
SyntaxCheckers_python_flake8_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/python/flake8.vim	/^function! SyntaxCheckers_python_flake8_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_python_flake8_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/python/flake8.vim	/^function! SyntaxCheckers_python_flake8_GetLocList() dict$/;"	f
SyntaxCheckers_python_frosted_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/python/frosted.vim	/^function! SyntaxCheckers_python_frosted_GetLocList() dict$/;"	f
SyntaxCheckers_python_mypy_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/python/mypy.vim	/^function! SyntaxCheckers_python_mypy_GetLocList() dict$/;"	f
SyntaxCheckers_python_prospector_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/python/prospector.vim	/^function! SyntaxCheckers_python_prospector_GetLocList() dict$/;"	f
SyntaxCheckers_python_prospector_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/python/prospector.vim	/^function! SyntaxCheckers_python_prospector_IsAvailable() dict$/;"	f
SyntaxCheckers_python_py3kwarn_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/python/py3kwarn.vim	/^function! SyntaxCheckers_python_py3kwarn_GetLocList() dict$/;"	f
SyntaxCheckers_python_pycodestyle_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/python/pycodestyle.vim	/^function! SyntaxCheckers_python_pycodestyle_GetLocList() dict$/;"	f
SyntaxCheckers_python_pydocstyle_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/python/pydocstyle.vim	/^function! SyntaxCheckers_python_pydocstyle_GetLocList() dict$/;"	f
SyntaxCheckers_python_pyflakes_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/python/pyflakes.vim	/^function! SyntaxCheckers_python_pyflakes_GetHighlightRegex(i)$/;"	f
SyntaxCheckers_python_pyflakes_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/python/pyflakes.vim	/^function! SyntaxCheckers_python_pyflakes_GetLocList() dict$/;"	f
SyntaxCheckers_python_pylama_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/python/pylama.vim	/^function! SyntaxCheckers_python_pylama_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_python_pylama_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/python/pylama.vim	/^function! SyntaxCheckers_python_pylama_GetLocList() dict$/;"	f
SyntaxCheckers_python_pylint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/python/pylint.vim	/^function! SyntaxCheckers_python_pylint_GetLocList() dict " {{{1$/;"	f
SyntaxCheckers_python_pylint_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/python/pylint.vim	/^function! SyntaxCheckers_python_pylint_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_python_python_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/python/python.vim	/^function! SyntaxCheckers_python_python_GetLocList() dict$/;"	f
SyntaxCheckers_python_python_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/python/python.vim	/^function! SyntaxCheckers_python_python_IsAvailable() dict$/;"	f
SyntaxCheckers_qml_qmllint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/qml/qmllint.vim	/^function! SyntaxCheckers_qml_qmllint_GetLocList() dict$/;"	f
SyntaxCheckers_r_lint_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/r/lint.vim	/^function! SyntaxCheckers_r_lint_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_r_lint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/r/lint.vim	/^function! SyntaxCheckers_r_lint_GetLocList() dict$/;"	f
SyntaxCheckers_r_lint_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/r/lint.vim	/^function! SyntaxCheckers_r_lint_IsAvailable() dict$/;"	f
SyntaxCheckers_r_lintr_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/r/lintr.vim	/^function! SyntaxCheckers_r_lintr_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_r_lintr_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/r/lintr.vim	/^function! SyntaxCheckers_r_lintr_GetLocList() dict$/;"	f
SyntaxCheckers_r_lintr_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/r/lintr.vim	/^function! SyntaxCheckers_r_lintr_IsAvailable() dict$/;"	f
SyntaxCheckers_r_svtools_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/r/svtools.vim	/^function! SyntaxCheckers_r_svtools_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_r_svtools_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/r/svtools.vim	/^function! SyntaxCheckers_r_svtools_GetLocList() dict$/;"	f
SyntaxCheckers_r_svtools_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/r/svtools.vim	/^function! SyntaxCheckers_r_svtools_IsAvailable() dict$/;"	f
SyntaxCheckers_racket_code_ayatollah_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/racket/code-ayatollah.vim	/^function! SyntaxCheckers_racket_code_ayatollah_GetLocList() dict$/;"	f
SyntaxCheckers_racket_code_ayatollah_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/racket/code-ayatollah.vim	/^function! SyntaxCheckers_racket_code_ayatollah_IsAvailable() dict$/;"	f
SyntaxCheckers_racket_racket_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/racket/racket.vim	/^function! SyntaxCheckers_racket_racket_GetLocList() dict$/;"	f
SyntaxCheckers_raku_raku_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/raku/raku.vim	/^function! SyntaxCheckers_raku_raku_GetHighlightRegex(item) " {{{1$/;"	f
SyntaxCheckers_raku_raku_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/raku/raku.vim	/^function! SyntaxCheckers_raku_raku_GetLocList() dict " {{{1$/;"	f
SyntaxCheckers_raku_raku_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/raku/raku.vim	/^function! SyntaxCheckers_raku_raku_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_rnc_rnv_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/rnc/rnv.vim	/^function! SyntaxCheckers_rnc_rnv_GetLocList() dict$/;"	f
SyntaxCheckers_rst_rst2pseudoxml_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/rst/rst2pseudoxml.vim	/^function! SyntaxCheckers_rst_rst2pseudoxml_GetLocList() dict$/;"	f
SyntaxCheckers_rst_rst2pseudoxml_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/rst/rst2pseudoxml.vim	/^function! SyntaxCheckers_rst_rst2pseudoxml_IsAvailable() dict$/;"	f
SyntaxCheckers_rst_rstcheck_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/rst/rstcheck.vim	/^function! SyntaxCheckers_rst_rstcheck_GetLocList() dict$/;"	f
SyntaxCheckers_rst_sphinx_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/rst/sphinx.vim	/^function! SyntaxCheckers_rst_sphinx_GetLocList() dict$/;"	f
SyntaxCheckers_ruby_flog_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/flog.vim	/^function! SyntaxCheckers_ruby_flog_GetLocList() dict$/;"	f
SyntaxCheckers_ruby_jruby_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/jruby.vim	/^function! SyntaxCheckers_ruby_jruby_GetLocList() dict$/;"	f
SyntaxCheckers_ruby_macruby_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/macruby.vim	/^function! SyntaxCheckers_ruby_macruby_GetLocList() dict$/;"	f
SyntaxCheckers_ruby_mri_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/mri.vim	/^function! SyntaxCheckers_ruby_mri_GetHighlightRegex(i)$/;"	f
SyntaxCheckers_ruby_mri_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/mri.vim	/^function! SyntaxCheckers_ruby_mri_GetLocList() dict$/;"	f
SyntaxCheckers_ruby_mri_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/mri.vim	/^function! SyntaxCheckers_ruby_mri_IsAvailable() dict$/;"	f
SyntaxCheckers_ruby_reek_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/reek.vim	/^function! SyntaxCheckers_ruby_reek_GetLocList() dict$/;"	f
SyntaxCheckers_ruby_reek_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/reek.vim	/^function! SyntaxCheckers_ruby_reek_IsAvailable() dict$/;"	f
SyntaxCheckers_ruby_rubocop_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/rubocop.vim	/^function! SyntaxCheckers_ruby_rubocop_GetLocList() dict$/;"	f
SyntaxCheckers_ruby_rubocop_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/rubocop.vim	/^function! SyntaxCheckers_ruby_rubocop_IsAvailable() dict$/;"	f
SyntaxCheckers_ruby_rubylint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/rubylint.vim	/^function! SyntaxCheckers_ruby_rubylint_GetLocList() dict$/;"	f
SyntaxCheckers_ruby_sorbet_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/sorbet.vim	/^function! SyntaxCheckers_ruby_sorbet_GetLocList() dict$/;"	f
SyntaxCheckers_ruby_sorbet_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/sorbet.vim	/^function! SyntaxCheckers_ruby_sorbet_IsAvailable() dict$/;"	f
SyntaxCheckers_sass_sass_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/sass/sass.vim	/^function! SyntaxCheckers_sass_sass_GetLocList() dict$/;"	f
SyntaxCheckers_sass_sass_lint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/sass/sass_lint.vim	/^function! SyntaxCheckers_sass_sass_lint_GetLocList() dict$/;"	f
SyntaxCheckers_sass_sass_lint_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/sass/sass_lint.vim	/^function! SyntaxCheckers_sass_sass_lint_IsAvailable() dict$/;"	f
SyntaxCheckers_sass_sassc_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/sass/sassc.vim	/^function! SyntaxCheckers_sass_sassc_GetLocList() dict$/;"	f
SyntaxCheckers_scala_fsc_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/scala/fsc.vim	/^function! SyntaxCheckers_scala_fsc_GetLocList() dict$/;"	f
SyntaxCheckers_scala_scalac_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/scala/scalac.vim	/^function! SyntaxCheckers_scala_scalac_GetLocList() dict$/;"	f
SyntaxCheckers_scala_scalastyle_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/scala/scalastyle.vim	/^function! SyntaxCheckers_scala_scalastyle_GetLocList() dict$/;"	f
SyntaxCheckers_scala_scalastyle_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/scala/scalastyle.vim	/^function! SyntaxCheckers_scala_scalastyle_IsAvailable() dict$/;"	f
SyntaxCheckers_scss_scss_lint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/scss/scss_lint.vim	/^function! SyntaxCheckers_scss_scss_lint_GetLocList() dict$/;"	f
SyntaxCheckers_scss_scss_lint_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/scss/scss_lint.vim	/^function! SyntaxCheckers_scss_scss_lint_IsAvailable() dict$/;"	f
SyntaxCheckers_sh_bashate_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/sh/bashate.vim	/^function! SyntaxCheckers_sh_bashate_GetLocList() dict$/;"	f
SyntaxCheckers_sh_checkbashisms_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/sh/checkbashisms.vim	/^function! SyntaxCheckers_sh_checkbashisms_GetLocList() dict$/;"	f
SyntaxCheckers_sh_sh_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/sh/sh.vim	/^function! SyntaxCheckers_sh_sh_GetLocList() dict " {{{1$/;"	f
SyntaxCheckers_sh_sh_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/sh/sh.vim	/^function! SyntaxCheckers_sh_sh_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_sh_shellcheck_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/sh/shellcheck.vim	/^function! SyntaxCheckers_sh_shellcheck_GetLocList() dict " {{{1$/;"	f
SyntaxCheckers_sh_shfmt_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/sh/shfmt.vim	/^function! SyntaxCheckers_sh_shfmt_GetLocList() dict$/;"	f
SyntaxCheckers_slim_slim_lint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/slim/slim_lint.vim	/^function! SyntaxCheckers_slim_slim_lint_GetLocList() dict$/;"	f
SyntaxCheckers_slim_slimrb_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/slim/slimrb.vim	/^function! SyntaxCheckers_slim_slimrb_GetLocList() dict$/;"	f
SyntaxCheckers_sml_smlnj_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/sml/smlnj.vim	/^function! SyntaxCheckers_sml_smlnj_GetLocList() dict$/;"	f
SyntaxCheckers_solidity_solc_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/solidity/solc.vim	/^function! SyntaxCheckers_solidity_solc_GetLocList() dict$/;"	f
SyntaxCheckers_solidity_solhint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/solidity/solhint.vim	/^function! SyntaxCheckers_solidity_solhint_GetLocList() dict$/;"	f
SyntaxCheckers_solidity_solium_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/solidity/solium.vim	/^function! SyntaxCheckers_solidity_solium_GetLocList() dict$/;"	f
SyntaxCheckers_spec_rpmlint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/spec/rpmlint.vim	/^function! SyntaxCheckers_spec_rpmlint_GetLocList() dict$/;"	f
SyntaxCheckers_sql_sqlint_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/sql/sqlint.vim	/^function! SyntaxCheckers_sql_sqlint_GetHighlightRegex(i)$/;"	f
SyntaxCheckers_sql_sqlint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/sql/sqlint.vim	/^function! SyntaxCheckers_sql_sqlint_GetLocList() dict$/;"	f
SyntaxCheckers_sql_sqlint_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/sql/sqlint.vim	/^function! SyntaxCheckers_sql_sqlint_IsAvailable() dict$/;"	f
SyntaxCheckers_sql_tsqllint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/sql/tsqllint.vim	/^function! SyntaxCheckers_sql_tsqllint_GetLocList() dict$/;"	f
SyntaxCheckers_stylus_stylint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/stylus/stylint.vim	/^function! SyntaxCheckers_stylus_stylint_GetLocList() dict$/;"	f
SyntaxCheckers_tcl_nagelfar_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/tcl/nagelfar.vim	/^function! SyntaxCheckers_tcl_nagelfar_GetLocList() dict$/;"	f
SyntaxCheckers_tex_chktex_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/tex/chktex.vim	/^function! SyntaxCheckers_tex_chktex_GetLocList() dict$/;"	f
SyntaxCheckers_tex_lacheck_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/tex/lacheck.vim	/^function! SyntaxCheckers_tex_lacheck_GetLocList() dict$/;"	f
SyntaxCheckers_texinfo_makeinfo_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/texinfo/makeinfo.vim	/^function! SyntaxCheckers_texinfo_makeinfo_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_texinfo_makeinfo_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/texinfo/makeinfo.vim	/^function! SyntaxCheckers_texinfo_makeinfo_GetLocList() dict$/;"	f
SyntaxCheckers_text_atdtool_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/text/atdtool.vim	/^function! SyntaxCheckers_text_atdtool_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_text_atdtool_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/text/atdtool.vim	/^function! SyntaxCheckers_text_atdtool_GetLocList() dict$/;"	f
SyntaxCheckers_text_language_check_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/text/language_check.vim	/^function! SyntaxCheckers_text_language_check_GetLocList() dict$/;"	f
SyntaxCheckers_text_proselint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/text/proselint.vim	/^function! SyntaxCheckers_text_proselint_GetLocList() dict$/;"	f
SyntaxCheckers_text_textlint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/text/textlint.vim	/^function! SyntaxCheckers_text_textlint_GetLocList() dict$/;"	f
SyntaxCheckers_turtle_rapper_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/turtle/rapper.vim	/^function! SyntaxCheckers_turtle_rapper_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_turtle_rapper_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/turtle/rapper.vim	/^function! SyntaxCheckers_turtle_rapper_GetLocList() dict$/;"	f
SyntaxCheckers_turtle_ttl_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/turtle/ttl.vim	/^function! SyntaxCheckers_turtle_ttl_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_turtle_ttl_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/turtle/ttl.vim	/^function! SyntaxCheckers_turtle_ttl_GetLocList() dict$/;"	f
SyntaxCheckers_twig_twigcs_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/twig/twigcs.vim	/^function! SyntaxCheckers_twig_twigcs_GetLocList() dict$/;"	f
SyntaxCheckers_twig_twiglint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/twig/twiglint.vim	/^function! SyntaxCheckers_twig_twiglint_GetLocList() dict$/;"	f
SyntaxCheckers_typescript_tslint_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/typescript/tslint.vim	/^function! SyntaxCheckers_typescript_tslint_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_typescript_tslint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/typescript/tslint.vim	/^function! SyntaxCheckers_typescript_tslint_GetLocList() dict$/;"	f
SyntaxCheckers_verilog_iverilog_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/verilog/iverilog.vim	/^function! SyntaxCheckers_verilog_iverilog_GetLocList() dict$/;"	f
SyntaxCheckers_verilog_verilator_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/verilog/verilator.vim	/^function! SyntaxCheckers_verilog_verilator_GetLocList() dict$/;"	f
SyntaxCheckers_verilog_verilator_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/verilog/verilator.vim	/^function! SyntaxCheckers_verilog_verilator_IsAvailable() dict$/;"	f
SyntaxCheckers_vhdl_ghdl_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/vhdl/ghdl.vim	/^function! SyntaxCheckers_vhdl_ghdl_GetLocList() dict$/;"	f
SyntaxCheckers_vhdl_vcom_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/vhdl/vcom.vim	/^function! SyntaxCheckers_vhdl_vcom_GetLocList() dict$/;"	f
SyntaxCheckers_vim_vimlint_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/vim/vimlint.vim	/^function! SyntaxCheckers_vim_vimlint_GetHighlightRegex(item) " {{{1$/;"	f
SyntaxCheckers_vim_vimlint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/vim/vimlint.vim	/^function! SyntaxCheckers_vim_vimlint_GetLocList() dict " {{{1$/;"	f
SyntaxCheckers_vim_vimlint_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/vim/vimlint.vim	/^function! SyntaxCheckers_vim_vimlint_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_vim_vint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/vim/vint.vim	/^function! SyntaxCheckers_vim_vint_GetLocList() dict$/;"	f
SyntaxCheckers_vue_pug_lint_vue_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/vue/pug_lint_vue.vim	/^function! SyntaxCheckers_vue_pug_lint_vue_GetLocList() dict$/;"	f
SyntaxCheckers_xhtml_tidy_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/xhtml/tidy.vim	/^function! SyntaxCheckers_xhtml_tidy_GetLocList() dict " {{{1$/;"	f
SyntaxCheckers_xml_plutil_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/xml/plutil.vim	/^function! SyntaxCheckers_xml_plutil_GetLocList() dict$/;"	f
SyntaxCheckers_xml_xmllint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/xml/xmllint.vim	/^function! SyntaxCheckers_xml_xmllint_GetLocList() dict$/;"	f
SyntaxCheckers_xquery_basex_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/xquery/basex.vim	/^function! SyntaxCheckers_xquery_basex_GetLocList() dict$/;"	f
SyntaxCheckers_yacc_bison_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/yacc/bison.vim	/^function! SyntaxCheckers_yacc_bison_GetLocList() dict$/;"	f
SyntaxCheckers_yaml_jsyaml_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/yaml/jsyaml.vim	/^function! SyntaxCheckers_yaml_jsyaml_GetLocList() dict$/;"	f
SyntaxCheckers_yaml_yamllint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/yaml/yamllint.vim	/^function! SyntaxCheckers_yaml_yamllint_GetLocList() dict$/;"	f
SyntaxCheckers_yaml_yamlxs_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/yaml/yamlxs.vim	/^function! SyntaxCheckers_yaml_yamlxs_GetLocList() dict$/;"	f
SyntaxCheckers_yaml_yamlxs_IsAvailable	.vim/pack/ide/start/syntastic/syntax_checkers/yaml/yamlxs.vim	/^function! SyntaxCheckers_yaml_yamlxs_IsAvailable() dict$/;"	f
SyntaxCheckers_yang_pyang_GetHighlightRegex	.vim/pack/ide/start/syntastic/syntax_checkers/yang/pyang.vim	/^function! SyntaxCheckers_yang_pyang_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_yang_pyang_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/yang/pyang.vim	/^function! SyntaxCheckers_yang_pyang_GetLocList() dict$/;"	f
SyntaxCheckers_yara_yarac_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/yara/yara.vim	/^function! SyntaxCheckers_yara_yarac_GetLocList() dict$/;"	f
SyntaxCheckers_z80_z80syntaxchecker_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/z80/z80syntaxchecker.vim	/^function! SyntaxCheckers_z80_z80syntaxchecker_GetLocList() dict$/;"	f
SyntaxCheckers_zpt_zptlint_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/zpt/zptlint.vim	/^function! SyntaxCheckers_zpt_zptlint_GetLocList() dict$/;"	f
SyntaxCheckers_zsh_zsh_GetLocList	.vim/pack/ide/start/syntastic/syntax_checkers/zsh/zsh.vim	/^function! SyntaxCheckers_zsh_zsh_GetLocList() dict$/;"	f
Syntax_extensions	.vim/colors/lettuce.vim	/^augroup Syntax_extensions$/;"	a
TAGS_FILE	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^    set TAGS_FILE=%~2$/;"	v
TAGS_FILE	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^set TAGS_FILE=tags$/;"	v
TAR	.vim/pack/ide/start/yajs/Makefile	/^TAR=tar czvf$/;"	m
TBrowseOutput	.vim/pack/ide/start/tlib/plugin/02tlib.vim	/^command! -nargs=1 -complete=command TBrowseOutput call tlib#cmd#BrowseOutput(<q-args>)$/;"	c
TBrowseScriptnames	.vim/pack/ide/start/tlib/plugin/02tlib.vim	/^command! -nargs=0 TBrowseScriptnames call tlib#cmd#TBrowseScriptnames()$/;"	c
TComment	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^command! -bar -bang -range -nargs=* -complete=customlist,tcomment#complete#Args TComment$/;"	c
TCommentAs	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^command! -bar -bang -complete=customlist,tcomment#complete#Complete -range -nargs=+ TCommentAs $/;"	c
TCommentBlock	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^command! -bar -bang -range -nargs=* -complete=customlist,tcomment#complete#Args TCommentBlock$/;"	c
TCommentInline	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^command! -bar -bang -range -nargs=* -complete=customlist,tcomment#complete#Args TCommentInline$/;"	c
TCommentMaybeInline	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^command! -bar -bang -range -nargs=* -complete=customlist,tcomment#complete#Args TCommentMaybeInl/;"	c
TCommentRight	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^command! -bar -bang -range -nargs=* -complete=customlist,tcomment#complete#Args TCommentRight$/;"	c
TLet	.vim/pack/ide/start/tlib/plugin/02tlib.vim	/^command! -nargs=+ TLet if !exists(matchstr(<q-args>, '^[^=[:space:]]\\+')) | exec 'let '. <q-arg/;"	c
TLib	.vim/pack/ide/start/tlib/autoload/tlib/autocmdgroup.vim	/^augroup TLib$/;"	a
TLib	.vim/pack/ide/start/tlib/autoload/tlib/file.vim	/^augroup TLib$/;"	a
TLibFileRead	.vim/pack/ide/start/tlib/autoload/tlib/file.vim	/^    augroup TLibFileRead$/;"	a
TOVLWrite	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/scratch_buffer.vim	/^augroup TOVLWrite$/;"	a
TRequire	.vim/pack/ide/start/tlib/macros/tlib.vim	/^command! -nargs=+ TRequire let s:require = [<f-args>]$/;"	c
TScratch	.vim/pack/ide/start/tlib/plugin/02tlib.vim	/^command! -bar -nargs=* -bang TScratch call tlib#scratch#UseScratch({'scratch_split': empty('<ban/;"	c
TVarArg	.vim/pack/ide/start/tlib/plugin/02tlib.vim	/^command! -nargs=+ TVarArg exec tlib#arg#Let([<args>])$/;"	c
Table of Contents	.vim/pack/ide/opt/ctrlsf/README.md	/^## Table of Contents$/;"	s	chapter:ctrlsf.vim
Tabula	.vim/colors/tabula.vim	/^function! Tabula()$/;"	f
Tabula_1	.vim/colors/tabula.vim	/^function! Tabula_1()$/;"	f
Tabula_2	.vim/colors/tabula.vim	/^function! Tabula_2()$/;"	f
Tabula_3	.vim/colors/tabula.vim	/^function! Tabula_3()$/;"	f
Tabula_4	.vim/colors/tabula.vim	/^function! Tabula_4()$/;"	f
Tabula_5	.vim/colors/tabula.vim	/^function! Tabula_5()$/;"	f
Tabula_6	.vim/colors/tabula.vim	/^function! Tabula_6()$/;"	f
Tabula_7	.vim/colors/tabula.vim	/^function! Tabula_7()$/;"	f
Tabula_8	.vim/colors/tabula.vim	/^function! Tabula_8()$/;"	f
Tabula_9	.vim/colors/tabula.vim	/^function! Tabula_9()$/;"	f
Tagbar	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 Tagbar              call tagbar#ToggleWindow()$/;"	c
Tagbar: a class outline viewer for Vim	.vim/pack/ide/start/tagbar/README.md	/^# Tagbar: a class outline viewer for Vim$/;"	c
TagbarAutoCmds	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^    augroup TagbarAutoCmds$/;"	a
TagbarBalloonExpr	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! TagbarBalloonExpr() abort$/;"	f
TagbarCleanupAutoCmds	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^    augroup TagbarCleanupAutoCmds$/;"	a
TagbarClose	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarClose         call tagbar#CloseWindow()$/;"	c
TagbarCurrentTag	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarCurrentTag    echo tagbar#currenttag('%s', 'No current tag', <f-args>)$/;"	c
TagbarDebug	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarDebug         call tagbar#debug#start_debug(<f-args>)$/;"	c
TagbarDebugEnd	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarDebugEnd      call tagbar#debug#stop_debug()$/;"	c
TagbarForceUpdate	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarForceUpdate   call tagbar#ForceUpdate()$/;"	c
TagbarGetTypeConfig	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^command! -nargs=1 TagbarGetTypeConfig call tagbar#gettypeconfig(<f-args>)$/;"	c
TagbarJump	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarJump   call tagbar#jump()$/;"	c
TagbarJumpNext	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarJumpNext      call tagbar#jumpToNearbyTag(1)$/;"	c
TagbarJumpPrev	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarJumpPrev      call tagbar#jumpToNearbyTag(-1)$/;"	c
TagbarOpen	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarOpen          call tagbar#OpenWindow(<f-args>)$/;"	c
TagbarOpenAutoClose	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarOpenAutoClose call tagbar#OpenWindow('fcj')$/;"	c
TagbarSession	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^augroup TagbarSession$/;"	a
TagbarSetFoldlevel	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^command! -nargs=1 -bang TagbarSetFoldlevel  call tagbar#SetFoldLevel(<args>, <bang>0)$/;"	c
TagbarShowTag	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarShowTag       call tagbar#highlighttag(1, 1)$/;"	c
TagbarToggle	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarToggle        call tagbar#ToggleWindow()$/;"	c
TagbarTogglePause	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarTogglePause   call tagbar#toggle_pause()$/;"	c
Tbrowseloc	.vim/pack/ide/start/tlib/plugin/02tlib.vim	/^command! -bar Tbrowseloc call tlib#loclist#Browse()$/;"	c
Tbrowseqfl	.vim/pack/ide/start/tlib/plugin/02tlib.vim	/^command! -bar Tbrowseqfl call tlib#qfl#Browse()$/;"	c
Test cases for seoul256.vim	.vim/pack/ide/opt/seoul256/test/README.md	/^Test cases for seoul256.vim$/;"	c
TestArgs	.vim/pack/ide/start/tlib/spec/tlib/arg.vim	/^function! TestArgs(...) "{{{3$/;"	f
TestArgs	.vim/pack/ide/start/tlib/test/tlib.vim	/^function! TestArgs(...) "{{{3$/;"	f
TestArgs1	.vim/pack/ide/start/tlib/spec/tlib/arg.vim	/^function! TestArgs1(...) "{{{3$/;"	f
TestArgs1	.vim/pack/ide/start/tlib/test/tlib.vim	/^function! TestArgs1(...) "{{{3$/;"	f
TestArgs2	.vim/pack/ide/start/tlib/spec/tlib/arg.vim	/^function! TestArgs2(...) "{{{3$/;"	f
TestArgs2	.vim/pack/ide/start/tlib/test/tlib.vim	/^function! TestArgs2(...) "{{{3$/;"	f
TestArgs3	.vim/pack/ide/start/tlib/spec/tlib/arg.vim	/^function! TestArgs3(...)$/;"	f
TestArgs3	.vim/pack/ide/start/tlib/test/tlib.vim	/^function! TestArgs3(...)$/;"	f
TestGetArg	.vim/pack/ide/start/tlib/spec/tlib/arg.vim	/^function! TestGetArg(...) "{{{3$/;"	f
TestGetArg	.vim/pack/ide/start/tlib/test/tlib.vim	/^function! TestGetArg(...) "{{{3$/;"	f
TestGetArg1	.vim/pack/ide/start/tlib/spec/tlib/arg.vim	/^function! TestGetArg1(...) "{{{3$/;"	f
TestGetArg1	.vim/pack/ide/start/tlib/test/tlib.vim	/^function! TestGetArg1(...) "{{{3$/;"	f
Testing	.vim/pack/ide/start/gutentags/CONTRIBUTING.md	/^## Testing$/;"	s	chapter:Contributing
Texecloc	.vim/pack/ide/start/tlib/plugin/02tlib.vim	/^command! -nargs=1 Texecloc <args> | call tlib#qfl#QflList(getloclist(0))$/;"	c
Texecqfl	.vim/pack/ide/start/tlib/plugin/02tlib.vim	/^command! -nargs=1 Texecqfl <args> | call tlib#qfl#QflList(getqflist())$/;"	c
The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)	.vim/pack/ide/start/nerdtree/README.markdown	/^# The NERDTree [![Vint](https:\/\/github.com\/preservim\/nerdtree\/workflows\/Vint\/badge.svg)](/;"	c
Themes	.vim/pack/ide/start/airline/CONTRIBUTING.md	/^# Themes$/;"	c
Themes	.vim/pack/ide/start/airline/README.md	/^## Themes$/;"	s	chapter:Features
Things about your system and environment（请在此填写你的系统信息）	.vim/pack/ide/opt/ctrlsf/.github/ISSUE_TEMPLATE.md	/^#### Things about your system and environment（请在此填写你的系统信息）$/;"	t	section:Issue template
Tips	.vim/pack/ide/opt/ctrlsf/README.md	/^## Tips$/;"	s	chapter:ctrlsf.vim
Tlibassert	.vim/pack/ide/start/tlib/autoload/tlib/assert.vim	/^    command! -nargs=+ -bang Tlibassert :$/;"	c
Tlibassert	.vim/pack/ide/start/tlib/autoload/tlib/assert.vim	/^    command! -nargs=+ -bang Tlibassert call tlib#assert#Assert(expand('<sfile>'), <q-args>, [<ar/;"	c
Tlibassert	.vim/pack/ide/start/tlib/plugin/02tlib.vim	/^command! -nargs=+ -bang Tlibassert :$/;"	c
Tlibtrace	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	.vim/pack/ide/start/tcomment/autoload/tcomment/commentdef.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	.vim/pack/ide/start/tcomment/autoload/tcomment/commentmode.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	.vim/pack/ide/start/tcomment/autoload/tcomment/cursor.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	.vim/pack/ide/start/tcomment/autoload/tcomment/operator.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	.vim/pack/ide/start/tcomment/autoload/tcomment/regex.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	.vim/pack/ide/start/tcomment/autoload/tcomment/syntax.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	.vim/pack/ide/start/tcomment/autoload/tcomment/textobject.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	.vim/pack/ide/start/tcomment/autoload/tcomment/type.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	.vim/pack/ide/start/tcomment/autoload/tcomment/vimoptions.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	.vim/pack/ide/start/tlib/autoload/tlib/trace.vim	/^        command! -nargs=+ -bang Tlibtrace call tlib#trace#Print(expand('<sfile>'), [<f-args>], [/;"	c
Tlibtrace	.vim/pack/ide/start/tlib/autoload/tlib/trace.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	.vim/pack/ide/start/tlib/plugin/02tlib.vim	/^command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtraceset	.vim/pack/ide/start/tlib/plugin/02tlib.vim	/^command! -nargs=+ -bang Tlibtraceset call tlib#trace#Set(tlib#arg#GetOpts([<f-args>], {'short': /;"	c
Tlibtype	.vim/pack/ide/start/tlib/autoload/tlib/type.vim	/^    command! -nargs=+ Tlibtype :$/;"	c
Tlibtype	.vim/pack/ide/start/tlib/autoload/tlib/type.vim	/^    command! -nargs=+ Tlibtype call tlib#type#Check(expand('<sfile>'), [<f-args>], [<args>])$/;"	c
Tlibtype	.vim/pack/ide/start/tlib/plugin/02tlib.vim	/^command! -nargs=+ Tlibtype :$/;"	c
ToggleAlignment	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^    command! -buffer -nargs=0 ToggleAlignment call b:filtered_view.ToggleAlignment()$/;"	c
ToggleBG	.vim/pack/ide/start/colors-solarized/autoload/togglebg.vim	/^    command ToggleBG :call s:TogBG()$/;"	c
ToggleBackground	.vim/pack/ide/start/colors-solarized/autoload/togglebg.vim	/^function! ToggleBackground()$/;"	f
Ttimecommand	.vim/pack/ide/start/tlib/macros/tlib.vim	/^command! -nargs=1 -complete=command Ttimecommand call tlib#cmd#Time(<q-args>)$/;"	c
UPDATED_SOURCE	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^    set UPDATED_SOURCE=%~2$/;"	v
UPDATED_SOURCE	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^set UPDATED_SOURCE=$/;"	v
Under the hood	README.md	/^## Under the hood$/;"	s	chapter:VIm IDE
UndoKill	.vim/plugin/bufkill.vim	/^function! <SID>UndoKill() "{{{1$/;"	f
Unix	.vim/pack/ide/start/nerdcommenter/README.md	/^#### Unix$/;"	t	subsection:NERD Commenter""Installation""Manual Installation
Unlock	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^:Unlock$/;"	l
UpdateLastColumn	.vim/plugin/bufkill.vim	/^function! <SID>UpdateLastColumn(event) "{{{1$/;"	f
UpdateList	.vim/plugin/bufkill.vim	/^function! <SID>UpdateList(event) "{{{1$/;"	f
Usage	.vim/pack/ide/opt/goyo/README.md	/^Usage$/;"	s	chapter:goyo.vim ([고요](http://en.wiktionary.org/wiki/고요하다))
Usage	.vim/pack/ide/start/elixir/README.md	/^### Usage$/;"	S	chapter:Elixir for VIM
Usage	.vim/pack/ide/start/gutentags/plat/win32/update_scopedb.cmd	/^:Usage$/;"	l
Usage	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^:Usage$/;"	l
Usage	.vim/pack/ide/start/nerdcommenter/README.md	/^## Usage$/;"	s	chapter:NERD Commenter
Use	README.md	/^## Use$/;"	s	chapter:VIm IDE
Use Your Own Map	.vim/pack/ide/opt/ctrlsf/README.md	/^## Use Your Own Map$/;"	s	chapter:ctrlsf.vim
Using [Pathogen](https://github.com/tpope/vim-pathogen)	.vim/pack/ide/start/vim-glsl/README.md	/^#### Using [Pathogen](https:\/\/github.com\/tpope\/vim-pathogen)$/;"	t	section:vim-glsl""Installation
Using [VimPlug](https://https://github.com/junegunn/vim-plug)	.vim/pack/ide/start/vim-glsl/README.md	/^#### Using [VimPlug](https:\/\/https:\/\/github.com\/junegunn\/vim-plug)$/;"	t	section:vim-glsl""Installation
Using [Vundle](https://github.com/gmarik/vundle)	.vim/pack/ide/start/vim-glsl/README.md	/^#### Using [Vundle](https:\/\/github.com\/gmarik\/vundle)$/;"	t	section:vim-glsl""Installation
Util1	.vim/pack/ide/start/airline/t/util.vim	/^function! Util1()$/;"	f
Util2	.vim/pack/ide/start/airline/t/util.vim	/^function! Util2()$/;"	f
Util3	.vim/pack/ide/start/airline/t/util.vim	/^function! Util3(...)$/;"	f
VERSION	.vim/pack/ide/start/yajs/Makefile	/^VERSION=0.1$/;"	m
VERSION	.vim/pack/ide/start/yajs/config.mk	/^VERSION=2.0.1$/;"	m
VIMRUNTIME	.vim/pack/ide/start/yajs/Makefile	/^VIMRUNTIME=~\/.vim$/;"	m
VIm IDE	README.md	/^# VIm IDE$/;"	c
Version 0.8	.vim/pack/ide/start/yajs/CHANGES.markdown	/^### Version 0.8$/;"	S	chapter:CHANGE LOG
Version 0.9	.vim/pack/ide/start/yajs/CHANGES.markdown	/^### Version 0.9$/;"	S	chapter:CHANGE LOG
Version 1.0	.vim/pack/ide/start/yajs/CHANGES.markdown	/^### Version 1.0$/;"	S	chapter:CHANGE LOG
Version 1.1	.vim/pack/ide/start/yajs/CHANGES.markdown	/^### Version 1.1$/;"	S	chapter:CHANGE LOG
Version 1.1.1	.vim/pack/ide/start/yajs/CHANGES.markdown	/^### Version 1.1.1$/;"	S	chapter:CHANGE LOG
Version 1.2	.vim/pack/ide/start/yajs/CHANGES.markdown	/^### Version 1.2$/;"	S	chapter:CHANGE LOG
Version 1.3	.vim/pack/ide/start/yajs/CHANGES.markdown	/^### Version 1.3$/;"	S	chapter:CHANGE LOG
Version 1.4	.vim/pack/ide/start/yajs/CHANGES.markdown	/^### Version 1.4$/;"	S	chapter:CHANGE LOG
Version 1.5	.vim/pack/ide/start/yajs/CHANGES.markdown	/^### Version 1.5$/;"	S	chapter:CHANGE LOG
Version 1.6	.vim/pack/ide/start/yajs/README.md	/^### Version 1.6$/;"	S	section:YAJS: Yet Another JavaScript Syntax""Changes
Version 2.0	.vim/pack/ide/start/yajs/README.md	/^### Version 2.0$/;"	S	section:YAJS: Yet Another JavaScript Syntax""Changes
Version 2.0.1	.vim/pack/ide/start/yajs/README.md	/^### Version 2.0.1$/;"	S	section:YAJS: Yet Another JavaScript Syntax""Changes
Version 2.1	.vim/pack/ide/start/yajs/README.md	/^### Version 2.1$/;"	S	section:YAJS: Yet Another JavaScript Syntax""Changes
Via Plugin Manager (Recommended)	.vim/pack/ide/start/nerdcommenter/README.md	/^### Via Plugin Manager (Recommended)$/;"	S	section:NERD Commenter""Installation
WGET_OPT	.vim/pack/ide/start/yajs/Makefile	/^WGET_OPT=-c -nv$/;"	m
What Tagbar is	.vim/pack/ide/start/tagbar/README.md	/^## What Tagbar is$/;"	s	chapter:Tagbar: a class outline viewer for Vim
What Tagbar is not	.vim/pack/ide/start/tagbar/README.md	/^## What Tagbar is not$/;"	s	chapter:Tagbar: a class outline viewer for Vim
What is it?	README.md	/^## What is it?$/;"	s	chapter:VIm IDE
What?	.vim/pack/ide/start/gutentags/README.md	/^## What?$/;"	s	chapter:Gutentags
Where and why backward compatibility is given up?	.vim/pack/ide/opt/ctrlsf/README.md	/^### Where and why backward compatibility is given up?$/;"	S	section:ctrlsf.vim""For user comes from pre v1.0
Where did the name come from?	.vim/pack/ide/start/airline/README.md	/^# Where did the name come from?$/;"	c
Why?	.vim/pack/ide/start/gutentags/README.md	/^## Why?$/;"	s	chapter:Gutentags
Windows (PowerShell)	.vim/pack/ide/start/nerdcommenter/README.md	/^#### Windows (PowerShell)$/;"	t	subsection:NERD Commenter""Installation""Manual Installation
WriteBookmarks	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 WriteBookmarks call g:NERDTreeBookmark.Write()$/;"	c
Writing	.vim/pack/ide/start/gutentags/CONTRIBUTING.md	/^## Writing$/;"	s	chapter:Contributing
X	.vim/colors/desert256.vim	/^    fun <SID>X(group, fg, bg, attr)$/;"	f
X	.vim/colors/inkpot.vim	/^fun! <SID>X(a)$/;"	f
X	.vim/colors/summerfruit256.vim	/^    fun <SID>X(group, fg, bg, attr)$/;"	f
X	.vim/colors/wombat256.vim	/^fun <SID>X(group, fg, bg, attr)$/;"	f
XTabReopen	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^    com! XTabReopen call airline#extensions#tabline#xtabline#reopen_last_tab()$/;"	c
YAJS: Yet Another JavaScript Syntax	.vim/pack/ide/start/yajs/README.md	/^YAJS: Yet Another JavaScript Syntax$/;"	c
[0.10] - 2018-12-15	.vim/pack/ide/start/airline/CHANGELOG.md	/^## [0.10] - 2018-12-15$/;"	s	chapter:Change Log
[0.11] - 2019-11-10	.vim/pack/ide/start/airline/CHANGELOG.md	/^## [0.11] - 2019-11-10$/;"	s	chapter:Change Log
[0.12] - Unreleased	.vim/pack/ide/start/airline/CHANGELOG.md	/^## [0.12] - Unreleased$/;"	s	chapter:Change Log
[0.1] - 2013-07-17	.vim/pack/ide/start/airline/CHANGELOG.md	/^## [0.1] - 2013-07-17$/;"	s	chapter:Change Log
[0.2] - 2013-07-28	.vim/pack/ide/start/airline/CHANGELOG.md	/^## [0.2] - 2013-07-28$/;"	s	chapter:Change Log
[0.3] - 2013-08-12	.vim/pack/ide/start/airline/CHANGELOG.md	/^## [0.3] - 2013-08-12$/;"	s	chapter:Change Log
[0.4] - 2013-08-26	.vim/pack/ide/start/airline/CHANGELOG.md	/^## [0.4] - 2013-08-26$/;"	s	chapter:Change Log
[0.5] - 2013-09-13	.vim/pack/ide/start/airline/CHANGELOG.md	/^## [0.5] - 2013-09-13$/;"	s	chapter:Change Log
[0.6] - 2013-10-08	.vim/pack/ide/start/airline/CHANGELOG.md	/^## [0.6] - 2013-10-08$/;"	s	chapter:Change Log
[0.7] - 2014-12-10	.vim/pack/ide/start/airline/CHANGELOG.md	/^## [0.7] - 2014-12-10$/;"	s	chapter:Change Log
[0.8] - 2016-03-09	.vim/pack/ide/start/airline/CHANGELOG.md	/^## [0.8] - 2016-03-09$/;"	s	chapter:Change Log
[0.9] - 2018-01-15	.vim/pack/ide/start/airline/CHANGELOG.md	/^## [0.9] - 2018-01-15$/;"	s	chapter:Change Log
[C	.vim/pack/ide/start/signify/plugin/signify.vim	/^    nmap [C 9999[c$/;"	m
[LanguageClient][57]	.vim/pack/ide/start/airline/README.md	/^#### [LanguageClient][57]$/;"	t	section:Features""Seamless integration
[NeoBundle](https://github.com/Shougo/neobundle.vim)	.vim/pack/ide/start/nerdcommenter/README.md	/^#### [NeoBundle](https:\/\/github.com\/Shougo\/neobundle.vim)$/;"	t	subsection:NERD Commenter""Installation""Via Plugin Manager (Recommended)
[Pathogen](https://github.com/tpope/vim-pathogen)	.vim/pack/ide/start/nerdcommenter/README.md	/^#### [Pathogen](https:\/\/github.com\/tpope\/vim-pathogen)$/;"	t	subsection:NERD Commenter""Installation""Via Plugin Manager (Recommended)
[Vim-CMake][60]	.vim/pack/ide/start/airline/README.md	/^#### [Vim-CMake][60]$/;"	t	section:Features""Seamless integration
[Vim-Plug](https://github.com/junegunn/vim-plug)	.vim/pack/ide/start/nerdcommenter/README.md	/^#### [Vim-Plug](https:\/\/github.com\/junegunn\/vim-plug)$/;"	t	subsection:NERD Commenter""Installation""Via Plugin Manager (Recommended)
[Vundle](https://github.com/VundleVim/Vundle.vim) or similar	.vim/pack/ide/start/nerdcommenter/README.md	/^#### [Vundle](https:\/\/github.com\/VundleVim\/Vundle.vim) or similar$/;"	t	subsection:NERD Commenter""Installation""Via Plugin Manager (Recommended)
[c	.vim/pack/ide/start/signify/plugin/signify.vim	/^  nmap [c <plug>(signify-prev-hunk)$/;"	m
[csv.vim][28]	.vim/pack/ide/start/airline/README.md	/^#### [csv.vim][28]$/;"	t	section:Features""Seamless integration
[ctrlp.vim][10]	.vim/pack/ide/start/airline/README.md	/^#### [ctrlp.vim][10]$/;"	t	section:Features""Seamless integration
[ctrlspace][38]	.vim/pack/ide/start/airline/README.md	/^#### [ctrlspace][38]$/;"	t	section:Features""Seamless integration
[denite.nvim][51]	.vim/pack/ide/start/airline/README.md	/^#### [denite.nvim][51]$/;"	t	section:Features""Seamless integration
[localsearch][54]	.vim/pack/ide/start/airline/README.md	/^#### [localsearch][54]$/;"	t	section:Features""Seamless integration
[promptline][36]	.vim/pack/ide/start/airline/README.md	/^#### [promptline][36]$/;"	t	section:Features""Seamless integration
[syntastic][5]	.vim/pack/ide/start/airline/README.md	/^#### [syntastic][5]$/;"	t	section:Features""Seamless integration
[tagbar][19]	.vim/pack/ide/start/airline/README.md	/^#### [tagbar][19]$/;"	t	section:Features""Seamless integration
[tmuxline][35]	.vim/pack/ide/start/airline/README.md	/^#### [tmuxline][35]$/;"	t	section:Features""Seamless integration
[unite.vim][9]	.vim/pack/ide/start/airline/README.md	/^#### [unite.vim][9]$/;"	t	section:Features""Seamless integration
[vim.battery][61]	.vim/pack/ide/start/airline/README.md	/^#### [vim.battery][61]$/;"	t	section:Features""Seamless integration
[vimagit][50]	.vim/pack/ide/start/airline/README.md	/^#### [vimagit][50]$/;"	t	section:Features""Seamless integration
[vimtex][53]	.vim/pack/ide/start/airline/README.md	/^#### [vimtex][53]$/;"	t	section:Features""Seamless integration
[virtualenv][31]	.vim/pack/ide/start/airline/README.md	/^#### [virtualenv][31]$/;"	t	section:Features""Seamless integration
[xkb-switch][48]/[xkb-layout][49]	.vim/pack/ide/start/airline/README.md	/^#### [xkb-switch][48]\/[xkb-layout][49]$/;"	t	section:Features""Seamless integration
]C	.vim/pack/ide/start/signify/plugin/signify.vim	/^    nmap ]C 9999]c$/;"	m
]c	.vim/pack/ide/start/signify/plugin/signify.vim	/^  nmap ]c <plug>(signify-next-hunk)$/;"	m
_fzf_statusline	.vim/pack/ide/start/airline/autoload/airline/extensions/fzf.vim	/^  augroup _fzf_statusline$/;"	a
`default`	.vim/pack/ide/start/airline/README.md	/^#### `default`$/;"	t	section:Features""Smarter tab line
`jsformatter`	.vim/pack/ide/start/airline/README.md	/^#### `jsformatter`$/;"	t	section:Features""Smarter tab line
`unique_tail_improved`	.vim/pack/ide/start/airline/README.md	/^#### `unique_tail_improved`$/;"	t	section:Features""Smarter tab line
`unique_tail`	.vim/pack/ide/start/airline/README.md	/^#### `unique_tail`$/;"	t	section:Features""Smarter tab line
actual behavior	.vim/pack/ide/start/airline/.github/ISSUE_TEMPLATE.md	/^#### actual behavior$/;"	t
airline	.vim/pack/ide/start/airline/autoload/airline/extensions/cursormode.vim	/^augroup airline#extensions#cursormode$/;"	a
airline	.vim/pack/ide/start/airline/plugin/airline.vim	/^    augroup airline$/;"	a
airline#add_inactive_statusline_func	.vim/pack/ide/start/airline/autoload/airline.vim	/^function! airline#add_inactive_statusline_func(name, ...)$/;"	f
airline#add_inactive_statusline_funcref	.vim/pack/ide/start/airline/autoload/airline.vim	/^function! airline#add_inactive_statusline_funcref(function, ...)$/;"	f
airline#add_statusline_func	.vim/pack/ide/start/airline/autoload/airline.vim	/^function! airline#add_statusline_func(name, ...)$/;"	f
airline#add_statusline_funcref	.vim/pack/ide/start/airline/autoload/airline.vim	/^function! airline#add_statusline_funcref(function, ...)$/;"	f
airline#async#get_mq_async	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^  function! airline#async#get_mq_async(cmd, file)$/;"	f
airline#async#get_msgfmt_stat	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^  function! airline#async#get_msgfmt_stat(cmd, file)$/;"	f
airline#async#mq_output	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^function! airline#async#mq_output(buf, file)$/;"	f
airline#async#nvim_get_mq_async	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^  function! airline#async#nvim_get_mq_async(cmd, file)$/;"	f
airline#async#nvim_get_msgfmt_stat	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^  function! airline#async#nvim_get_msgfmt_stat(cmd, file)$/;"	f
airline#async#nvim_vcs_clean	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^  function! airline#async#nvim_vcs_clean(cmd, file, vcs)$/;"	f
airline#async#nvim_vcs_untracked	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^function! airline#async#nvim_vcs_untracked(cfg, file, vcs)$/;"	f
airline#async#vcs_clean	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^function! airline#async#vcs_clean(cmd, file, vcs)$/;"	f
airline#async#vcs_untracked	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^function! airline#async#vcs_untracked(config, file, vcs)$/;"	f
airline#async#vim7_vcs_clean	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^function! airline#async#vim7_vcs_clean(cmd, file, vcs)$/;"	f
airline#async#vim_vcs_clean	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^  function! airline#async#vim_vcs_clean(cmd, file, vcs)$/;"	f
airline#async#vim_vcs_untracked	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^  function! airline#async#vim_vcs_untracked(config, file)$/;"	f
airline#builder#get_next_group	.vim/pack/ide/start/airline/autoload/airline/builder.vim	/^function! airline#builder#get_next_group(sections, i)$/;"	f
airline#builder#get_prev_group	.vim/pack/ide/start/airline/autoload/airline/builder.vim	/^function! airline#builder#get_prev_group(sections, i)$/;"	f
airline#builder#new	.vim/pack/ide/start/airline/autoload/airline/builder.vim	/^function! airline#builder#new(context)$/;"	f
airline#builder#should_change_group	.vim/pack/ide/start/airline/autoload/airline/builder.vim	/^function! airline#builder#should_change_group(group1, group2)$/;"	f
airline#check_mode	.vim/pack/ide/start/airline/autoload/airline.vim	/^function! airline#check_mode(winnr)$/;"	f
airline#cmdwinenter	.vim/pack/ide/start/airline/plugin/airline.vim	/^function! airline#cmdwinenter(...)$/;"	f
airline#debug#profile1	.vim/pack/ide/start/airline/autoload/airline/debug.vim	/^function! airline#debug#profile1()$/;"	f
airline#debug#profile2	.vim/pack/ide/start/airline/autoload/airline/debug.vim	/^function! airline#debug#profile2()$/;"	f
airline#debug#profile3	.vim/pack/ide/start/airline/autoload/airline/debug.vim	/^function! airline#debug#profile3()$/;"	f
airline#extensions#ale#get	.vim/pack/ide/start/airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#get(type)$/;"	f
airline#extensions#ale#get_error	.vim/pack/ide/start/airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#get_error()$/;"	f
airline#extensions#ale#get_warning	.vim/pack/ide/start/airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#get_warning()$/;"	f
airline#extensions#ale#init	.vim/pack/ide/start/airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#init(ext)$/;"	f
airline#extensions#append_to_section	.vim/pack/ide/start/airline/autoload/airline/extensions.vim	/^function! airline#extensions#append_to_section(name, value)$/;"	f
airline#extensions#apply	.vim/pack/ide/start/airline/autoload/airline/extensions.vim	/^function! airline#extensions#apply(...)$/;"	f
airline#extensions#apply_left_override	.vim/pack/ide/start/airline/autoload/airline/extensions.vim	/^function! airline#extensions#apply_left_override(section1, section2)$/;"	f
airline#extensions#battery#init	.vim/pack/ide/start/airline/autoload/airline/extensions/battery.vim	/^function! airline#extensions#battery#init(ext) abort$/;"	f
airline#extensions#battery#status	.vim/pack/ide/start/airline/autoload/airline/extensions/battery.vim	/^function! airline#extensions#battery#status(...) abort$/;"	f
airline#extensions#bookmark#currentbookmark	.vim/pack/ide/start/airline/autoload/airline/extensions/bookmark.vim	/^function! airline#extensions#bookmark#currentbookmark() abort$/;"	f
airline#extensions#bookmark#init	.vim/pack/ide/start/airline/autoload/airline/extensions/bookmark.vim	/^function! airline#extensions#bookmark#init(ext) abort$/;"	f
airline#extensions#branch#get_head	.vim/pack/ide/start/airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#get_head()$/;"	f
airline#extensions#branch#head	.vim/pack/ide/start/airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#head()$/;"	f
airline#extensions#branch#init	.vim/pack/ide/start/airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#init(ext)$/;"	f
airline#extensions#branch#update_untracked_config	.vim/pack/ide/start/airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#update_untracked_config(file, vcs)$/;"	f
airline#extensions#bufferline#init	.vim/pack/ide/start/airline/autoload/airline/extensions/bufferline.vim	/^function! airline#extensions#bufferline#init(ext)$/;"	f
airline#extensions#capslock#init	.vim/pack/ide/start/airline/autoload/airline/extensions/capslock.vim	/^function! airline#extensions#capslock#init(ext)$/;"	f
airline#extensions#capslock#status	.vim/pack/ide/start/airline/autoload/airline/extensions/capslock.vim	/^function! airline#extensions#capslock#status()$/;"	f
airline#extensions#coc#get	.vim/pack/ide/start/airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get(type) abort$/;"	f
airline#extensions#coc#get_current_function	.vim/pack/ide/start/airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get_current_function() abort$/;"	f
airline#extensions#coc#get_error	.vim/pack/ide/start/airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get_error() abort$/;"	f
airline#extensions#coc#get_status	.vim/pack/ide/start/airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get_status() abort$/;"	f
airline#extensions#coc#get_warning	.vim/pack/ide/start/airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get_warning() abort$/;"	f
airline#extensions#coc#init	.vim/pack/ide/start/airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#init(ext) abort$/;"	f
airline#extensions#commandt#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/commandt.vim	/^function! airline#extensions#commandt#apply(...)$/;"	f
airline#extensions#commandt#init	.vim/pack/ide/start/airline/autoload/airline/extensions/commandt.vim	/^function! airline#extensions#commandt#init(ext)$/;"	f
airline#extensions#csv#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/csv.vim	/^function! airline#extensions#csv#apply(...)$/;"	f
airline#extensions#csv#get_column	.vim/pack/ide/start/airline/autoload/airline/extensions/csv.vim	/^function! airline#extensions#csv#get_column()$/;"	f
airline#extensions#csv#init	.vim/pack/ide/start/airline/autoload/airline/extensions/csv.vim	/^function! airline#extensions#csv#init(ext)$/;"	f
airline#extensions#ctrlp#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#apply(...)$/;"	f
airline#extensions#ctrlp#ctrlp_airline	.vim/pack/ide/start/airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#ctrlp_airline(...)$/;"	f
airline#extensions#ctrlp#ctrlp_airline_status	.vim/pack/ide/start/airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#ctrlp_airline_status(...)$/;"	f
airline#extensions#ctrlp#generate_color_map	.vim/pack/ide/start/airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#generate_color_map(dark, light, white)$/;"	f
airline#extensions#ctrlp#init	.vim/pack/ide/start/airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#init(ext)$/;"	f
airline#extensions#ctrlp#load_theme	.vim/pack/ide/start/airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#load_theme(palette)$/;"	f
airline#extensions#ctrlspace#init	.vim/pack/ide/start/airline/autoload/airline/extensions/ctrlspace.vim	/^function! airline#extensions#ctrlspace#init(ext) abort$/;"	f
airline#extensions#ctrlspace#statusline	.vim/pack/ide/start/airline/autoload/airline/extensions/ctrlspace.vim	/^function! airline#extensions#ctrlspace#statusline(...) abort$/;"	f
airline#extensions#cursormode#activate	.vim/pack/ide/start/airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#activate()$/;"	f
airline#extensions#cursormode#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#apply(...)$/;"	f
airline#extensions#cursormode#init	.vim/pack/ide/start/airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#init(ext)$/;"	f
airline#extensions#cursormode#set	.vim/pack/ide/start/airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#set(...)$/;"	f
airline#extensions#cursormode#tmux_escape	.vim/pack/ide/start/airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#tmux_escape(escape)$/;"	f
airline#extensions#default#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/default.vim	/^function! airline#extensions#default#apply(builder, context) abort$/;"	f
airline#extensions#denite#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/denite.vim	/^function! airline#extensions#denite#apply(...) abort$/;"	f
airline#extensions#denite#check_denite_mode	.vim/pack/ide/start/airline/autoload/airline/extensions/denite.vim	/^function! airline#extensions#denite#check_denite_mode(bufnr) abort$/;"	f
airline#extensions#denite#init	.vim/pack/ide/start/airline/autoload/airline/extensions/denite.vim	/^function! airline#extensions#denite#init(ext) abort$/;"	f
airline#extensions#dirvish#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/dirvish.vim	/^function! airline#extensions#dirvish#apply(...) abort$/;"	f
airline#extensions#dirvish#init	.vim/pack/ide/start/airline/autoload/airline/extensions/dirvish.vim	/^function! airline#extensions#dirvish#init(ext) abort$/;"	f
airline#extensions#eclim#creat_line	.vim/pack/ide/start/airline/autoload/airline/extensions/eclim.vim	/^function! airline#extensions#eclim#creat_line(...)$/;"	f
airline#extensions#eclim#get_warnings	.vim/pack/ide/start/airline/autoload/airline/extensions/eclim.vim	/^function! airline#extensions#eclim#get_warnings()$/;"	f
airline#extensions#eclim#init	.vim/pack/ide/start/airline/autoload/airline/extensions/eclim.vim	/^function! airline#extensions#eclim#init(ext)$/;"	f
airline#extensions#example#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/example.vim	/^function! airline#extensions#example#apply(...)$/;"	f
airline#extensions#example#get_cats	.vim/pack/ide/start/airline/autoload/airline/extensions/example.vim	/^function! airline#extensions#example#get_cats()$/;"	f
airline#extensions#example#init	.vim/pack/ide/start/airline/autoload/airline/extensions/example.vim	/^function! airline#extensions#example#init(ext)$/;"	f
airline#extensions#fern#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/fern.vim	/^function! airline#extensions#fern#apply(...) abort$/;"	f
airline#extensions#fern#init	.vim/pack/ide/start/airline/autoload/airline/extensions/fern.vim	/^function! airline#extensions#fern#init(ext) abort$/;"	f
airline#extensions#fugitiveline#bufname	.vim/pack/ide/start/airline/autoload/airline/extensions/fugitiveline.vim	/^function! airline#extensions#fugitiveline#bufname() abort$/;"	f
airline#extensions#fugitiveline#init	.vim/pack/ide/start/airline/autoload/airline/extensions/fugitiveline.vim	/^function! airline#extensions#fugitiveline#init(ext) abort$/;"	f
airline#extensions#fzf#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/fzf.vim	/^function! airline#extensions#fzf#apply(...) abort$/;"	f
airline#extensions#fzf#inactive_apply	.vim/pack/ide/start/airline/autoload/airline/extensions/fzf.vim	/^function! airline#extensions#fzf#inactive_apply(...) abort$/;"	f
airline#extensions#fzf#init	.vim/pack/ide/start/airline/autoload/airline/extensions/fzf.vim	/^function! airline#extensions#fzf#init(ext) abort$/;"	f
airline#extensions#fzf#statusline	.vim/pack/ide/start/airline/autoload/airline/extensions/fzf.vim	/^function! airline#extensions#fzf#statusline(...) abort$/;"	f
airline#extensions#gen_tags#init	.vim/pack/ide/start/airline/autoload/airline/extensions/gen_tags.vim	/^function! airline#extensions#gen_tags#init(ext) abort$/;"	f
airline#extensions#gen_tags#status	.vim/pack/ide/start/airline/autoload/airline/extensions/gen_tags.vim	/^function! airline#extensions#gen_tags#status(...) abort$/;"	f
airline#extensions#get_loaded_extensions	.vim/pack/ide/start/airline/autoload/airline/extensions.vim	/^function! airline#extensions#get_loaded_extensions()$/;"	f
airline#extensions#gina#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/gina.vim	/^function! airline#extensions#gina#apply(...) abort$/;"	f
airline#extensions#gina#init	.vim/pack/ide/start/airline/autoload/airline/extensions/gina.vim	/^function! airline#extensions#gina#init(ext) abort$/;"	f
airline#extensions#grepper#init	.vim/pack/ide/start/airline/autoload/airline/extensions/grepper.vim	/^function! airline#extensions#grepper#init(ext)$/;"	f
airline#extensions#grepper#status	.vim/pack/ide/start/airline/autoload/airline/extensions/grepper.vim	/^function! airline#extensions#grepper#status()$/;"	f
airline#extensions#gutentags#init	.vim/pack/ide/start/airline/autoload/airline/extensions/gutentags.vim	/^function! airline#extensions#gutentags#init(ext)$/;"	f
airline#extensions#gutentags#status	.vim/pack/ide/start/airline/autoload/airline/extensions/gutentags.vim	/^function! airline#extensions#gutentags#status()$/;"	f
airline#extensions#hunks#get_hunks	.vim/pack/ide/start/airline/autoload/airline/extensions/hunks.vim	/^function! airline#extensions#hunks#get_hunks() abort$/;"	f
airline#extensions#hunks#get_raw_hunks	.vim/pack/ide/start/airline/autoload/airline/extensions/hunks.vim	/^function! airline#extensions#hunks#get_raw_hunks() abort$/;"	f
airline#extensions#hunks#init	.vim/pack/ide/start/airline/autoload/airline/extensions/hunks.vim	/^function! airline#extensions#hunks#init(ext) abort$/;"	f
airline#extensions#keymap#init	.vim/pack/ide/start/airline/autoload/airline/extensions/keymap.vim	/^function! airline#extensions#keymap#init(ext)$/;"	f
airline#extensions#keymap#status	.vim/pack/ide/start/airline/autoload/airline/extensions/keymap.vim	/^function! airline#extensions#keymap#status()$/;"	f
airline#extensions#languageclient#get	.vim/pack/ide/start/airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#get(type)$/;"	f
airline#extensions#languageclient#get_error	.vim/pack/ide/start/airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#get_error()$/;"	f
airline#extensions#languageclient#get_warning	.vim/pack/ide/start/airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#get_warning()$/;"	f
airline#extensions#languageclient#init	.vim/pack/ide/start/airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#init(ext)$/;"	f
airline#extensions#load	.vim/pack/ide/start/airline/autoload/airline/extensions.vim	/^function! airline#extensions#load()$/;"	f
airline#extensions#load_theme	.vim/pack/ide/start/airline/autoload/airline/extensions.vim	/^function! airline#extensions#load_theme()$/;"	f
airline#extensions#localsearch#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/localsearch.vim	/^function! airline#extensions#localsearch#apply(...) abort$/;"	f
airline#extensions#localsearch#init	.vim/pack/ide/start/airline/autoload/airline/extensions/localsearch.vim	/^function! airline#extensions#localsearch#init(ext) abort$/;"	f
airline#extensions#localsearch#load_theme	.vim/pack/ide/start/airline/autoload/airline/extensions/localsearch.vim	/^function! airline#extensions#localsearch#load_theme(palette) abort$/;"	f
airline#extensions#lsp#get	.vim/pack/ide/start/airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#get(type) abort$/;"	f
airline#extensions#lsp#get_error	.vim/pack/ide/start/airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#get_error() abort$/;"	f
airline#extensions#lsp#get_warning	.vim/pack/ide/start/airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#get_warning() abort$/;"	f
airline#extensions#lsp#init	.vim/pack/ide/start/airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#init(ext) abort$/;"	f
airline#extensions#lsp#progress	.vim/pack/ide/start/airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#progress() abort$/;"	f
airline#extensions#lsp#update	.vim/pack/ide/start/airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#update() abort$/;"	f
airline#extensions#neomake#get_errors	.vim/pack/ide/start/airline/autoload/airline/extensions/neomake.vim	/^function! airline#extensions#neomake#get_errors()$/;"	f
airline#extensions#neomake#get_warnings	.vim/pack/ide/start/airline/autoload/airline/extensions/neomake.vim	/^function! airline#extensions#neomake#get_warnings()$/;"	f
airline#extensions#neomake#init	.vim/pack/ide/start/airline/autoload/airline/extensions/neomake.vim	/^function! airline#extensions#neomake#init(ext)$/;"	f
airline#extensions#netrw#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/netrw.vim	/^function! airline#extensions#netrw#apply(...)$/;"	f
airline#extensions#netrw#init	.vim/pack/ide/start/airline/autoload/airline/extensions/netrw.vim	/^function! airline#extensions#netrw#init(ext)$/;"	f
airline#extensions#netrw#sortstring	.vim/pack/ide/start/airline/autoload/airline/extensions/netrw.vim	/^function! airline#extensions#netrw#sortstring()$/;"	f
airline#extensions#nrrwrgn#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/nrrwrgn.vim	/^function! airline#extensions#nrrwrgn#apply(...)$/;"	f
airline#extensions#nrrwrgn#init	.vim/pack/ide/start/airline/autoload/airline/extensions/nrrwrgn.vim	/^function! airline#extensions#nrrwrgn#init(ext)$/;"	f
airline#extensions#nvimlsp#get	.vim/pack/ide/start/airline/autoload/airline/extensions/nvimlsp.vim	/^function! airline#extensions#nvimlsp#get(type) abort$/;"	f
airline#extensions#nvimlsp#get_error	.vim/pack/ide/start/airline/autoload/airline/extensions/nvimlsp.vim	/^function! airline#extensions#nvimlsp#get_error() abort$/;"	f
airline#extensions#nvimlsp#get_warning	.vim/pack/ide/start/airline/autoload/airline/extensions/nvimlsp.vim	/^function! airline#extensions#nvimlsp#get_warning() abort$/;"	f
airline#extensions#nvimlsp#init	.vim/pack/ide/start/airline/autoload/airline/extensions/nvimlsp.vim	/^function! airline#extensions#nvimlsp#init(ext) abort$/;"	f
airline#extensions#obsession#get_status	.vim/pack/ide/start/airline/autoload/airline/extensions/obsession.vim	/^function! airline#extensions#obsession#get_status()$/;"	f
airline#extensions#obsession#init	.vim/pack/ide/start/airline/autoload/airline/extensions/obsession.vim	/^function! airline#extensions#obsession#init(ext)$/;"	f
airline#extensions#omnisharp#init	.vim/pack/ide/start/airline/autoload/airline/extensions/omnisharp.vim	/^function! airline#extensions#omnisharp#init(ext) abort$/;"	f
airline#extensions#omnisharp#server_status	.vim/pack/ide/start/airline/autoload/airline/extensions/omnisharp.vim	/^function! airline#extensions#omnisharp#server_status(...) abort$/;"	f
airline#extensions#po#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#apply(...)$/;"	f
airline#extensions#po#init	.vim/pack/ide/start/airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#init(ext)$/;"	f
airline#extensions#po#on_winenter	.vim/pack/ide/start/airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#on_winenter()$/;"	f
airline#extensions#po#shorten	.vim/pack/ide/start/airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#shorten()$/;"	f
airline#extensions#po#stats	.vim/pack/ide/start/airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#stats()$/;"	f
airline#extensions#poetv#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/poetv.vim	/^function! airline#extensions#poetv#apply(...)$/;"	f
airline#extensions#poetv#init	.vim/pack/ide/start/airline/autoload/airline/extensions/poetv.vim	/^function! airline#extensions#poetv#init(ext)$/;"	f
airline#extensions#poetv#update	.vim/pack/ide/start/airline/autoload/airline/extensions/poetv.vim	/^function! airline#extensions#poetv#update()$/;"	f
airline#extensions#prepend_to_section	.vim/pack/ide/start/airline/autoload/airline/extensions.vim	/^function! airline#extensions#prepend_to_section(name, value)$/;"	f
airline#extensions#promptline#init	.vim/pack/ide/start/airline/autoload/airline/extensions/promptline.vim	/^function! airline#extensions#promptline#init(ext)$/;"	f
airline#extensions#promptline#set_prompt_colors	.vim/pack/ide/start/airline/autoload/airline/extensions/promptline.vim	/^function! airline#extensions#promptline#set_prompt_colors(palette)$/;"	f
airline#extensions#quickfix#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#apply(...)$/;"	f
airline#extensions#quickfix#get_type	.vim/pack/ide/start/airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#get_type()$/;"	f
airline#extensions#quickfix#inactive_qf_window	.vim/pack/ide/start/airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#inactive_qf_window(...)$/;"	f
airline#extensions#quickfix#init	.vim/pack/ide/start/airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#init(ext)$/;"	f
airline#extensions#scrollbar#calculate	.vim/pack/ide/start/airline/autoload/airline/extensions/scrollbar.vim	/^function! airline#extensions#scrollbar#calculate() abort$/;"	f
airline#extensions#scrollbar#init	.vim/pack/ide/start/airline/autoload/airline/extensions/scrollbar.vim	/^function! airline#extensions#scrollbar#init(ext) abort$/;"	f
airline#extensions#searchcount#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/searchcount.vim	/^function! airline#extensions#searchcount#apply(...) abort$/;"	f
airline#extensions#searchcount#init	.vim/pack/ide/start/airline/autoload/airline/extensions/searchcount.vim	/^function! airline#extensions#searchcount#init(ext) abort$/;"	f
airline#extensions#searchcount#status	.vim/pack/ide/start/airline/autoload/airline/extensions/searchcount.vim	/^function! airline#extensions#searchcount#status() abort$/;"	f
airline#extensions#syntastic#get	.vim/pack/ide/start/airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#get(type)$/;"	f
airline#extensions#syntastic#get_error	.vim/pack/ide/start/airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#get_error()$/;"	f
airline#extensions#syntastic#get_warning	.vim/pack/ide/start/airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#get_warning()$/;"	f
airline#extensions#syntastic#init	.vim/pack/ide/start/airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#init(ext)$/;"	f
airline#extensions#tabline#add_label	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#add_label(dict, type, right)$/;"	f
airline#extensions#tabline#add_tab_label	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#add_tab_label(dict)$/;"	f
airline#extensions#tabline#autoshow#off	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/autoshow.vim	/^function! airline#extensions#tabline#autoshow#off()$/;"	f
airline#extensions#tabline#autoshow#on	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/autoshow.vim	/^function! airline#extensions#tabline#autoshow#on()$/;"	f
airline#extensions#tabline#buffers#clickbuf	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#clickbuf(minwid, clicks, button, modifiers) abort$/;"	f
airline#extensions#tabline#buffers#get	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#get()$/;"	f
airline#extensions#tabline#buffers#invalidate	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#invalidate()$/;"	f
airline#extensions#tabline#buffers#off	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#off()$/;"	f
airline#extensions#tabline#buffers#on	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#on()$/;"	f
airline#extensions#tabline#buflist#clean	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buflist.vim	/^function! airline#extensions#tabline#buflist#clean()$/;"	f
airline#extensions#tabline#buflist#invalidate	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buflist.vim	/^function! airline#extensions#tabline#buflist#invalidate()$/;"	f
airline#extensions#tabline#buflist#list	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buflist.vim	/^function! airline#extensions#tabline#buflist#list()$/;"	f
airline#extensions#tabline#builder#new	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/builder.vim	/^function! airline#extensions#tabline#builder#new(context)$/;"	f
airline#extensions#tabline#ctrlspace#add_buffer_section	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#add_buffer_section(builder, cur_tab, cur_buf, pul/;"	f
airline#extensions#tabline#ctrlspace#add_tab_section	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#add_tab_section(builder, pull_right)$/;"	f
airline#extensions#tabline#ctrlspace#get	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#get()$/;"	f
airline#extensions#tabline#ctrlspace#invalidate	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#invalidate()$/;"	f
airline#extensions#tabline#ctrlspace#off	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#off()$/;"	f
airline#extensions#tabline#ctrlspace#on	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#on()$/;"	f
airline#extensions#tabline#enable	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  def airline#extensions#tabline#enable(): void$/;"	f
airline#extensions#tabline#enable	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#enable()$/;"	f
airline#extensions#tabline#formatters#default#format	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/formatters/default.vim	/^  def airline#extensions#tabline#formatters#default#format(bufnr: number, buffers: list<number>)/;"	f
airline#extensions#tabline#formatters#default#format	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/formatters/default.vim	/^  function! airline#extensions#tabline#formatters#default#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#default#wrap_name	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/formatters/default.vim	/^  def airline#extensions#tabline#formatters#default#wrap_name(bufnr: number, buffer_name: string/;"	f
airline#extensions#tabline#formatters#default#wrap_name	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/formatters/default.vim	/^  function! airline#extensions#tabline#formatters#default#wrap_name(bufnr, buffer_name)$/;"	f
airline#extensions#tabline#formatters#jsformatter#format	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/formatters/jsformatter.vim	/^function! airline#extensions#tabline#formatters#jsformatter#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#short_path#format	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/formatters/short_path.vim	/^function! airline#extensions#tabline#formatters#short_path#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#tabnr#format	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/formatters/tabnr.vim	/^function! airline#extensions#tabline#formatters#tabnr#format(tab_nr_type, nr)$/;"	f
airline#extensions#tabline#formatters#unique_tail#format	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/formatters/unique_tail.vim	/^function! airline#extensions#tabline#formatters#unique_tail#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#unique_tail_improved#format	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/formatters/unique_tail_improved.vim	/^function! airline#extensions#tabline#formatters#unique_tail_improved#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#get	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  def airline#extensions#tabline#get(): string$/;"	f
airline#extensions#tabline#get	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#get()$/;"	f
airline#extensions#tabline#get_buffer_name	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  def airline#extensions#tabline#get_buffer_name(nr: number, buffers = airline#extensions#tablin/;"	f
airline#extensions#tabline#get_buffer_name	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#get_buffer_name(nr, ...)$/;"	f
airline#extensions#tabline#group_of_bufnr	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  def airline#extensions#tabline#group_of_bufnr(tab_bufs: list<number>, bufnr: number): string$/;"	f
airline#extensions#tabline#group_of_bufnr	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#group_of_bufnr(tab_bufs, bufnr)$/;"	f
airline#extensions#tabline#init	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#init(ext)$/;"	f
airline#extensions#tabline#load_theme	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  def airline#extensions#tabline#load_theme(palette: dict<any>): number$/;"	f
airline#extensions#tabline#load_theme	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#load_theme(palette)$/;"	f
airline#extensions#tabline#new_builder	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  def airline#extensions#tabline#new_builder(): dict<any>$/;"	f
airline#extensions#tabline#new_builder	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#new_builder()$/;"	f
airline#extensions#tabline#redraw	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  def airline#extensions#tabline#redraw(): void$/;"	f
airline#extensions#tabline#redraw	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#redraw()$/;"	f
airline#extensions#tabline#tabs#get	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#get()$/;"	f
airline#extensions#tabline#tabs#invalidate	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#invalidate()$/;"	f
airline#extensions#tabline#tabs#map_keys	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#map_keys()$/;"	f
airline#extensions#tabline#tabs#off	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#off()$/;"	f
airline#extensions#tabline#tabs#on	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#on()$/;"	f
airline#extensions#tabline#tabs#tabnr_formatter	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#tabnr_formatter(nr, i) abort$/;"	f
airline#extensions#tabline#tabws#add_buffer_section	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#add_buffer_section(builder, cur_tab, cur_buf, pull_ri/;"	f
airline#extensions#tabline#tabws#add_tab_section	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#add_tab_section(builder, pull_right)$/;"	f
airline#extensions#tabline#tabws#get	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#get()$/;"	f
airline#extensions#tabline#tabws#invalidate	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#invalidate()$/;"	f
airline#extensions#tabline#tabws#off	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#off()$/;"	f
airline#extensions#tabline#tabws#on	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#on()$/;"	f
airline#extensions#tabline#title	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  def airline#extensions#tabline#title(n: number): string$/;"	f
airline#extensions#tabline#title	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#title(n)$/;"	f
airline#extensions#tabline#xtabline#filter_buffers	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#filter_buffers()$/;"	f
airline#extensions#tabline#xtabline#init	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#init()$/;"	f
airline#extensions#tabline#xtabline#maps	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#maps()$/;"	f
airline#extensions#tabline#xtabline#next_buffer	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#next_buffer(nr)$/;"	f
airline#extensions#tabline#xtabline#prev_buffer	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#prev_buffer(nr)$/;"	f
airline#extensions#tabline#xtabline#reopen_last_tab	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#reopen_last_tab()$/;"	f
airline#extensions#tabline#xtabline#select_buffer	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#select_buffer(nr)$/;"	f
airline#extensions#tabline#xtabline#toggle_buffers	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#toggle_buffers()$/;"	f
airline#extensions#tabline#xtabline#toggle_tabs	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#toggle_tabs()$/;"	f
airline#extensions#tabline#xtabline#update_obsession	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#update_obsession()$/;"	f
airline#extensions#tagbar#currenttag	.vim/pack/ide/start/airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#currenttag()$/;"	f
airline#extensions#tagbar#get_status	.vim/pack/ide/start/airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#get_status(...)$/;"	f
airline#extensions#tagbar#inactive_apply	.vim/pack/ide/start/airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#inactive_apply(...)$/;"	f
airline#extensions#tagbar#init	.vim/pack/ide/start/airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#init(ext)$/;"	f
airline#extensions#term#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#apply(...) abort$/;"	f
airline#extensions#term#inactive_apply	.vim/pack/ide/start/airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#inactive_apply(...) abort$/;"	f
airline#extensions#term#init	.vim/pack/ide/start/airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#init(ext) abort$/;"	f
airline#extensions#term#termmode	.vim/pack/ide/start/airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#termmode() abort$/;"	f
airline#extensions#tmuxline#init	.vim/pack/ide/start/airline/autoload/airline/extensions/tmuxline.vim	/^function! airline#extensions#tmuxline#init(ext)$/;"	f
airline#extensions#tmuxline#set_tmux_colors	.vim/pack/ide/start/airline/autoload/airline/extensions/tmuxline.vim	/^function! airline#extensions#tmuxline#set_tmux_colors(palette)$/;"	f
airline#extensions#undotree#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/undotree.vim	/^function! airline#extensions#undotree#apply(...)$/;"	f
airline#extensions#undotree#init	.vim/pack/ide/start/airline/autoload/airline/extensions/undotree.vim	/^function! airline#extensions#undotree#init(ext)$/;"	f
airline#extensions#unicode#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/unicode.vim	/^function! airline#extensions#unicode#apply(...)$/;"	f
airline#extensions#unicode#init	.vim/pack/ide/start/airline/autoload/airline/extensions/unicode.vim	/^function! airline#extensions#unicode#init(ext)$/;"	f
airline#extensions#unite#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/unite.vim	/^function! airline#extensions#unite#apply(...)$/;"	f
airline#extensions#unite#init	.vim/pack/ide/start/airline/autoload/airline/extensions/unite.vim	/^function! airline#extensions#unite#init(ext)$/;"	f
airline#extensions#vimagit#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/vimagit.vim	/^function! airline#extensions#vimagit#apply(...) abort$/;"	f
airline#extensions#vimagit#get_mode	.vim/pack/ide/start/airline/autoload/airline/extensions/vimagit.vim	/^function! airline#extensions#vimagit#get_mode() abort$/;"	f
airline#extensions#vimagit#init	.vim/pack/ide/start/airline/autoload/airline/extensions/vimagit.vim	/^function! airline#extensions#vimagit#init(ext) abort$/;"	f
airline#extensions#vimcmake#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/vimcmake.vim	/^function! airline#extensions#vimcmake#apply(...) abort$/;"	f
airline#extensions#vimcmake#inactive_apply	.vim/pack/ide/start/airline/autoload/airline/extensions/vimcmake.vim	/^function! airline#extensions#vimcmake#inactive_apply(...) abort$/;"	f
airline#extensions#vimcmake#init	.vim/pack/ide/start/airline/autoload/airline/extensions/vimcmake.vim	/^function! airline#extensions#vimcmake#init(ext) abort$/;"	f
airline#extensions#vimtex#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/vimtex.vim	/^function! airline#extensions#vimtex#apply(...)$/;"	f
airline#extensions#vimtex#get_scope	.vim/pack/ide/start/airline/autoload/airline/extensions/vimtex.vim	/^function! airline#extensions#vimtex#get_scope()$/;"	f
airline#extensions#vimtex#init	.vim/pack/ide/start/airline/autoload/airline/extensions/vimtex.vim	/^function! airline#extensions#vimtex#init(ext)$/;"	f
airline#extensions#virtualenv#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/virtualenv.vim	/^function! airline#extensions#virtualenv#apply(...)$/;"	f
airline#extensions#virtualenv#init	.vim/pack/ide/start/airline/autoload/airline/extensions/virtualenv.vim	/^function! airline#extensions#virtualenv#init(ext)$/;"	f
airline#extensions#virtualenv#update	.vim/pack/ide/start/airline/autoload/airline/extensions/virtualenv.vim	/^function! airline#extensions#virtualenv#update()$/;"	f
airline#extensions#vista#currenttag	.vim/pack/ide/start/airline/autoload/airline/extensions/vista.vim	/^function! airline#extensions#vista#currenttag() abort$/;"	f
airline#extensions#vista#init	.vim/pack/ide/start/airline/autoload/airline/extensions/vista.vim	/^function! airline#extensions#vista#init(ext) abort$/;"	f
airline#extensions#whitespace#check	.vim/pack/ide/start/airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#check()$/;"	f
airline#extensions#whitespace#disable	.vim/pack/ide/start/airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#disable()$/;"	f
airline#extensions#whitespace#init	.vim/pack/ide/start/airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#init(...)$/;"	f
airline#extensions#whitespace#toggle	.vim/pack/ide/start/airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#toggle()$/;"	f
airline#extensions#windowswap#get_status	.vim/pack/ide/start/airline/autoload/airline/extensions/windowswap.vim	/^function! airline#extensions#windowswap#get_status()$/;"	f
airline#extensions#windowswap#init	.vim/pack/ide/start/airline/autoload/airline/extensions/windowswap.vim	/^function! airline#extensions#windowswap#init(ext)$/;"	f
airline#extensions#wordcount#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/wordcount.vim	/^function! airline#extensions#wordcount#apply(...)$/;"	f
airline#extensions#wordcount#formatters#default#to_string	.vim/pack/ide/start/airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^function! airline#extensions#wordcount#formatters#default#to_string(wordcount)$/;"	f
airline#extensions#wordcount#formatters#default#update_fmt	.vim/pack/ide/start/airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^function! airline#extensions#wordcount#formatters#default#update_fmt(...)$/;"	f
airline#extensions#wordcount#formatters#readingtime#to_string	.vim/pack/ide/start/airline/autoload/airline/extensions/wordcount/formatters/readingtime.vim	/^function! airline#extensions#wordcount#formatters#readingtime#to_string(wordcount) abort$/;"	f
airline#extensions#wordcount#formatters#readingtime#update_fmt	.vim/pack/ide/start/airline/autoload/airline/extensions/wordcount/formatters/readingtime.vim	/^function! airline#extensions#wordcount#formatters#readingtime#update_fmt(...) abort$/;"	f
airline#extensions#wordcount#get	.vim/pack/ide/start/airline/autoload/airline/extensions/wordcount.vim	/^function airline#extensions#wordcount#get()$/;"	f
airline#extensions#wordcount#init	.vim/pack/ide/start/airline/autoload/airline/extensions/wordcount.vim	/^function! airline#extensions#wordcount#init(ext)$/;"	f
airline#extensions#xkblayout#init	.vim/pack/ide/start/airline/autoload/airline/extensions/xkblayout.vim	/^function! airline#extensions#xkblayout#init(ext)$/;"	f
airline#extensions#xkblayout#status	.vim/pack/ide/start/airline/autoload/airline/extensions/xkblayout.vim	/^function! airline#extensions#xkblayout#status()$/;"	f
airline#extensions#ycm#get_error_count	.vim/pack/ide/start/airline/autoload/airline/extensions/ycm.vim	/^function! airline#extensions#ycm#get_error_count() abort$/;"	f
airline#extensions#ycm#get_warning_count	.vim/pack/ide/start/airline/autoload/airline/extensions/ycm.vim	/^function! airline#extensions#ycm#get_warning_count()$/;"	f
airline#extensions#ycm#init	.vim/pack/ide/start/airline/autoload/airline/extensions/ycm.vim	/^function! airline#extensions#ycm#init(ext)$/;"	f
airline#extensions#zoomwintab#apply	.vim/pack/ide/start/airline/autoload/airline/extensions/zoomwintab.vim	/^function! airline#extensions#zoomwintab#apply(...) abort$/;"	f
airline#extensions#zoomwintab#init	.vim/pack/ide/start/airline/autoload/airline/extensions/zoomwintab.vim	/^function! airline#extensions#zoomwintab#init(ext) abort$/;"	f
airline#formatter#short_path#format	.vim/pack/ide/start/airline/autoload/airline/formatter/short_path.vim	/^function! airline#formatter#short_path#format(val) abort$/;"	f
airline#highlighter#add_accent	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  def airline#highlighter#add_accent(accent: string): void$/;"	f
airline#highlighter#add_accent	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#add_accent(accent) abort$/;"	f
airline#highlighter#add_separator	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  def airline#highlighter#add_separator(from: string, to: string, inverse: bool): void$/;"	f
airline#highlighter#add_separator	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#add_separator(from, to, inverse) abort$/;"	f
airline#highlighter#exec	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  def airline#highlighter#exec(group: string, clrs: list<any>): void$/;"	f
airline#highlighter#exec	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#exec(group, colors) abort$/;"	f
airline#highlighter#get_highlight	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  def airline#highlighter#get_highlight(group: string, rest: list<string> = ['']): list<string>$/;"	f
airline#highlighter#get_highlight	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#get_highlight(group, ...) abort$/;"	f
airline#highlighter#get_highlight2	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  def airline#highlighter#get_highlight2(fg: list<string>, bg: list<string>, rest1: string = '',/;"	f
airline#highlighter#get_highlight2	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#get_highlight2(fg, bg, ...) abort$/;"	f
airline#highlighter#highlight	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  def airline#highlighter#highlight(modes: list<string>, bufnr: string = ''): void$/;"	f
airline#highlighter#highlight	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#highlight(modes, ...) abort$/;"	f
airline#highlighter#highlight_modified_inactive	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  def airline#highlighter#highlight_modified_inactive(bufnr: number): void$/;"	f
airline#highlighter#highlight_modified_inactive	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#highlight_modified_inactive(bufnr) abort$/;"	f
airline#highlighter#load_theme	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  def airline#highlighter#load_theme(): void$/;"	f
airline#highlighter#load_theme	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#load_theme() abort$/;"	f
airline#highlighter#reset_hlcache	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  def airline#highlighter#reset_hlcache(): void$/;"	f
airline#highlighter#reset_hlcache	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#reset_hlcache() abort$/;"	f
airline#init#bootstrap	.vim/pack/ide/start/airline/autoload/airline/init.vim	/^function! airline#init#bootstrap()$/;"	f
airline#init#sections	.vim/pack/ide/start/airline/autoload/airline/init.vim	/^function! airline#init#sections()$/;"	f
airline#load_theme	.vim/pack/ide/start/airline/autoload/airline.vim	/^function! airline#load_theme()$/;"	f
airline#mode_changed	.vim/pack/ide/start/airline/autoload/airline.vim	/^function! airline#mode_changed()$/;"	f
airline#msdos#round_msdos_colors	.vim/pack/ide/start/airline/autoload/airline/msdos.vim	/^	function! airline#msdos#round_msdos_colors(rgblist)$/;"	f
airline#msdos#round_msdos_colors	.vim/pack/ide/start/airline/autoload/airline/msdos.vim	/^  def airline#msdos#round_msdos_colors(rgblist: list<number>): string$/;"	f
airline#parts#crypt	.vim/pack/ide/start/airline/autoload/airline/parts.vim	/^function! airline#parts#crypt()$/;"	f
airline#parts#define	.vim/pack/ide/start/airline/autoload/airline/parts.vim	/^function! airline#parts#define(key, config)$/;"	f
airline#parts#define_accent	.vim/pack/ide/start/airline/autoload/airline/parts.vim	/^function! airline#parts#define_accent(key, accent)$/;"	f
airline#parts#define_condition	.vim/pack/ide/start/airline/autoload/airline/parts.vim	/^function! airline#parts#define_condition(key, predicate)$/;"	f
airline#parts#define_empty	.vim/pack/ide/start/airline/autoload/airline/parts.vim	/^function! airline#parts#define_empty(keys)$/;"	f
airline#parts#define_function	.vim/pack/ide/start/airline/autoload/airline/parts.vim	/^function! airline#parts#define_function(key, name)$/;"	f
airline#parts#define_minwidth	.vim/pack/ide/start/airline/autoload/airline/parts.vim	/^function! airline#parts#define_minwidth(key, width)$/;"	f
airline#parts#define_raw	.vim/pack/ide/start/airline/autoload/airline/parts.vim	/^function! airline#parts#define_raw(key, raw)$/;"	f
airline#parts#define_text	.vim/pack/ide/start/airline/autoload/airline/parts.vim	/^function! airline#parts#define_text(key, text)$/;"	f
airline#parts#ffenc	.vim/pack/ide/start/airline/autoload/airline/parts.vim	/^function! airline#parts#ffenc()$/;"	f
airline#parts#filetype	.vim/pack/ide/start/airline/autoload/airline/parts.vim	/^function! airline#parts#filetype()$/;"	f
airline#parts#get	.vim/pack/ide/start/airline/autoload/airline/parts.vim	/^function! airline#parts#get(key)$/;"	f
airline#parts#iminsert	.vim/pack/ide/start/airline/autoload/airline/parts.vim	/^function! airline#parts#iminsert()$/;"	f
airline#parts#mode	.vim/pack/ide/start/airline/autoload/airline/parts.vim	/^function! airline#parts#mode()$/;"	f
airline#parts#paste	.vim/pack/ide/start/airline/autoload/airline/parts.vim	/^function! airline#parts#paste()$/;"	f
airline#parts#readonly	.vim/pack/ide/start/airline/autoload/airline/parts.vim	/^function! airline#parts#readonly()$/;"	f
airline#parts#spell	.vim/pack/ide/start/airline/autoload/airline/parts.vim	/^function! airline#parts#spell()$/;"	f
airline#remove_statusline_func	.vim/pack/ide/start/airline/autoload/airline.vim	/^function! airline#remove_statusline_func(name)$/;"	f
airline#section#create	.vim/pack/ide/start/airline/autoload/airline/section.vim	/^function! airline#section#create(parts)$/;"	f
airline#section#create_left	.vim/pack/ide/start/airline/autoload/airline/section.vim	/^function! airline#section#create_left(parts)$/;"	f
airline#section#create_right	.vim/pack/ide/start/airline/autoload/airline/section.vim	/^function! airline#section#create_right(parts)$/;"	f
airline#statusline	.vim/pack/ide/start/airline/autoload/airline.vim	/^function! airline#statusline(winnr)$/;"	f
airline#switch_matching_theme	.vim/pack/ide/start/airline/autoload/airline.vim	/^function! airline#switch_matching_theme()$/;"	f
airline#switch_theme	.vim/pack/ide/start/airline/autoload/airline.vim	/^function! airline#switch_theme(name, ...)$/;"	f
airline#themes#generate_color_map	.vim/pack/ide/start/airline/autoload/airline/themes.vim	/^  def airline#themes#generate_color_map(sect1: list<any>, sect2: list<any>, sect3: list<any>): d/;"	f
airline#themes#generate_color_map	.vim/pack/ide/start/airline/autoload/airline/themes.vim	/^  function! airline#themes#generate_color_map(sect1, sect2, sect3, ...)$/;"	f
airline#themes#get_highlight	.vim/pack/ide/start/airline/autoload/airline/themes.vim	/^  def airline#themes#get_highlight(group: string): list<string>$/;"	f
airline#themes#get_highlight	.vim/pack/ide/start/airline/autoload/airline/themes.vim	/^  function! airline#themes#get_highlight(group, ...)$/;"	f
airline#themes#get_highlight2	.vim/pack/ide/start/airline/autoload/airline/themes.vim	/^  def airline#themes#get_highlight2(fg: list<string>, bg: list<string>): list<string>$/;"	f
airline#themes#get_highlight2	.vim/pack/ide/start/airline/autoload/airline/themes.vim	/^  function! airline#themes#get_highlight2(fg, bg, ...)$/;"	f
airline#themes#patch	.vim/pack/ide/start/airline/autoload/airline/themes.vim	/^  def airline#themes#patch(palette: dict<any>): void$/;"	f
airline#themes#patch	.vim/pack/ide/start/airline/autoload/airline/themes.vim	/^  function! airline#themes#patch(palette)$/;"	f
airline#update_statusline	.vim/pack/ide/start/airline/autoload/airline.vim	/^function! airline#update_statusline()$/;"	f
airline#update_statusline_focuslost	.vim/pack/ide/start/airline/autoload/airline.vim	/^function! airline#update_statusline_focuslost()$/;"	f
airline#update_statusline_inactive	.vim/pack/ide/start/airline/autoload/airline.vim	/^function! airline#update_statusline_inactive(range)$/;"	f
airline#update_tabline	.vim/pack/ide/start/airline/autoload/airline.vim	/^function! airline#update_tabline()$/;"	f
airline#util#append	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^function! airline#util#append(text, minwidth)$/;"	f
airline#util#doautocmd	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^function! airline#util#doautocmd(event)$/;"	f
airline#util#exec_funcrefs	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^  function! airline#util#exec_funcrefs(list, ...)$/;"	f
airline#util#getbufvar	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^  function! airline#util#getbufvar(bufnr, key, def)$/;"	f
airline#util#getwinvar	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^  function! airline#util#getwinvar(winnr, key, def)$/;"	f
airline#util#has_custom_scm	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^function! airline#util#has_custom_scm()$/;"	f
airline#util#has_fugitive	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^function! airline#util#has_fugitive()$/;"	f
airline#util#has_gina	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^function! airline#util#has_gina()$/;"	f
airline#util#has_lawrencium	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^function! airline#util#has_lawrencium()$/;"	f
airline#util#has_vcscommand	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^function! airline#util#has_vcscommand()$/;"	f
airline#util#has_vim9_script	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^function! airline#util#has_vim9_script()$/;"	f
airline#util#ignore_buf	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^function! airline#util#ignore_buf(name)$/;"	f
airline#util#ignore_next_focusgain	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^function! airline#util#ignore_next_focusgain()$/;"	f
airline#util#prepend	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^function! airline#util#prepend(text, minwidth)$/;"	f
airline#util#shorten	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^function! airline#util#shorten(text, winwidth, minwidth, ...)$/;"	f
airline#util#stl_disabled	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^function! airline#util#stl_disabled(winnr)$/;"	f
airline#util#strcharpart	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^function! airline#util#strcharpart(...)$/;"	f
airline#util#strchars	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^function! airline#util#strchars(str)$/;"	f
airline#util#themes	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^function! airline#util#themes(match)$/;"	f
airline#util#try_focusgained	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^function! airline#util#try_focusgained()$/;"	f
airline#util#warning	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^function! airline#util#warning(msg)$/;"	f
airline#util#winwidth	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^function! airline#util#winwidth(...) abort$/;"	f
airline#util#wrap	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^function! airline#util#wrap(text, minwidth)$/;"	f
airline_ale	.vim/pack/ide/start/airline/autoload/airline/extensions/ale.vim	/^  augroup airline_ale$/;"	a
airline_languageclient	.vim/pack/ide/start/airline/autoload/airline/extensions/languageclient.vim	/^  augroup airline_languageclient$/;"	a
airline_lsp_progress	.vim/pack/ide/start/airline/autoload/airline/extensions/lsp.vim	/^  augroup airline_lsp_progress$/;"	a
airline_omnisharp	.vim/pack/ide/start/airline/autoload/airline/extensions/omnisharp.vim	/^  augroup airline_omnisharp$/;"	a
airline_tabline_autoshow	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/autoshow.vim	/^  augroup airline_tabline_autoshow$/;"	a
airline_tabline_buffers	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^  augroup airline_tabline_buffers$/;"	a
airline_tabline_ctrlspace	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^  augroup airline_tabline_ctrlspace$/;"	a
airline_tabline_tabs	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabs.vim	/^  augroup airline_tabline_tabs$/;"	a
airline_tabline_tabws	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabws.vim	/^  augroup airline_tabline_tabws$/;"	a
airline_whitespace	.vim/pack/ide/start/airline/autoload/airline/extensions/whitespace.vim	/^    augroup airline_whitespace$/;"	a
airline_whitespace	.vim/pack/ide/start/airline/autoload/airline/extensions/whitespace.vim	/^  augroup airline_whitespace$/;"	a
all	.vim/pack/ide/start/yajs/Makefile	/^all: install-deps install$/;"	t
apps_dir_from_src	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^apps_dir_from_src(SrcFile) ->$/;"	f
args	.vim/pack/ide/start/syntastic/syntax_checkers/less/less-lint.js	/^  var args, fs, less, options, parser;$/;"	v
author	.vim/pack/ide/start/tcomment/addon-info.json	/^    "author" : "Tom Link <micathom at gmail com>",$/;"	s
author	.vim/pack/ide/start/tlib/addon-info.json	/^    "author" : "Tom Link <micathom at gmail com>",$/;"	s
b.get_group	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^  function! b.get_group(i) dict$/;"	f
b.get_group	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabs.vim	/^  function! b.get_group(i) dict$/;"	f
b.get_posttitle	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^    function! b.get_posttitle(i) dict$/;"	f
b.get_pretitle	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^    function! b.get_pretitle(i) dict$/;"	f
b.get_title	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^  function! b.get_title(i) dict$/;"	f
b.get_title	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabs.vim	/^  function! b.get_title(i) dict$/;"	f
b:bar	.vim/pack/ide/start/tlib/spec/tlib/var.vim	/^let b:bar = 3$/;"	v
b:bar	.vim/pack/ide/start/tlib/test/tlib.vim	/^let b:bar = 3$/;"	v
b:current_syntax	.vim/pack/ide/opt/ctrlsf/syntax/ctrlsf.vim	/^let b:current_syntax = 'ctrlsf'$/;"	v
b:current_syntax	.vim/pack/ide/start/fugitive/syntax/fugitive.vim	/^let b:current_syntax = "fugitive"$/;"	v
b:current_syntax	.vim/pack/ide/start/fugitive/syntax/fugitiveblame.vim	/^let b:current_syntax = "fugitiveblame"$/;"	v
b:current_syntax	.vim/pack/ide/start/tagbar/syntax/tagbar.vim	/^let b:current_syntax = 'tagbar'$/;"	v
b:current_syntax	.vim/pack/ide/start/vim-glsl/syntax/glsl.vim	/^  let b:current_syntax = "glsl"$/;"	v
b:current_syntax	.vim/pack/ide/start/yajs/syntax/javascript.vim	/^let b:current_syntax = "javascript"$/;"	v
b:current_syntax	.vim/syntax/gnuplot.vim	/^let b:current_syntax = "gnuplot"$/;"	v
b:current_syntax	.vim/syntax/htmljinja.vim	/^let b:current_syntax = "htmljinja"$/;"	v
b:current_syntax	.vim/syntax/jinja.vim	/^let b:current_syntax = "jinja"$/;"	v
b:current_view_mode	.vim/pack/ide/opt/ctrlsf/syntax/ctrlsf.vim	/^let b:current_view_mode = vmode$/;"	v
b:did_ftplugin	.vim/pack/ide/start/fugitive/ftplugin/fugitiveblame.vim	/^let b:did_ftplugin = 1$/;"	v
buf_utils#GotoBuf	.vim/pack/ide/start/addon-mw-utils/autoload/buf_utils.vim	/^fun! buf_utils#GotoBuf(buf_identifier, opts)$/;"	f
bundle	.vim/pack/ide/start/yajs/Makefile	/^bundle: bundle-deps$/;"	t
bundle-deps	.vim/pack/ide/start/yajs/Makefile	/^bundle-deps:$/;"	t
bundle-deps	.vim/pack/ide/start/yajs/config.mk	/^bundle-deps:$/;"	t
c	.vim/pack/ide/start/airline/t/airline.vim	/^    let c = len(g:airline_statusline_funcrefs)$/;"	v
cS	.vim/pack/ide/start/surround/plugin/surround.vim	/^  nmap cS  <Plug>CSurround$/;"	m
cached_file_contents#CachedFileContents	.vim/pack/ide/start/addon-mw-utils/autoload/cached_file_contents.vim	/^function! cached_file_contents#CachedFileContents(file, func, ...) abort$/;"	f
cached_file_contents#ClearScanCache	.vim/pack/ide/start/addon-mw-utils/autoload/cached_file_contents.vim	/^fun! cached_file_contents#ClearScanCache()$/;"	f
cached_file_contents#Test	.vim/pack/ide/start/addon-mw-utils/autoload/cached_file_contents.vim	/^fun! cached_file_contents#Test()$/;"	f
camel	.vim/pack/ide/start/yajs/data/p.js	/^var camel   = require('camel-case');$/;"	v
camel-case	.vim/pack/ide/start/yajs/package.json	/^        "camel-case": "*",$/;"	s	object:devDependencies
check-require	.vim/pack/ide/start/yajs/Makefile	/^check-require:$/;"	t
clean	.vim/pack/ide/start/yajs/Makefile	/^clean: clean-bundle-deps$/;"	t
clean-bundle-deps	.vim/pack/ide/start/yajs/Makefile	/^clean-bundle-deps:$/;"	t
color	.vim/colors/desert256.vim	/^    fun <SID>color(r, g, b)$/;"	f
color	.vim/colors/summerfruit256.vim	/^    fun <SID>color(r, g, b)$/;"	f
color	.vim/colors/wombat256.vim	/^fun <SID>color(r, g, b)$/;"	f
colors	.vim/pack/ide/start/airline/t/themes.vim	/^      let colors = airline#themes#get_highlight('Foo')$/;"	v
colors	.vim/pack/ide/start/airline/t/themes.vim	/^    let colors = airline#themes#get_highlight('Foo')$/;"	v
colors_name	.vim/colors/adaryn.vim	/^let colors_name = "adaryn"$/;"	v
colors_name	.vim/colors/autumn.vim	/^let colors_name = "autumn"$/;"	v
colors_name	.vim/colors/autumn2.vim	/^let colors_name = "autumn"$/;"	v
colors_name	.vim/colors/autumnleaf.vim	/^let colors_name="AutumnLeaf"$/;"	v
colors_name	.vim/colors/breeze.vim	/^let colors_name = "breeze"$/;"	v
colors_name	.vim/colors/buttercream.vim	/^let colors_name = "buttercream"$/;"	v
colors_name	.vim/colors/candy.vim	/^let colors_name = "candy"$/;"	v
colors_name	.vim/colors/cleanphp.vim	/^let colors_name = "cleanphp"$/;"	v
colors_name	.vim/colors/dawn.vim	/^let colors_name = "dawn"$/;"	v
colors_name	.vim/colors/dusk.vim	/^let colors_name = "dusk"$/;"	v
colors_name	.vim/colors/earendel.vim	/^let colors_name = "earendel"$/;"	v
colors_name	.vim/colors/fine_blue.vim	/^let colors_name = "fine_blue"$/;"	v
colors_name	.vim/colors/fine_blue2.vim	/^let colors_name = "fine_blue"$/;"	v
colors_name	.vim/colors/fnaqevan.vim	/^let colors_name = "fnaqevan"$/;"	v
colors_name	.vim/colors/fog.vim	/^let colors_name = "fog"$/;"	v
colors_name	.vim/colors/freya.vim	/^let colors_name = "freya"$/;"	v
colors_name	.vim/colors/fruit.vim	/^let colors_name = "fruit"$/;"	v
colors_name	.vim/colors/fruity.vim	/^let colors_name = "fruity"$/;"	v
colors_name	.vim/colors/guardian.vim	/^let colors_name   = "Guardian"$/;"	v
colors_name	.vim/colors/herald.vim	/^let colors_name = "herald"$/;"	v
colors_name	.vim/colors/inkpot.vim	/^let colors_name = "inkpot"$/;"	v
colors_name	.vim/colors/ironman.vim	/^let colors_name = "ironman"$/;"	v
colors_name	.vim/colors/jellybeans.vim	/^let colors_name = "jellybeans"$/;"	v
colors_name	.vim/colors/kellys.vim	/^let colors_name = "kellys"$/;"	v
colors_name	.vim/colors/lucius.vim	/^let colors_name="lucius"$/;"	v
colors_name	.vim/colors/martin_krischik.vim	/^let colors_name = "martin_krischik"$/;"	v
colors_name	.vim/colors/moria.vim	/^let colors_name = "moria"$/;"	v
colors_name	.vim/colors/mustang.vim	/^let colors_name = "mustang"$/;"	v
colors_name	.vim/colors/neon.vim	/^let colors_name = "neon"$/;"	v
colors_name	.vim/colors/night.vim	/^let colors_name = "night"$/;"	v
colors_name	.vim/colors/no_quarter.vim	/^let colors_name = "no_quarter"$/;"	v
colors_name	.vim/colors/pyte.vim	/^let colors_name = "pyte"$/;"	v
colors_name	.vim/colors/rdark.vim	/^let colors_name = "rdark"$/;"	v
colors_name	.vim/colors/satori.vim	/^let colors_name = "satori"$/;"	v
colors_name	.vim/colors/sea.vim	/^let colors_name = "sea"$/;"	v
colors_name	.vim/colors/spring.vim	/^let colors_name = "spring"$/;"	v
colors_name	.vim/colors/tango.vim	/^let colors_name = "tango"$/;"	v
colors_name	.vim/colors/tango2.vim	/^let colors_name = "tango2"$/;"	v
colors_name	.vim/colors/taqua.vim	/^let colors_name="taqua"$/;"	v
colors_name	.vim/colors/tcsoft.vim	/^let colors_name = "TCSoft"$/;"	v
colors_name	.vim/colors/tir_black.vim	/^let colors_name = "tir_black"$/;"	v
colors_name	.vim/colors/twilight.vim	/^let colors_name = "twilight"$/;"	v
colors_name	.vim/colors/vividchalk.vim	/^let colors_name = "vividchalk"$/;"	v
colors_name	.vim/colors/winter.vim	/^let colors_name = "winter"$/;"	v
colors_name	.vim/colors/wombat.vim	/^let colors_name = "wombat"$/;"	v
colors_name	.vim/colors/xoria256.vim	/^let colors_name = "xoria256"$/;"	v
colors_name	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^let colors_name = "solarized"$/;"	v
config	.vim/pack/ide/start/yajs/Makefile	/^config:$/;"	t
contained	.vim/pack/ide/start/yajs/data/p.js	/^  var contained = true;$/;"	v
contains	.vim/pack/ide/start/yajs/data/p.js	/^  var contains = false;$/;"	v
crc_vim_table	.vim/pack/ide/start/tlib/scripts/create_crc_table.rb	/^def crc_vim_table$/;"	f
cs	.vim/pack/ide/start/surround/plugin/surround.vim	/^  nmap cs  <Plug>Csurround$/;"	m
ctrlp#acceptfile	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#acceptfile(...)$/;"	f
ctrlp#autoignore#get_patterns	.vim/pack/ide/start/ctrlp/autoload/ctrlp/autoignore.vim	/^function! ctrlp#autoignore#get_patterns(root_dir) abort$/;"	f
ctrlp#autoignore#ignore	.vim/pack/ide/start/ctrlp/autoload/ctrlp/autoignore.vim	/^function! ctrlp#autoignore#ignore(item, type) abort$/;"	f
ctrlp#autoignore#ignore_close	.vim/pack/ide/start/ctrlp/autoload/ctrlp/autoignore.vim	/^function! ctrlp#autoignore#ignore_close() abort$/;"	f
ctrlp#autoignore#ignore_init	.vim/pack/ide/start/ctrlp/autoload/ctrlp/autoignore.vim	/^function! ctrlp#autoignore#ignore_init() abort$/;"	f
ctrlp#bookmarkdir#accept	.vim/pack/ide/start/ctrlp/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#accept(mode, str)$/;"	f
ctrlp#bookmarkdir#add	.vim/pack/ide/start/ctrlp/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#add(bang, dir, ...)$/;"	f
ctrlp#bookmarkdir#id	.vim/pack/ide/start/ctrlp/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#id()$/;"	f
ctrlp#bookmarkdir#init	.vim/pack/ide/start/ctrlp/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#init()$/;"	f
ctrlp#bookmarkdir#remove	.vim/pack/ide/start/ctrlp/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#remove(entries)$/;"	f
ctrlp#buffers	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#buffers(...)$/;"	f
ctrlp#buffertag#accept	.vim/pack/ide/start/ctrlp/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#accept(mode, str)$/;"	f
ctrlp#buffertag#cmd	.vim/pack/ide/start/ctrlp/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#cmd(mode, ...)$/;"	f
ctrlp#buffertag#exit	.vim/pack/ide/start/ctrlp/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#exit()$/;"	f
ctrlp#buffertag#init	.vim/pack/ide/start/ctrlp/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#init(fname)$/;"	f
ctrlp#buffertag#opts	.vim/pack/ide/start/ctrlp/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#opts()$/;"	f
ctrlp#call	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#call(func, ...)$/;"	f
ctrlp#changes#accept	.vim/pack/ide/start/ctrlp/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#accept(mode, str)$/;"	f
ctrlp#changes#cmd	.vim/pack/ide/start/ctrlp/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#cmd(mode, ...)$/;"	f
ctrlp#changes#exit	.vim/pack/ide/start/ctrlp/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#exit()$/;"	f
ctrlp#changes#init	.vim/pack/ide/start/ctrlp/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#init(original_bufnr, bufnr)$/;"	f
ctrlp#clearmarkedlist	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#clearmarkedlist()$/;"	f
ctrlp#clr	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#clr(...)$/;"	f
ctrlp#clra	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#clra()$/;"	f
ctrlp#complen	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#complen(...)$/;"	f
ctrlp#dir#accept	.vim/pack/ide/start/ctrlp/autoload/ctrlp/dir.vim	/^fu! ctrlp#dir#accept(mode, str)$/;"	f
ctrlp#dir#id	.vim/pack/ide/start/ctrlp/autoload/ctrlp/dir.vim	/^fu! ctrlp#dir#id()$/;"	f
ctrlp#dir#init	.vim/pack/ide/start/ctrlp/autoload/ctrlp/dir.vim	/^fu! ctrlp#dir#init(...)$/;"	f
ctrlp#dirnfile	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#dirnfile(entries)$/;"	f
ctrlp#exit	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#exit()$/;"	f
ctrlp#files	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#files()$/;"	f
ctrlp#getcline	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#getcline()$/;"	f
ctrlp#getmarkedlist	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#getmarkedlist()$/;"	f
ctrlp#getvar	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#getvar(var)$/;"	f
ctrlp#hicheck	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#hicheck(grp, defgrp)$/;"	f
ctrlp#igncwd	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#igncwd(cwd)$/;"	f
ctrlp#init	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#init(type, ...)$/;"	f
ctrlp#input	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#input()$/;"	f
ctrlp#j2l	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#j2l(nr)$/;"	f
ctrlp#line#accept	.vim/pack/ide/start/ctrlp/autoload/ctrlp/line.vim	/^fu! ctrlp#line#accept(dict)$/;"	f
ctrlp#line#cmd	.vim/pack/ide/start/ctrlp/autoload/ctrlp/line.vim	/^fu! ctrlp#line#cmd(mode, ...)$/;"	f
ctrlp#line#init	.vim/pack/ide/start/ctrlp/autoload/ctrlp/line.vim	/^fu! ctrlp#line#init(bufnr)$/;"	f
ctrlp#mixed#id	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mixed.vim	/^fu! ctrlp#mixed#id()$/;"	f
ctrlp#mixed#init	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mixed.vim	/^fu! ctrlp#mixed#init(clim)$/;"	f
ctrlp#modfilecond	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#modfilecond(w)$/;"	f
ctrlp#mrufiles#add	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#add(fn)$/;"	f
ctrlp#mrufiles#bufs	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#bufs()$/;"	f
ctrlp#mrufiles#cachefile	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#cachefile()$/;"	f
ctrlp#mrufiles#init	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#init()$/;"	f
ctrlp#mrufiles#list	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#list(...)$/;"	f
ctrlp#mrufiles#opts	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#opts()$/;"	f
ctrlp#mrufiles#refresh	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#refresh(...)$/;"	f
ctrlp#mrufiles#remove	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#remove(files)$/;"	f
ctrlp#mrufiles#tgrel	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#tgrel()$/;"	f
ctrlp#normcmd	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#normcmd(cmd, ...)$/;"	f
ctrlp#nosy	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#nosy()$/;"	f
ctrlp#progress	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#progress(enum, ...)$/;"	f
ctrlp#prtclear	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#prtclear()$/;"	f
ctrlp#quickfix#accept	.vim/pack/ide/start/ctrlp/autoload/ctrlp/quickfix.vim	/^fu! ctrlp#quickfix#accept(mode, str)$/;"	f
ctrlp#quickfix#id	.vim/pack/ide/start/ctrlp/autoload/ctrlp/quickfix.vim	/^fu! ctrlp#quickfix#id()$/;"	f
ctrlp#quickfix#init	.vim/pack/ide/start/ctrlp/autoload/ctrlp/quickfix.vim	/^fu! ctrlp#quickfix#init()$/;"	f
ctrlp#recordhist	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#recordhist()$/;"	f
ctrlp#rmbasedir	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#rmbasedir(items)$/;"	f
ctrlp#rtscript#id	.vim/pack/ide/start/ctrlp/autoload/ctrlp/rtscript.vim	/^fu! ctrlp#rtscript#id()$/;"	f
ctrlp#rtscript#init	.vim/pack/ide/start/ctrlp/autoload/ctrlp/rtscript.vim	/^fu! ctrlp#rtscript#init(caching)$/;"	f
ctrlp#setdir	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#setdir(path, ...)$/;"	f
ctrlp#setlcdir	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#setlcdir()$/;"	f
ctrlp#setlines	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#setlines(...)$/;"	f
ctrlp#setpathmode	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#setpathmode(pmode, ...)$/;"	f
ctrlp#statusline	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#statusline()$/;"	f
ctrlp#switchtype	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#switchtype(id)$/;"	f
ctrlp#syntax	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#syntax()$/;"	f
ctrlp#tabcount	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#tabcount()$/;"	f
ctrlp#tag#accept	.vim/pack/ide/start/ctrlp/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#accept(mode, str)$/;"	f
ctrlp#tag#enter	.vim/pack/ide/start/ctrlp/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#enter()$/;"	f
ctrlp#tag#id	.vim/pack/ide/start/ctrlp/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#id()$/;"	f
ctrlp#tag#init	.vim/pack/ide/start/ctrlp/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#init()$/;"	f
ctrlp#undo#accept	.vim/pack/ide/start/ctrlp/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#accept(mode, str)$/;"	f
ctrlp#undo#enter	.vim/pack/ide/start/ctrlp/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#enter()$/;"	f
ctrlp#undo#exit	.vim/pack/ide/start/ctrlp/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#exit()$/;"	f
ctrlp#undo#id	.vim/pack/ide/start/ctrlp/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#id()$/;"	f
ctrlp#undo#init	.vim/pack/ide/start/ctrlp/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#init()$/;"	f
ctrlp#update	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! ctrlp#update(...)$/;"	f
ctrlp#utils#cachedir	.vim/pack/ide/start/ctrlp/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#cachedir()$/;"	f
ctrlp#utils#cachefile	.vim/pack/ide/start/ctrlp/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#cachefile(...)$/;"	f
ctrlp#utils#fnesc	.vim/pack/ide/start/ctrlp/autoload/ctrlp/utils.vim	/^		fu! ctrlp#utils#fnesc(path, type, ...)$/;"	f
ctrlp#utils#glob	.vim/pack/ide/start/ctrlp/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#glob(...)$/;"	f
ctrlp#utils#globpath	.vim/pack/ide/start/ctrlp/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#globpath(...)$/;"	f
ctrlp#utils#lash	.vim/pack/ide/start/ctrlp/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#lash()$/;"	f
ctrlp#utils#mkdir	.vim/pack/ide/start/ctrlp/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#mkdir(dir)$/;"	f
ctrlp#utils#opts	.vim/pack/ide/start/ctrlp/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#opts()$/;"	f
ctrlp#utils#readfile	.vim/pack/ide/start/ctrlp/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#readfile(file)$/;"	f
ctrlp#utils#writecache	.vim/pack/ide/start/ctrlp/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#writecache(lines, ...)$/;"	f
ctrlp.vim	.vim/pack/ide/start/ctrlp/readme.md	/^# ctrlp.vim$/;"	c
ctrlsf	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^    augroup ctrlsf$/;"	a
ctrlsf#ClearSelectedLine	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! ctrlsf#ClearSelectedLine() abort$/;"	f
ctrlsf#CurrentMode	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! ctrlsf#CurrentMode()$/;"	f
ctrlsf#Focus	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! ctrlsf#Focus() abort$/;"	f
ctrlsf#JumpTo	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! ctrlsf#JumpTo(mode) abort$/;"	f
ctrlsf#NextMatch	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! ctrlsf#NextMatch(forward, ...) abort$/;"	f
ctrlsf#Open	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! ctrlsf#Open() abort$/;"	f
ctrlsf#OpenLocList	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! ctrlsf#OpenLocList() abort$/;"	f
ctrlsf#PopulateQFList	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! ctrlsf#PopulateQFList()$/;"	f
ctrlsf#Quickfix	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! ctrlsf#Quickfix(args) abort$/;"	f
ctrlsf#Quit	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! ctrlsf#Quit() abort$/;"	f
ctrlsf#Redraw	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! ctrlsf#Redraw() abort$/;"	f
ctrlsf#Save	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! ctrlsf#Save()$/;"	f
ctrlsf#Search	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! ctrlsf#Search(args, ...) abort$/;"	f
ctrlsf#SelfCheck	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! ctrlsf#SelfCheck() abort$/;"	f
ctrlsf#StopSearch	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! ctrlsf#StopSearch()$/;"	f
ctrlsf#SwitchViewMode	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! ctrlsf#SwitchViewMode() abort$/;"	f
ctrlsf#Toggle	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! ctrlsf#Toggle() abort$/;"	f
ctrlsf#ToggleMap	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! ctrlsf#ToggleMap() abort$/;"	f
ctrlsf#Update	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! ctrlsf#Update() abort$/;"	f
ctrlsf#async#ForceStopSearch	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^func! ctrlsf#async#ForceStopSearch() abort$/;"	f
ctrlsf#async#IsCancelled	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^func! ctrlsf#async#IsCancelled() abort$/;"	f
ctrlsf#async#IsSearchDone	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^func! ctrlsf#async#IsSearchDone() abort$/;"	f
ctrlsf#async#IsSearching	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^func! ctrlsf#async#IsSearching() abort$/;"	f
ctrlsf#async#NeoVimSearchCBWrapper	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^func! ctrlsf#async#NeoVimSearchCBWrapper(job_id, data, event) abort$/;"	f
ctrlsf#async#ParseAndDrawCB	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^func! ctrlsf#async#ParseAndDrawCB(timer_id) abort$/;"	f
ctrlsf#async#Reset	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^func! ctrlsf#async#Reset() abort$/;"	f
ctrlsf#async#SearchCB	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^func! ctrlsf#async#SearchCB(channel, msg) abort$/;"	f
ctrlsf#async#SearchCloseCB	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^func! ctrlsf#async#SearchCloseCB(channel) abort$/;"	f
ctrlsf#async#SearchErrorCB	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^func! ctrlsf#async#SearchErrorCB(channel, msg) abort$/;"	f
ctrlsf#async#StartSearch	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^func! ctrlsf#async#StartSearch(command) abort$/;"	f
ctrlsf#async#StopParse	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^func! ctrlsf#async#StopParse() abort$/;"	f
ctrlsf#async#StopSearch	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^func! ctrlsf#async#StopSearch() abort$/;"	f
ctrlsf#backend#Detect	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/backend.vim	/^func! ctrlsf#backend#Detect()$/;"	f
ctrlsf#backend#LastErrors	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/backend.vim	/^func! ctrlsf#backend#LastErrors()$/;"	f
ctrlsf#backend#Run	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/backend.vim	/^func! ctrlsf#backend#Run(args) abort$/;"	f
ctrlsf#backend#RunAsync	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/backend.vim	/^func! ctrlsf#backend#RunAsync(args) abort$/;"	f
ctrlsf#backend#Runner	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/backend.vim	/^func! ctrlsf#backend#Runner()$/;"	f
ctrlsf#buf#ClearUndoHistory	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/buf.vim	/^func! ctrlsf#buf#ClearUndoHistory() abort$/;"	f
ctrlsf#buf#SetLine	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/buf.vim	/^func! ctrlsf#buf#SetLine(buf_name, lnum, content) abort$/;"	f
ctrlsf#buf#ToggleMap	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/buf.vim	/^func! ctrlsf#buf#ToggleMap(...) abort$/;"	f
ctrlsf#buf#UndoAllChanges	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/buf.vim	/^func! ctrlsf#buf#UndoAllChanges() abort$/;"	f
ctrlsf#buf#WarnIfChanged	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/buf.vim	/^func! ctrlsf#buf#WarnIfChanged() abort$/;"	f
ctrlsf#buf#WriteFile	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/buf.vim	/^func! ctrlsf#buf#WriteFile(file) abort$/;"	f
ctrlsf#buf#WriteString	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/buf.vim	/^func! ctrlsf#buf#WriteString(content) abort$/;"	f
ctrlsf#class#file#Add	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/class/file.vim	/^func! ctrlsf#class#file#Add(paragraph) abort dict$/;"	f
ctrlsf#class#file#EndVlnum	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/class/file.vim	/^func! ctrlsf#class#file#EndVlnum(...) abort dict$/;"	f
ctrlsf#class#file#FirstMatch	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/class/file.vim	/^func! ctrlsf#class#file#FirstMatch() abort dict$/;"	f
ctrlsf#class#file#New	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/class/file.vim	/^func! ctrlsf#class#file#New(fname, paragraphs) abort$/;"	f
ctrlsf#class#file#StartVlnum	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/class/file.vim	/^func! ctrlsf#class#file#StartVlnum(...) abort dict$/;"	f
ctrlsf#class#line#Matched	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/class/line.vim	/^func! ctrlsf#class#line#Matched() abort dict$/;"	f
ctrlsf#class#line#New	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/class/line.vim	/^func! ctrlsf#class#line#New(fname, lnum, content) abort$/;"	f
ctrlsf#class#line#SetViewLnum	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/class/line.vim	/^func! ctrlsf#class#line#SetViewLnum(lnum) abort dict$/;"	f
ctrlsf#class#line#Vlnum	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/class/line.vim	/^func! ctrlsf#class#line#Vlnum(...) abort dict$/;"	f
ctrlsf#class#match#New	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/class/match.vim	/^func! ctrlsf#class#match#New(fname, lnum, col, content) abort$/;"	f
ctrlsf#class#match#SetViewPosition	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/class/match.vim	/^func! ctrlsf#class#match#SetViewPosition(lnum, col, ...) abort dict$/;"	f
ctrlsf#class#match#Vcol	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/class/match.vim	/^func! ctrlsf#class#match#Vcol(...) abort dict$/;"	f
ctrlsf#class#match#Vlnum	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/class/match.vim	/^func! ctrlsf#class#match#Vlnum(...) abort dict$/;"	f
ctrlsf#class#paragraph#Lnum	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/class/paragraph.vim	/^func! ctrlsf#class#paragraph#Lnum() abort dict$/;"	f
ctrlsf#class#paragraph#Matches	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/class/paragraph.vim	/^func! ctrlsf#class#paragraph#Matches() abort dict$/;"	f
ctrlsf#class#paragraph#New	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/class/paragraph.vim	/^func! ctrlsf#class#paragraph#New(buffer) abort$/;"	f
ctrlsf#class#paragraph#Range	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/class/paragraph.vim	/^func! ctrlsf#class#paragraph#Range() abort dict$/;"	f
ctrlsf#class#paragraph#TrimTail	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/class/paragraph.vim	/^func! ctrlsf#class#paragraph#TrimTail() abort dict$/;"	f
ctrlsf#class#paragraph#Vlnum	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/class/paragraph.vim	/^func! ctrlsf#class#paragraph#Vlnum(...) abort dict$/;"	f
ctrlsf#comp#Completion	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/comp.vim	/^func! ctrlsf#comp#Completion(arglead, cmdline, cursorpos)$/;"	f
ctrlsf#db#FileResultSet	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/db.vim	/^func! ctrlsf#db#FileResultSet() abort$/;"	f
ctrlsf#db#FileResultSetBy	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/db.vim	/^func! ctrlsf#db#FileResultSetBy(resultset) abort$/;"	f
ctrlsf#db#MatchList	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/db.vim	/^func! ctrlsf#db#MatchList() abort$/;"	f
ctrlsf#db#MatchListQF	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/db.vim	/^func! ctrlsf#db#MatchListQF() abort$/;"	f
ctrlsf#db#MaxLnum	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/db.vim	/^func! ctrlsf#db#MaxLnum()$/;"	f
ctrlsf#db#ParseBackendResult	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/db.vim	/^func! ctrlsf#db#ParseBackendResult(result) abort$/;"	f
ctrlsf#db#ParseBackendResultIncr	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/db.vim	/^func! ctrlsf#db#ParseBackendResultIncr(lines, close) abort$/;"	f
ctrlsf#db#Reset	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/db.vim	/^func! ctrlsf#db#Reset() abort$/;"	f
ctrlsf#db#ResultSet	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/db.vim	/^func! ctrlsf#db#ResultSet() abort$/;"	f
ctrlsf#db#SetResultSet	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/db.vim	/^func! ctrlsf#db#SetResultSet(resultset) abort$/;"	f
ctrlsf#edit#Save	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/edit.vim	/^func! ctrlsf#edit#Save() abort$/;"	f
ctrlsf#fs#DetectFileFormat	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/fs.vim	/^func! ctrlsf#fs#DetectFileFormat(path) abort$/;"	f
ctrlsf#fs#FindProjectRoot	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/fs.vim	/^func! ctrlsf#fs#FindProjectRoot(...) abort$/;"	f
ctrlsf#hl#ClearSelectedLine	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/hl.vim	/^func! ctrlsf#hl#ClearSelectedLine() abort$/;"	f
ctrlsf#hl#HighlightMatch	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/hl.vim	/^func! ctrlsf#hl#HighlightMatch(...) abort$/;"	f
ctrlsf#hl#HighlightSelectedLine	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/hl.vim	/^func! ctrlsf#hl#HighlightSelectedLine() abort$/;"	f
ctrlsf#hl#ReloadSyntax	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/hl.vim	/^func! ctrlsf#hl#ReloadSyntax() abort$/;"	f
ctrlsf#lex#Tokenize	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/lex.vim	/^func! ctrlsf#lex#Tokenize(options_str) abort$/;"	f
ctrlsf#log#Clear	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/log.vim	/^func! ctrlsf#log#Clear() abort$/;"	f
ctrlsf#log#Debug	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/log.vim	/^func! ctrlsf#log#Debug(format, ...) abort$/;"	f
ctrlsf#log#Error	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/log.vim	/^func! ctrlsf#log#Error(format, ...) abort$/;"	f
ctrlsf#log#Info	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/log.vim	/^func! ctrlsf#log#Info(format, ...) abort$/;"	f
ctrlsf#log#Notice	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/log.vim	/^func! ctrlsf#log#Notice(format, ...) abort$/;"	f
ctrlsf#log#Warn	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/log.vim	/^func! ctrlsf#log#Warn(format, ...) abort$/;"	f
ctrlsf#opt#AutoClose	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/opt.vim	/^func! ctrlsf#opt#AutoClose() abort$/;"	f
ctrlsf#opt#GetCaseSensitive	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/opt.vim	/^func! ctrlsf#opt#GetCaseSensitive() abort$/;"	f
ctrlsf#opt#GetContext	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/opt.vim	/^func! ctrlsf#opt#GetContext() abort$/;"	f
ctrlsf#opt#GetIgnoreDir	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/opt.vim	/^func! ctrlsf#opt#GetIgnoreDir() abort$/;"	f
ctrlsf#opt#GetOpt	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/opt.vim	/^func! ctrlsf#opt#GetOpt(name) abort$/;"	f
ctrlsf#opt#GetPath	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/opt.vim	/^func! ctrlsf#opt#GetPath() abort$/;"	f
ctrlsf#opt#GetRegex	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/opt.vim	/^func! ctrlsf#opt#GetRegex() abort$/;"	f
ctrlsf#opt#HasOpt	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/opt.vim	/^func! ctrlsf#opt#HasOpt(name) abort$/;"	f
ctrlsf#opt#OptionNames	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/opt.vim	/^func! ctrlsf#opt#OptionNames() abort$/;"	f
ctrlsf#opt#ParseOptions	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/opt.vim	/^func! ctrlsf#opt#ParseOptions(options_str) abort$/;"	f
ctrlsf#opt#Reset	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/opt.vim	/^func! ctrlsf#opt#Reset() abort$/;"	f
ctrlsf#pat#HighlightRegex	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/pat.vim	/^func! ctrlsf#pat#HighlightRegex(vmode) abort$/;"	f
ctrlsf#pat#MatchPerLineRegex	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/pat.vim	/^func! ctrlsf#pat#MatchPerLineRegex(vmode, ...) abort$/;"	f
ctrlsf#pat#Regex	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/pat.vim	/^func! ctrlsf#pat#Regex() abort$/;"	f
ctrlsf#preview#ClosePreviewWindow	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/preview.vim	/^func! ctrlsf#preview#ClosePreviewWindow() abort$/;"	f
ctrlsf#preview#FindPreviewWindow	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/preview.vim	/^func! ctrlsf#preview#FindPreviewWindow() abort$/;"	f
ctrlsf#preview#FocusPreviewWindow	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/preview.vim	/^func! ctrlsf#preview#FocusPreviewWindow() abort$/;"	f
ctrlsf#preview#OpenPreviewWindow	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/preview.vim	/^func! ctrlsf#preview#OpenPreviewWindow() abort$/;"	f
ctrlsf#profile#Report	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/profile.vim	/^func! ctrlsf#profile#Report() abort$/;"	f
ctrlsf#profile#Reset	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/profile.vim	/^func! ctrlsf#profile#Reset() abort$/;"	f
ctrlsf#profile#Sample	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/profile.vim	/^func! ctrlsf#profile#Sample(name) abort$/;"	f
ctrlsf#utils#Mirror	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/utils.vim	/^func! ctrlsf#utils#Mirror(dicta, dictb) abort$/;"	f
ctrlsf#utils#Nmap	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/utils.vim	/^func! ctrlsf#utils#Nmap(map, act_func_ref) abort$/;"	f
ctrlsf#utils#Nunmap	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/utils.vim	/^func! ctrlsf#utils#Nunmap(map, act_func_ref) abort$/;"	f
ctrlsf#utils#PreviewSectionC	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/utils.vim	/^func! ctrlsf#utils#PreviewSectionC()$/;"	f
ctrlsf#utils#Quote	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/utils.vim	/^func! ctrlsf#utils#Quote(str) abort$/;"	f
ctrlsf#utils#SectionB	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/utils.vim	/^func! ctrlsf#utils#SectionB()$/;"	f
ctrlsf#utils#SectionC	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/utils.vim	/^func! ctrlsf#utils#SectionC()$/;"	f
ctrlsf#utils#SectionX	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/utils.vim	/^func! ctrlsf#utils#SectionX()$/;"	f
ctrlsf#utils#ShellEscape	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/utils.vim	/^func! ctrlsf#utils#ShellEscape(str) abort$/;"	f
ctrlsf#view#FindNextMatch	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^func! ctrlsf#view#FindNextMatch(forward, wrapscan, ...) abort$/;"	f
ctrlsf#view#Indent	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^func! ctrlsf#view#Indent() abort$/;"	f
ctrlsf#view#Locate	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^func! ctrlsf#view#Locate(vlnum) abort$/;"	f
ctrlsf#view#Render	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^func! ctrlsf#view#Render() abort$/;"	f
ctrlsf#view#RenderIncr	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^func! ctrlsf#view#RenderIncr(base_vlnum) abort$/;"	f
ctrlsf#view#RenderSummary	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^func! ctrlsf#view#RenderSummary() abort$/;"	f
ctrlsf#view#Reset	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^func! ctrlsf#view#Reset() abort$/;"	f
ctrlsf#view#Unrender	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^func! ctrlsf#view#Unrender(content) abort$/;"	f
ctrlsf#win#BackupAllWinSize	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! ctrlsf#win#BackupAllWinSize()$/;"	f
ctrlsf#win#CloseMainWindow	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! ctrlsf#win#CloseMainWindow() abort$/;"	f
ctrlsf#win#Draw	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! ctrlsf#win#Draw() abort$/;"	f
ctrlsf#win#DrawIncr	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! ctrlsf#win#DrawIncr() abort$/;"	f
ctrlsf#win#FindCallerWindow	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! ctrlsf#win#FindCallerWindow() abort$/;"	f
ctrlsf#win#FindMainWindow	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! ctrlsf#win#FindMainWindow() abort$/;"	f
ctrlsf#win#FindTargetWindow	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! ctrlsf#win#FindTargetWindow(file) abort$/;"	f
ctrlsf#win#FindWindow	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! ctrlsf#win#FindWindow(buf_name) abort$/;"	f
ctrlsf#win#FocusCallerWindow	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! ctrlsf#win#FocusCallerWindow() abort$/;"	f
ctrlsf#win#FocusFirstMatch	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! ctrlsf#win#FocusFirstMatch() abort$/;"	f
ctrlsf#win#FocusMainWindow	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! ctrlsf#win#FocusMainWindow() abort$/;"	f
ctrlsf#win#FocusWindow	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! ctrlsf#win#FocusWindow(exp) abort$/;"	f
ctrlsf#win#InMainWindow	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! ctrlsf#win#InMainWindow() abort$/;"	f
ctrlsf#win#InWindow	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! ctrlsf#win#InWindow(buf_name) abort$/;"	f
ctrlsf#win#MoveCursor	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! ctrlsf#win#MoveCursor(wlnum, lnum, col) abort$/;"	f
ctrlsf#win#MoveCursorCentral	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! ctrlsf#win#MoveCursorCentral(lnum, col) abort$/;"	f
ctrlsf#win#MoveCursorCurrentLineMatch	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! ctrlsf#win#MoveCursorCurrentLineMatch() abort$/;"	f
ctrlsf#win#OpenMainWindow	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! ctrlsf#win#OpenMainWindow() abort$/;"	f
ctrlsf#win#Reset	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! ctrlsf#win#Reset() abort$/;"	f
ctrlsf#win#RestoreAllWinSize	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! ctrlsf#win#RestoreAllWinSize()$/;"	f
ctrlsf#win#SetModifiableByViewMode	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! ctrlsf#win#SetModifiableByViewMode(modifiable) abort$/;"	f
ctrlsf.vim	.vim/pack/ide/opt/ctrlsf/README.md	/^# ctrlsf.vim$/;"	c
ctrlsfp	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/preview.vim	/^    augroup ctrlsfp$/;"	a
d.Continue	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.Continue()$/;"	f
d.CurrentItem	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.CurrentItem()$/;"	f
d.DoContinue	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.DoContinue(v)$/;"	f
d.FilterFromKeyboard	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.FilterFromKeyboard(keep, start, ...)$/;"	f
d.FilterItem	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.FilterItem(items, filter, cursorAt)$/;"	f
d.FilteredItems	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.FilteredItems()$/;"	f
d.HelpText	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.HelpText()$/;"	f
d.MapToOriginal	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.MapToOriginal(v)$/;"	f
d.NewBufferAndInit	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.NewBufferAndInit()$/;"	f
d.RemoveFilters	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.RemoveFilters()$/;"	f
d.SelectByIdOrFilter	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.SelectByIdOrFilter()$/;"	f
d.ShowAppliedFilters	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.ShowAppliedFilters()$/;"	f
d.ToggleAlignment	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.ToggleAlignment()$/;"	f
d.UpdateDisplay	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.UpdateDisplay()$/;"	f
def	.vim/pack/ide/start/yajs/data/p.js	/^  var def = '';$/;"	v
defs	.vim/pack/ide/start/yajs/data/p.js	/^  var defs = [];$/;"	v
dep_from_git	.vim/pack/ide/start/yajs/Makefile	/^dep_from_git = \\$/;"	m
dep_from_svn	.vim/pack/ide/start/yajs/Makefile	/^dep_from_svn = \\$/;"	m
dependencies	.vim/pack/ide/start/tcomment/addon-info.json	/^    "dependencies" : {},$/;"	o
dependencies	.vim/pack/ide/start/tlib/addon-info.json	/^    "dependencies" : {},$/;"	o
description	.vim/pack/ide/start/tcomment/addon-info.json	/^    "description" : "An easily extensible & universal comment plugin"$/;"	s
description	.vim/pack/ide/start/tlib/addon-info.json	/^    "description" : "tlib -- A library of vim functions"$/;"	s
description	.vim/pack/ide/start/yajs/package.json	/^    "description": "Yet another JavaScript syntax for Vim",$/;"	s
devDependencies	.vim/pack/ide/start/yajs/package.json	/^    "devDependencies": {$/;"	o
did_gnuplot_syntax_inits	.vim/syntax/gnuplot.vim	/^    let did_gnuplot_syntax_inits = 1$/;"	v
did_javascript_hilink	.vim/pack/ide/start/yajs/syntax/javascript.vim	/^  let did_javascript_hilink = 1$/;"	v
did_javascript_syn_inits	.vim/pack/ide/start/yajs/syntax/javascript.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_jinja_syn_inits	.vim/syntax/jinja.vim	/^    let did_jinja_syn_inits = 1$/;"	v
dist	.vim/pack/ide/start/yajs/Makefile	/^dist: bundle mkfilelist$/;"	t
ds	.vim/pack/ide/start/surround/plugin/surround.vim	/^  nmap ds  <Plug>Dsurround$/;"	m
env_reload#ReloadEnv	.vim/pack/ide/start/addon-mw-utils/autoload/env_reload.vim	/^fun! env_reload#ReloadEnv(bash_export_command_output)$/;"	f
environment	.vim/pack/ide/start/airline/.github/ISSUE_TEMPLATE.md	/^#### environment$/;"	t
erlangmk_file	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_file(Dir) -> filename:join(Dir, "erlang.mk").$/;"	f
erlangmk_format_erl_libs	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erl_libs(ErlLibsLine) ->$/;"	f
erlangmk_format_erlc_opts	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(ErlcOptsLines, BaseDir) ->$/;"	f
erlangmk_format_erlc_opts	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(["+" ++ Option | Rest], Opts, BaseDir) ->$/;"	f
erlangmk_format_erlc_opts	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(["-D" ++ Opt | Rest], Opts, BaseDir)$/;"	f
erlangmk_format_erlc_opts	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(["-D", [C | _] = Val0 | Rest], Opts, BaseDir)$/;"	f
erlangmk_format_erlc_opts	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(["-I" ++ Opt | Rest], Opts, BaseDir)$/;"	f
erlangmk_format_erlc_opts	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(["-I", [C | _] = Dir | Rest], Opts, BaseDir)$/;"	f
erlangmk_format_erlc_opts	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(["-W" ++ Warn | Rest], Opts, BaseDir)$/;"	f
erlangmk_format_erlc_opts	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(["-W", Warn | Rest], Opts, BaseDir) ->$/;"	f
erlangmk_format_erlc_opts	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts([PathFlag, [_ | _] = Dir | Rest], Opts, BaseDir)$/;"	f
erlangmk_format_erlc_opts	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts([], Opts, _) ->$/;"	f
erlangmk_format_erlc_opts	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts([_ | Rest], Opts, BaseDir) ->$/;"	f
erlangmk_format_opts	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_opts(Stdout, BaseDir) ->$/;"	f
erlangmk_opts	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_opts(BaseDir, Profile) ->$/;"	f
erlangmk_port_receive_loop	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_port_receive_loop(Port, Stdout, BaseDir) ->$/;"	f
expected behavior	.vim/pack/ide/start/airline/.github/ISSUE_TEMPLATE.md	/^#### expected behavior$/;"	t
f	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^    noremap <buffer> f :call b:filtered_view.FilterFromKeyboard(1,'')<cr>$/;"	m
fallback_opts	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^fallback_opts() ->$/;"	f
fetch_github	.vim/pack/ide/start/yajs/Makefile	/^fetch_github = \\$/;"	m
fetch_local	.vim/pack/ide/start/yajs/Makefile	/^fetch_local = @cp -v $(1) $(2) \\$/;"	m
fetch_url	.vim/pack/ide/start/yajs/Makefile	/^fetch_url = \\$/;"	m
file	.vim/pack/ide/start/yajs/data/p.js	/^  var file = process.argv[2];$/;"	v
fs	.vim/pack/ide/start/syntastic/syntax_checkers/less/less-lint.js	/^  var args, fs, less, options, parser;$/;"	v
fs	.vim/pack/ide/start/yajs/data/p.js	/^var fs      = require('fs');$/;"	v
fugitive	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^augroup fugitive$/;"	a
fugitive#Autowrite	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Autowrite() abort$/;"	f
fugitive#BlameComplete	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#BlameComplete(A, L, P) abort$/;"	f
fugitive#BlameFileType	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#BlameFileType() abort$/;"	f
fugitive#BlameSyntax	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#BlameSyntax() abort$/;"	f
fugitive#BrowseCommand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#BrowseCommand(line1, count, range, bang, mods, arg, ...) abort$/;"	f
fugitive#BufReadCmd	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#BufReadCmd(...) abort$/;"	f
fugitive#BufReadStatus	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#BufReadStatus() abort$/;"	f
fugitive#BufWriteCmd	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#BufWriteCmd(...) abort$/;"	f
fugitive#CanDiffoff	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#CanDiffoff(buf) abort$/;"	f
fugitive#Cd	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Cd(path, ...) abort$/;"	f
fugitive#CdComplete	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#CdComplete(A, L, P) abort$/;"	f
fugitive#Cfile	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Cfile() abort$/;"	f
fugitive#Command	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Command(line1, line2, range, bang, mods, arg) abort$/;"	f
fugitive#CommitComplete	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#CommitComplete(A, L, P, ...) abort$/;"	f
fugitive#CommonDir	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#CommonDir(dir) abort$/;"	f
fugitive#Complete	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Complete(lead, ...) abort$/;"	f
fugitive#CompleteForWorkingDir	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#CompleteForWorkingDir(A, L, P, ...) abort$/;"	f
fugitive#CompleteObject	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#CompleteObject(base, ...) abort$/;"	f
fugitive#CompletePath	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#CompletePath(base, ...) abort$/;"	f
fugitive#Config	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Config(...) abort$/;"	f
fugitive#ConfigGetAll	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#ConfigGetAll(name, ...) abort$/;"	f
fugitive#ConfigGetRegexp	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#ConfigGetRegexp(pattern, ...) abort$/;"	f
fugitive#Cwindow	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Cwindow() abort$/;"	f
fugitive#DeleteCommand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#DeleteCommand(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#DidChange	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#DidChange(...) abort$/;"	f
fugitive#DiffClose	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#DiffClose() abort$/;"	f
fugitive#Diffsplit	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Diffsplit(autodir, keepfocus, mods, arg, ...) abort$/;"	f
fugitive#EditComplete	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#EditComplete(A, L, P) abort$/;"	f
fugitive#EfmDir	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#EfmDir(...) abort$/;"	f
fugitive#Execute	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Execute(...) abort$/;"	f
fugitive#Expand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Expand(object) abort$/;"	f
fugitive#ExpireConfig	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#ExpireConfig(...) abort$/;"	f
fugitive#FetchComplete	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#FetchComplete(A, L, P, ...) abort$/;"	f
fugitive#FileReadCmd	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#FileReadCmd(...) abort$/;"	f
fugitive#FileWriteCmd	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#FileWriteCmd(...) abort$/;"	f
fugitive#Find	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Find(object, ...) abort$/;"	f
fugitive#Foldtext	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Foldtext() abort$/;"	f
fugitive#GX	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#GX() abort$/;"	f
fugitive#GitVersion	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#GitVersion(...) abort$/;"	f
fugitive#GrepCommand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#GrepCommand(line1, line2, range, bang, mods, arg) abort$/;"	f
fugitive#GrepComplete	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#GrepComplete(A, L, P) abort$/;"	f
fugitive#Head	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Head(...) abort$/;"	f
fugitive#Init	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Init() abort$/;"	f
fugitive#LogCommand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#LogCommand(line1, count, range, bang, mods, args, type) abort$/;"	f
fugitive#LogComplete	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#LogComplete(A, L, P) abort$/;"	f
fugitive#MapCfile	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#MapCfile(...) abort$/;"	f
fugitive#MapJumps	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#MapJumps(...) abort$/;"	f
fugitive#MergeComplete	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#MergeComplete(A, L, P, ...) abort$/;"	f
fugitive#MessageCfile	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#MessageCfile() abort$/;"	f
fugitive#MoveCommand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#MoveCommand(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#Object	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Object(...) abort$/;"	f
fugitive#Open	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Open(cmd, bang, mods, arg, ...) abort$/;"	f
fugitive#PagerFor	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#PagerFor(argv, ...) abort$/;"	f
fugitive#Path	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Path(url, ...) abort$/;"	f
fugitive#PathComplete	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#PathComplete(...) abort$/;"	f
fugitive#PorcelainCfile	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#PorcelainCfile() abort$/;"	f
fugitive#Prepare	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Prepare(...) abort$/;"	f
fugitive#PrepareDirEnvGitFlagsArgs	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#PrepareDirEnvGitFlagsArgs(...) abort$/;"	f
fugitive#PrepareJob	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#PrepareJob(...) abort$/;"	f
fugitive#PullComplete	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#PullComplete(A, L, P, ...) abort$/;"	f
fugitive#PushComplete	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#PushComplete(A, L, P, ...) abort$/;"	f
fugitive#ReadCommand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#ReadCommand(line1, count, range, bang, mods, arg, ...) abort$/;"	f
fugitive#ReadComplete	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#ReadComplete(A, L, P) abort$/;"	f
fugitive#Real	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Real(url) abort$/;"	f
fugitive#RebaseComplete	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#RebaseComplete(A, L, P, ...) abort$/;"	f
fugitive#ReloadStatus	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#ReloadStatus(...) abort$/;"	f
fugitive#RemoteHttpHeaders	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#RemoteHttpHeaders(remote) abort$/;"	f
fugitive#RemoteUrl	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#RemoteUrl(...) abort$/;"	f
fugitive#RemoveCommand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#RemoveCommand(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#RenameCommand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#RenameCommand(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#RenameComplete	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#RenameComplete(A,L,P) abort$/;"	f
fugitive#ResolveRemote	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#ResolveRemote(remote) abort$/;"	f
fugitive#Result	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Result(...) abort$/;"	f
fugitive#Resume	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Resume() abort$/;"	f
fugitive#RevParse	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#RevParse(rev, ...) abort$/;"	f
fugitive#RevertComplete	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#RevertComplete(A, L, P, ...) abort$/;"	f
fugitive#ShellCommand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#ShellCommand(...) abort$/;"	f
fugitive#SourceCmd	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#SourceCmd(...) abort$/;"	f
fugitive#SshConfig	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#SshConfig(host, ...) abort$/;"	f
fugitive#SshHostAlias	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#SshHostAlias(authority) abort$/;"	f
fugitive#Statusline	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Statusline(...) abort$/;"	f
fugitive#Wait	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Wait(job_or_jobs, ...) abort$/;"	f
fugitive#WqCommand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#WqCommand(...) abort$/;"	f
fugitive#WriteCommand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#WriteCommand(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#buffer	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#buffer(...) abort$/;"	f
fugitive#delete	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#delete(url, ...) abort$/;"	f
fugitive#detect	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#detect(path) abort$/;"	f
fugitive#extract_git_dir	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#extract_git_dir(path) abort$/;"	f
fugitive#filereadable	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#filereadable(url) abort$/;"	f
fugitive#filewritable	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#filewritable(url) abort$/;"	f
fugitive#foldtext	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#foldtext() abort$/;"	f
fugitive#getfperm	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#getfperm(url) abort$/;"	f
fugitive#getfsize	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#getfsize(url) abort$/;"	f
fugitive#getftime	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#getftime(url) abort$/;"	f
fugitive#getftype	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#getftype(url) abort$/;"	f
fugitive#glob	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#glob(url, ...) abort$/;"	f
fugitive#head	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#head(...) abort$/;"	f
fugitive#is_git_dir	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#is_git_dir(path) abort$/;"	f
fugitive#isdirectory	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#isdirectory(url) abort$/;"	f
fugitive#readfile	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#readfile(url, ...) abort$/;"	f
fugitive#repo	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#repo(...) abort$/;"	f
fugitive#resolve	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#resolve(url) abort$/;"	f
fugitive#setfperm	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#setfperm(url, perm) abort$/;"	f
fugitive#simplify	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#simplify(url) abort$/;"	f
fugitive#statusline	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#statusline(...) abort$/;"	f
fugitive#writefile	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! fugitive#writefile(lines, url, ...) abort$/;"	f
fugitive.vim	.vim/pack/ide/start/fugitive/README.markdown	/^# fugitive.vim$/;"	c
fugitive_blame	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^augroup fugitive_blame$/;"	a
fugitive_diff	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^augroup fugitive_diff$/;"	a
fugitive_dummy_events	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^augroup fugitive_dummy_events$/;"	a
fugitive_job	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^augroup fugitive_job$/;"	a
fugitive_status	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^augroup fugitive_status$/;"	a
fugitive_temp	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^augroup fugitive_temp$/;"	a
funcref#Call	.vim/pack/ide/start/addon-mw-utils/autoload/funcref.vim	/^function! funcref#Call(...)$/;"	f
funcref#Function	.vim/pack/ide/start/addon-mw-utils/autoload/funcref.vim	/^function! funcref#Function(name,...)$/;"	f
g:	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^            let g:[newname] = g:[key]$/;"	v
g:BufKillActionWhenBufferDisplayedInAnotherWindow	.vim/plugin/bufkill.vim	/^  let g:BufKillActionWhenBufferDisplayedInAnotherWindow = 'confirm'$/;"	v
g:BufKillCommandPrefix	.vim/plugin/bufkill.vim	/^  let g:BufKillCommandPrefix = 'B'$/;"	v
g:BufKillCreateMappings	.vim/plugin/bufkill.vim	/^  let g:BufKillCreateMappings = 1$/;"	v
g:BufKillFunctionSelectingValidBuffersToDisplay	.vim/plugin/bufkill.vim	/^  let g:BufKillFunctionSelectingValidBuffersToDisplay = 'buflisted'$/;"	v
g:BufKillOverrideCtrlCaret	.vim/plugin/bufkill.vim	/^  let g:BufKillOverrideCtrlCaret = 0$/;"	v
g:BufKillVerbose	.vim/plugin/bufkill.vim	/^  let g:BufKillVerbose = 1$/;"	v
g:CtrlSpaceStatuslineFunction	.vim/pack/ide/start/airline/autoload/airline/extensions/ctrlspace.vim	/^  let g:CtrlSpaceStatuslineFunction = "airline#extensions#ctrlspace#statusline()"$/;"	v
g:NERDDelimiterMap	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^let g:NERDDelimiterMap = s:delimiterMap$/;"	v
g:NERDTree	.vim/pack/ide/start/nerdtree/lib/nerdtree/nerdtree.vim	/^let g:NERDTree = s:NERDTree$/;"	v
g:NERDTreeAutoCenter	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeAutoCenter            = get(g:, 'NERDTreeAutoCenter',            1)$/;"	v
g:NERDTreeAutoCenterThreshold	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeAutoCenterThreshold   = get(g:, 'NERDTreeAutoCenterThreshold',   3)$/;"	v
g:NERDTreeAutoDeleteBuffer	.vim/pack/ide/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^    let g:NERDTreeAutoDeleteBuffer = 0$/;"	v
g:NERDTreeBookmark	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeBookmarks	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^        let g:NERDTreeBookmarks = []$/;"	v
g:NERDTreeBookmarksFile	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeBookmarksFile         = get(g:, 'NERDTreeBookmarksFile',         expand('$HOME') ./;"	v
g:NERDTreeBookmarksSort	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeBookmarksSort         = get(g:, 'NERDTreeBookmarksSort',         1)$/;"	v
g:NERDTreeCascadeOpenSingleChildDir	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCascadeOpenSingleChildDir = get(g:, 'NERDTreeCascadeOpenSingleChildDir', 1)$/;"	v
g:NERDTreeCascadeSingleChildDir	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCascadeSingleChildDir     = get(g:, 'NERDTreeCascadeSingleChildDir',     1)$/;"	v
g:NERDTreeCaseSensitiveSort	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCaseSensitiveSort     = get(g:, 'NERDTreeCaseSensitiveSort',     0)$/;"	v
g:NERDTreeChDirMode	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeChDirMode             = get(g:, 'NERDTreeChDirMode',             0)$/;"	v
g:NERDTreeCopyCmd	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyCmd      = get(g:, 'NERDTreeCopyCmd',      'cp -r ')$/;"	v
g:NERDTreeCopyDirCmd	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyDirCmd   = get(g:, 'NERDTreeCopyDirCmd',   'xcopy \/s \/e \/i \/y \/q ')$/;"	v
g:NERDTreeCopyFileCmd	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyFileCmd  = get(g:, 'NERDTreeCopyFileCmd',  'copy \/y ')$/;"	v
g:NERDTreeCreatePrefix	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCreatePrefix          = get(g:, 'NERDTreeCreatePrefix',          'silent')$/;"	v
g:NERDTreeCreator	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^let g:NERDTreeCreator = s:Creator$/;"	v
g:NERDTreeCustomOpenArgs	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^        let g:NERDTreeCustomOpenArgs = get(g:, 'NERDTreeCustomOpenArgs', {})$/;"	v
g:NERDTreeCustomOpenArgs	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^        let g:NERDTreeCustomOpenArgs = l:defaultOpenArgs$/;"	v
g:NERDTreeDirArrowCollapsible	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowCollapsible = get(g:, 'NERDTreeDirArrowCollapsible', '~')$/;"	v
g:NERDTreeDirArrowCollapsible	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowCollapsible = get(g:, 'NERDTreeDirArrowCollapsible', '▾')$/;"	v
g:NERDTreeDirArrowExpandable	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowExpandable  = get(g:, 'NERDTreeDirArrowExpandable',  '+')$/;"	v
g:NERDTreeDirArrowExpandable	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowExpandable  = get(g:, 'NERDTreeDirArrowExpandable',  '▸')$/;"	v
g:NERDTreeDirNode	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeEvent	.vim/pack/ide/start/nerdtree/lib/nerdtree/event.vim	/^let g:NERDTreeEvent = s:Event$/;"	v
g:NERDTreeFileNode	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeFlagSet	.vim/pack/ide/start/nerdtree/lib/nerdtree/flag_set.vim	/^let g:NERDTreeFlagSet = s:FlagSet$/;"	v
g:NERDTreeGlyphReadOnly	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeGlyphReadOnly = get(g:, 'NERDTreeGlyphReadOnly', 'RO')$/;"	v
g:NERDTreeHighlightCursorline	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeHighlightCursorline   = get(g:, 'NERDTreeHighlightCursorline',   1)$/;"	v
g:NERDTreeHijackNetrw	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeHijackNetrw           = get(g:, 'NERDTreeHijackNetrw',           1)$/;"	v
g:NERDTreeIgnore	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeIgnore                = get(g:, 'NERDTreeIgnore',                ['\\~$'])$/;"	v
g:NERDTreeInvalidBookmarks	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^        let g:NERDTreeInvalidBookmarks = []$/;"	v
g:NERDTreeKeyMap	.vim/pack/ide/start/nerdtree/lib/nerdtree/key_map.vim	/^let g:NERDTreeKeyMap = s:KeyMap$/;"	v
g:NERDTreeMapActivateNode	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapActivateNode    = get(g:, 'NERDTreeMapActivateNode',    'o')$/;"	v
g:NERDTreeMapCWD	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCWD             = get(g:, 'NERDTreeMapCWD',             'CD')$/;"	v
g:NERDTreeMapChangeRoot	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapChangeRoot      = get(g:, 'NERDTreeMapChangeRoot',      'C')$/;"	v
g:NERDTreeMapChdir	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapChdir           = get(g:, 'NERDTreeMapChdir',           'cd')$/;"	v
g:NERDTreeMapCloseChildren	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCloseChildren   = get(g:, 'NERDTreeMapCloseChildren',   'X')$/;"	v
g:NERDTreeMapCloseDir	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCloseDir        = get(g:, 'NERDTreeMapCloseDir',        'x')$/;"	v
g:NERDTreeMapCustomOpen	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCustomOpen      = get(g:, 'NERDTreeMapCustomOpen',      '<CR>')$/;"	v
g:NERDTreeMapDeleteBookmark	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapDeleteBookmark  = get(g:, 'NERDTreeMapDeleteBookmark',  'D')$/;"	v
g:NERDTreeMapHelp	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapHelp            = get(g:, 'NERDTreeMapHelp',            '?')$/;"	v
g:NERDTreeMapJumpFirstChild	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpFirstChild  = get(g:, 'NERDTreeMapJumpFirstChild',  'K')$/;"	v
g:NERDTreeMapJumpLastChild	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpLastChild   = get(g:, 'NERDTreeMapJumpLastChild',   'J')$/;"	v
g:NERDTreeMapJumpNextSibling	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpNextSibling = get(g:, 'NERDTreeMapJumpNextSibling', '<C-j>')$/;"	v
g:NERDTreeMapJumpParent	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpParent      = get(g:, 'NERDTreeMapJumpParent',      'p')$/;"	v
g:NERDTreeMapJumpPrevSibling	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpPrevSibling = get(g:, 'NERDTreeMapJumpPrevSibling', '<C-k>')$/;"	v
g:NERDTreeMapJumpRoot	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpRoot        = get(g:, 'NERDTreeMapJumpRoot',        'P')$/;"	v
g:NERDTreeMapMenu	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapMenu            = get(g:, 'NERDTreeMapMenu',            'm')$/;"	v
g:NERDTreeMapOpenExpl	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenExpl        = get(g:, 'NERDTreeMapOpenExpl',        'e')$/;"	v
g:NERDTreeMapOpenInTab	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenInTab       = get(g:, 'NERDTreeMapOpenInTab',       't')$/;"	v
g:NERDTreeMapOpenInTabSilent	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenInTabSilent = get(g:, 'NERDTreeMapOpenInTabSilent', 'T')$/;"	v
g:NERDTreeMapOpenRecursively	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenRecursively = get(g:, 'NERDTreeMapOpenRecursively', 'O')$/;"	v
g:NERDTreeMapOpenSplit	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenSplit       = get(g:, 'NERDTreeMapOpenSplit',       'i')$/;"	v
g:NERDTreeMapOpenVSplit	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenVSplit      = get(g:, 'NERDTreeMapOpenVSplit',      's')$/;"	v
g:NERDTreeMapPreview	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreview         = get(g:, 'NERDTreeMapPreview',         'g'.NERDTreeMapActivate/;"	v
g:NERDTreeMapPreviewSplit	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreviewSplit    = get(g:, 'NERDTreeMapPreviewSplit',    'g'.NERDTreeMapOpenSpli/;"	v
g:NERDTreeMapPreviewVSplit	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreviewVSplit   = get(g:, 'NERDTreeMapPreviewVSplit',   'g'.NERDTreeMapOpenVSpl/;"	v
g:NERDTreeMapQuit	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapQuit            = get(g:, 'NERDTreeMapQuit',            'q')$/;"	v
g:NERDTreeMapRefresh	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapRefresh         = get(g:, 'NERDTreeMapRefresh',         'r')$/;"	v
g:NERDTreeMapRefreshRoot	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapRefreshRoot     = get(g:, 'NERDTreeMapRefreshRoot',     'R')$/;"	v
g:NERDTreeMapToggleBookmarks	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleBookmarks = get(g:, 'NERDTreeMapToggleBookmarks', 'B')$/;"	v
g:NERDTreeMapToggleFiles	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleFiles     = get(g:, 'NERDTreeMapToggleFiles',     'F')$/;"	v
g:NERDTreeMapToggleFilters	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleFilters   = get(g:, 'NERDTreeMapToggleFilters',   'f')$/;"	v
g:NERDTreeMapToggleHidden	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleHidden    = get(g:, 'NERDTreeMapToggleHidden',    'I')$/;"	v
g:NERDTreeMapToggleZoom	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleZoom      = get(g:, 'NERDTreeMapToggleZoom',      'A')$/;"	v
g:NERDTreeMapUpdir	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapUpdir           = get(g:, 'NERDTreeMapUpdir',           'u')$/;"	v
g:NERDTreeMapUpdirKeepOpen	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapUpdirKeepOpen   = get(g:, 'NERDTreeMapUpdirKeepOpen',   'U')$/;"	v
g:NERDTreeMarkBookmarks	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMarkBookmarks         = get(g:, 'NERDTreeMarkBookmarks',         1)$/;"	v
g:NERDTreeMenuController	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_controller.vim	/^let g:NERDTreeMenuController = s:MenuController$/;"	v
g:NERDTreeMenuDown	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMenuDown           = get(g:, 'NERDTreeMenuDown',           'j')$/;"	v
g:NERDTreeMenuItem	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_item.vim	/^let g:NERDTreeMenuItem = s:MenuItem$/;"	v
g:NERDTreeMenuUp	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMenuUp             = get(g:, 'NERDTreeMenuUp',             'k')$/;"	v
g:NERDTreeMinimalMenu	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMinimalMenu           = get(g:, 'NERDTreeMinimalMenu',           0)$/;"	v
g:NERDTreeMinimalUI	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMinimalUI             = get(g:, 'NERDTreeMinimalUI',             0)$/;"	v
g:NERDTreeMouseMode	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMouseMode             = get(g:, 'NERDTreeMouseMode',             1)$/;"	v
g:NERDTreeNaturalSort	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeNaturalSort           = get(g:, 'NERDTreeNaturalSort',           0)$/;"	v
g:NERDTreeNodeDelimiter	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\u00a0")$/;"	v
g:NERDTreeNodeDelimiter	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\u00b7")$/;"	v
g:NERDTreeNodeDelimiter	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\x07")$/;"	v
g:NERDTreeNotificationThreshold	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeNotificationThreshold = get(g:, 'NERDTreeNotificationThreshold', 100)$/;"	v
g:NERDTreeOldSortOrder	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^    let g:NERDTreeOldSortOrder = g:NERDTreeSortOrder$/;"	v
g:NERDTreeOldSortOrder	.vim/pack/ide/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^                let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOldSortOrder	.vim/pack/ide/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^        let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOldSortOrder	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOpener	.vim/pack/ide/start/nerdtree/lib/nerdtree/opener.vim	/^let g:NERDTreeOpener = s:Opener$/;"	v
g:NERDTreePath	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreePathNotifier	.vim/pack/ide/start/nerdtree/lib/nerdtree/notifier.vim	/^let g:NERDTreePathNotifier = deepcopy(s:Notifier)$/;"	v
g:NERDTreeQuitOnOpen	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeQuitOnOpen            = get(g:, 'NERDTreeQuitOnOpen',            0)$/;"	v
g:NERDTreeRemoveDirCmd	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeRemoveDirCmd = get(g:, 'NERDTreeRemoveDirCmd', 'rm -rf ')$/;"	v
g:NERDTreeRemoveDirCmd	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeRemoveDirCmd = get(g:, 'NERDTreeRemoveDirCmd', 'rmdir \/s \/q ')$/;"	v
g:NERDTreeRespectWildIgnore	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeRespectWildIgnore     = get(g:, 'NERDTreeRespectWildIgnore',     0)$/;"	v
g:NERDTreeShowBookmarks	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowBookmarks         = get(g:, 'NERDTreeShowBookmarks',         0)$/;"	v
g:NERDTreeShowFiles	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowFiles             = get(g:, 'NERDTreeShowFiles',             1)$/;"	v
g:NERDTreeShowHidden	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowHidden            = get(g:, 'NERDTreeShowHidden',            0)$/;"	v
g:NERDTreeShowHidden	.vimrc	/^let g:NERDTreeShowHidden = 1$/;"	v
g:NERDTreeShowLineNumbers	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowLineNumbers       = get(g:, 'NERDTreeShowLineNumbers',       0)$/;"	v
g:NERDTreeSortDirs	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortDirs              = get(g:, 'NERDTreeSortDirs',              1)$/;"	v
g:NERDTreeSortHiddenFirst	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortHiddenFirst       = get(g:, 'NERDTreeSortHiddenFirst',       1)$/;"	v
g:NERDTreeSortOrder	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortOrder    = get(g:, 'NERDTreeSortOrder', ['\\\/$', '*', '\\.swp$', '\\.bak$', '/;"	v
g:NERDTreeStatusline	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeStatusline = get(g:, 'NERDTreeStatusline', "%{exists('b:NERDTree')?b:NERDTree.root/;"	v
g:NERDTreeUI	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^let g:NERDTreeUI = s:UI$/;"	v
g:NERDTreeUseTCD	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeUseTCD                = get(g:, 'NERDTreeUseTCD',                0)$/;"	v
g:NERDTreeWinPos	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeWinPos  = get(g:, 'NERDTreeWinPos', 'left')$/;"	v
g:NERDTreeWinSize	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeWinSize = get(g:, 'NERDTreeWinSize', 31)$/;"	v
g:SyntasticAutoloclistNotifier	.vim/pack/ide/start/syntastic/plugin/syntastic/autoloclist.vim	/^let g:SyntasticAutoloclistNotifier = {}$/;"	v
g:SyntasticBalloonsNotifier	.vim/pack/ide/start/syntastic/plugin/syntastic/balloons.vim	/^let g:SyntasticBalloonsNotifier = {}$/;"	v
g:SyntasticChecker	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^let g:SyntasticChecker = {}$/;"	v
g:SyntasticCursorNotifier	.vim/pack/ide/start/syntastic/plugin/syntastic/cursor.vim	/^let g:SyntasticCursorNotifier = {}$/;"	v
g:SyntasticHighlightingNotifier	.vim/pack/ide/start/syntastic/plugin/syntastic/highlighting.vim	/^let g:SyntasticHighlightingNotifier = {}$/;"	v
g:SyntasticLoclist	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^let g:SyntasticLoclist = {}$/;"	v
g:SyntasticModeMap	.vim/pack/ide/start/syntastic/plugin/syntastic/modemap.vim	/^let g:SyntasticModeMap = {}$/;"	v
g:SyntasticNotifiers	.vim/pack/ide/start/syntastic/plugin/syntastic/notifiers.vim	/^let g:SyntasticNotifiers = {}$/;"	v
g:SyntasticRegistry	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^let g:SyntasticRegistry = {}$/;"	v
g:SyntasticSignsNotifier	.vim/pack/ide/start/syntastic/plugin/syntastic/signs.vim	/^let g:SyntasticSignsNotifier = {}$/;"	v
g:Tabula_BoldStatement	.vim/colors/tabula.vim	/^    let g:Tabula_BoldStatement = 0$/;"	v
g:Tabula_BoldStatement	.vim/colors/tabula.vim	/^    let g:Tabula_BoldStatement = 1$/;"	v
g:Tabula_ColorPre	.vim/colors/tabula.vim	/^    let g:Tabula_ColorPre = "blue"$/;"	v
g:Tabula_ColorPre	.vim/colors/tabula.vim	/^    let g:Tabula_ColorPre = "red"$/;"	v
g:Tabula_ColorPre	.vim/colors/tabula.vim	/^    let g:Tabula_ColorPre = "yellow"$/;"	v
g:Tabula_CurColor	.vim/colors/tabula.vim	/^    let g:Tabula_CurColor = "blue"$/;"	v
g:Tabula_CurColor	.vim/colors/tabula.vim	/^    let g:Tabula_CurColor = "red"$/;"	v
g:Tabula_CurColor	.vim/colors/tabula.vim	/^    let g:Tabula_CurColor = "white"$/;"	v
g:Tabula_CurColor	.vim/colors/tabula.vim	/^    let g:Tabula_CurColor = "yellow"$/;"	v
g:Tabula_DarkError	.vim/colors/tabula.vim	/^    let g:Tabula_DarkError = 0$/;"	v
g:Tabula_DarkError	.vim/colors/tabula.vim	/^    let g:Tabula_DarkError = 1$/;"	v
g:Tabula_FlatConstants	.vim/colors/tabula.vim	/^    let g:Tabula_FlatConstants = 0$/;"	v
g:Tabula_FlatConstants	.vim/colors/tabula.vim	/^    let g:Tabula_FlatConstants = 1$/;"	v
g:Tabula_InvisibleIgnore	.vim/colors/tabula.vim	/^    let g:Tabula_InvisibleIgnore = 0$/;"	v
g:Tabula_InvisibleIgnore	.vim/colors/tabula.vim	/^    let g:Tabula_InvisibleIgnore = 1$/;"	v
g:Tabula_LNumUnderline	.vim/colors/tabula.vim	/^    let g:Tabula_LNumUnderline = 0$/;"	v
g:Tabula_LNumUnderline	.vim/colors/tabula.vim	/^    let g:Tabula_LNumUnderline = 1$/;"	v
g:Tabula_SearchStandOut	.vim/colors/tabula.vim	/^    let g:Tabula_SearchStandOut = 0$/;"	v
g:Tabula_SearchStandOut	.vim/colors/tabula.vim	/^    let g:Tabula_SearchStandOut = 1$/;"	v
g:Tabula_SearchStandOut	.vim/colors/tabula.vim	/^    let g:Tabula_SearchStandOut = 2$/;"	v
g:Tabula_TodoUnderline	.vim/colors/tabula.vim	/^    let g:Tabula_TodoUnderline = 0$/;"	v
g:Tabula_TodoUnderline	.vim/colors/tabula.vim	/^    let g:Tabula_TodoUnderline = 1$/;"	v
g:_SYNTASTIC_DEBUG_AUTOCOMMANDS	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^let     g:_SYNTASTIC_DEBUG_AUTOCOMMANDS  = 8$/;"	v
g:_SYNTASTIC_DEBUG_CHECKERS	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^let     g:_SYNTASTIC_DEBUG_CHECKERS      = 32$/;"	v
g:_SYNTASTIC_DEBUG_LOCLIST	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^let     g:_SYNTASTIC_DEBUG_LOCLIST       = 2$/;"	v
g:_SYNTASTIC_DEBUG_NOTIFICATIONS	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^let     g:_SYNTASTIC_DEBUG_NOTIFICATIONS = 4$/;"	v
g:_SYNTASTIC_DEBUG_TRACE	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^let     g:_SYNTASTIC_DEBUG_TRACE         = 1$/;"	v
g:_SYNTASTIC_DEBUG_VARIABLES	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^let     g:_SYNTASTIC_DEBUG_VARIABLES     = 16$/;"	v
g:_SYNTASTIC_DEFAULTS	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^let g:_SYNTASTIC_DEFAULTS = {$/;"	v
g:_SYNTASTIC_SHELL_OPTIONS	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^let g:_SYNTASTIC_SHELL_OPTIONS = [$/;"	v
g:_SYNTASTIC_START	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^    let g:_SYNTASTIC_START = reltime()$/;"	v
g:_SYNTASTIC_UNAME	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^        let g:_SYNTASTIC_UNAME = 'Unknown'$/;"	v
g:_SYNTASTIC_UNAME	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^        let g:_SYNTASTIC_UNAME = split(syntastic#util#system('uname'), "\\n")[0]$/;"	v
g:_SYNTASTIC_UNAME	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^    let g:_SYNTASTIC_UNAME = 'Unknown'$/;"	v
g:_SYNTASTIC_UNAME	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^    let g:_SYNTASTIC_UNAME = 'Windows'$/;"	v
g:_SYNTASTIC_VERSION	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^let g:_SYNTASTIC_VERSION = '3.10.0-27'$/;"	v
g:__gutentags_vim_is_leaving	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^    let g:__gutentags_vim_is_leaving = 1$/;"	v
g:__gutentags_vim_is_leaving	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:__gutentags_vim_is_leaving = 0$/;"	v
g:_fugitive_last_job	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^  let g:_fugitive_last_job = a:state$/;"	v
g:abc	.vim/pack/ide/start/addon-mw-utils/autoload/glob_linux.vim	/^      let g:abc=7$/;"	v
g:airline#extensions#default#layout	.vim/pack/ide/start/airline/t/extensions_default.vim	/^let g:airline#extensions#default#layout = [$/;"	v
g:airline#extensions#example#number_of_cats	.vim/pack/ide/start/airline/autoload/airline/extensions/example.vim	/^  let g:airline#extensions#example#number_of_cats = 42$/;"	v
g:airline#extensions#localsearch#inverted	.vim/pack/ide/start/airline/autoload/airline/extensions/localsearch.vim	/^let g:airline#extensions#localsearch#inverted = get(g:, 'airline#extensions#localsearch#inverted/;"	v
g:airline#extensions#localsearch#loaded	.vim/pack/ide/start/airline/autoload/airline/extensions/localsearch.vim	/^let g:airline#extensions#localsearch#loaded = 001$/;"	v
g:airline#extensions#obsession#indicator_text	.vim/pack/ide/start/airline/autoload/airline/extensions/obsession.vim	/^  let g:airline#extensions#obsession#indicator_text = '$'$/;"	v
g:airline#extensions#quickfix#location_text	.vim/pack/ide/start/airline/autoload/airline/extensions/quickfix.vim	/^  let g:airline#extensions#quickfix#location_text = 'Location'$/;"	v
g:airline#extensions#quickfix#quickfix_text	.vim/pack/ide/start/airline/autoload/airline/extensions/quickfix.vim	/^  let g:airline#extensions#quickfix#quickfix_text = 'Quickfix'$/;"	v
g:airline#extensions#tabline#enabled	.vim/pack/ide/start/airline/t/extensions_tabline.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline#extensions#tabline#enabled	.vimrc	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline#extensions#tabline#exclude_buffers	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^        let g:airline#extensions#tabline#exclude_buffers = []$/;"	v
g:airline#extensions#tabline#exclude_buffers	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^    let g:airline#extensions#tabline#exclude_buffers = []$/;"	v
g:airline#extensions#tabline#fnamemod	.vimrc	/^let g:airline#extensions#tabline#fnamemod = ':t'$/;"	v
g:airline#extensions#tabline#show_tabs	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^        let g:airline#extensions#tabline#show_tabs = 0$/;"	v
g:airline#extensions#tabline#show_tabs	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^        let g:airline#extensions#tabline#show_tabs = 1$/;"	v
g:airline#extensions#whitespace#enabled	.vim/pack/ide/start/airline/autoload/airline/extensions/whitespace.vim	/^    let g:airline#extensions#whitespace#enabled = s:enabled$/;"	v
g:airline#extensions#windowswap#indicator_text	.vim/pack/ide/start/airline/autoload/airline/extensions/windowswap.vim	/^  let g:airline#extensions#windowswap#indicator_text = 'WS'$/;"	v
g:airline#extensions#wordcount#filetypes	.vim/pack/ide/start/airline/autoload/airline/extensions/wordcount.vim	/^  let g:airline#extensions#wordcount#filetypes = filetypes$/;"	v
g:airline#highlighter#normal_fg_hi	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^      let g:airline#highlighter#normal_fg_hi = synIDattr(synIDtrans(hlID('Normal')), 'fg', 'cter/;"	v
g:airline#init#bootstrapping	.vim/pack/ide/start/airline/autoload/airline/init.vim	/^  let g:airline#init#bootstrapping = 1$/;"	v
g:airline#init#is_windows	.vim/pack/ide/start/airline/autoload/airline/init.vim	/^  let g:airline#init#is_windows = has('win32') || has('win64')$/;"	v
g:airline#init#vim_async	.vim/pack/ide/start/airline/autoload/airline/init.vim	/^  let g:airline#init#vim_async = (v:version >= 800 && has('job'))$/;"	v
g:airline#themes#dark#palette	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^  let g:airline#themes#dark#palette.ctrlp = airline#extensions#ctrlp#generate_color_map($/;"	v
g:airline#themes#dark#palette	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette = {}$/;"	v
g:airline#themes#dark#palette	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.accents = {$/;"	v
g:airline#themes#dark#palette	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.commandline = airline#themes#generate_color_map(s:airline_a_co/;"	v
g:airline#themes#dark#palette	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.inactive = airline#themes#generate_color_map(s:airline_a_inact/;"	v
g:airline#themes#dark#palette	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.inactive_modified = {$/;"	v
g:airline#themes#dark#palette	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.insert = airline#themes#generate_color_map(s:airline_a_insert,/;"	v
g:airline#themes#dark#palette	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.insert_modified = {$/;"	v
g:airline#themes#dark#palette	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.insert_paste = {$/;"	v
g:airline#themes#dark#palette	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.normal = airline#themes#generate_color_map(s:airline_a_normal,/;"	v
g:airline#themes#dark#palette	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.normal_modified = {$/;"	v
g:airline#themes#dark#palette	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.replace = copy(g:airline#themes#dark#palette.insert)$/;"	v
g:airline#themes#dark#palette	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.replace.airline_a = [ s:airline_b_insert[0]   , '#af0000' , s:/;"	v
g:airline#themes#dark#palette	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.replace_modified = g:airline#themes#dark#palette.insert_modifi/;"	v
g:airline#themes#dark#palette	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.terminal = airline#themes#generate_color_map(s:airline_a_inser/;"	v
g:airline#themes#dark#palette	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.visual = airline#themes#generate_color_map(s:airline_a_visual,/;"	v
g:airline#themes#dark#palette	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.visual_modified = {$/;"	v
g:airline#visual_active	.vim/pack/ide/start/airline/autoload/airline.vim	/^  let g:airline#visual_active = (mode() =~? '[vs]')$/;"	v
g:airline_inactive_collapse	.vim/pack/ide/start/airline/t/airline.vim	/^    let g:airline_inactive_collapse = 0$/;"	v
g:airline_inactive_collapse	.vim/pack/ide/start/airline/t/airline.vim	/^    let g:airline_inactive_collapse = 1$/;"	v
g:airline_inactive_funcrefs	.vim/pack/ide/start/airline/autoload/airline.vim	/^let g:airline_inactive_funcrefs = get(g:, 'airline_inactive_statusline_funcrefs', [])$/;"	v
g:airline_last_window_changed	.vim/pack/ide/start/airline/plugin/airline.vim	/^  let g:airline_last_window_changed = l:key$/;"	v
g:airline_powerline_fonts	.vimrc	/^let g:airline_powerline_fonts = 1$/;"	v
g:airline_section_	.vim/pack/ide/start/airline/t/init.vim	/^      let g:airline_section_{s} = s$/;"	v
g:airline_section_a	.vim/pack/ide/start/airline/autoload/airline/init.vim	/^    let g:airline_section_a = airline#section#create_left(['mode', 'crypt', 'paste', 'keymap', '/;"	v
g:airline_section_a	.vim/pack/ide/start/airline/t/airline.vim	/^    let g:airline_section_a = airline#section#create(['mode', 'mode'])$/;"	v
g:airline_section_b	.vim/pack/ide/start/airline/autoload/airline/init.vim	/^      let g:airline_section_b = airline#section#create(['hunks', 'branch', 'battery'])$/;"	v
g:airline_section_b	.vim/pack/ide/start/airline/autoload/airline/init.vim	/^      let g:airline_section_b = airline#section#create(['hunks', 'branch'])$/;"	v
g:airline_section_c	.vim/pack/ide/start/airline/autoload/airline/init.vim	/^      let g:airline_section_c = airline#section#create(['%<', 'file', spc, 'readonly', 'coc_stat/;"	v
g:airline_section_c	.vim/pack/ide/start/airline/autoload/airline/init.vim	/^      let g:airline_section_c = airline#section#create(['%<', 'path', spc, 'readonly', 'coc_stat/;"	v
g:airline_section_error	.vim/pack/ide/start/airline/autoload/airline/init.vim	/^    let g:airline_section_error = airline#section#create(['ycm_error_count', 'syntastic-err', 'e/;"	v
g:airline_section_gutter	.vim/pack/ide/start/airline/autoload/airline/init.vim	/^    let g:airline_section_gutter = airline#section#create(['%='])$/;"	v
g:airline_section_warning	.vim/pack/ide/start/airline/autoload/airline/extensions/whitespace.vim	/^      let g:airline_section_warning .= airline#section#create(['whitespace'])$/;"	v
g:airline_section_warning	.vim/pack/ide/start/airline/autoload/airline/init.vim	/^    let g:airline_section_warning = airline#section#create(['ycm_warning_count',  'syntastic-war/;"	v
g:airline_section_x	.vim/pack/ide/start/airline/autoload/airline/init.vim	/^    let g:airline_section_x = airline#section#create_right(['coc_current_function', 'bookmark', /;"	v
g:airline_section_y	.vim/pack/ide/start/airline/autoload/airline/init.vim	/^    let g:airline_section_y = airline#section#create_right(['ffenc'])$/;"	v
g:airline_section_z	.vim/pack/ide/start/airline/autoload/airline/init.vim	/^      let g:airline_section_z = airline#section#create(['%p%%', 'linenr', 'colnr'])$/;"	v
g:airline_section_z	.vim/pack/ide/start/airline/autoload/airline/init.vim	/^      let g:airline_section_z = airline#section#create(['windowswap', 'obsession', '%p%%', 'line/;"	v
g:airline_statusline_funcrefs	.vim/pack/ide/start/airline/autoload/airline.vim	/^let g:airline_statusline_funcrefs = get(g:, 'airline_statusline_funcrefs', [])$/;"	v
g:airline_statusline_funcrefs	.vim/pack/ide/start/airline/t/airline.vim	/^    let g:airline_statusline_funcrefs = []$/;"	v
g:airline_statusline_ontop	.vim/pack/ide/start/airline/t/util.vim	/^    let g:airline_statusline_ontop = 0$/;"	v
g:airline_statusline_ontop	.vim/pack/ide/start/airline/t/util.vim	/^    let g:airline_statusline_ontop = 1$/;"	v
g:airline_theme	.vim/pack/ide/start/airline/autoload/airline.vim	/^      let g:airline_theme = 'dark'$/;"	v
g:airline_theme	.vim/pack/ide/start/airline/autoload/airline.vim	/^      let g:airline_theme = a:name$/;"	v
g:airline_theme	.vim/pack/ide/start/airline/autoload/airline.vim	/^  let g:airline_theme = get(g:, 'airline_theme', 'dark')$/;"	v
g:airline_theme	.vim/pack/ide/start/airline/plugin/airline.vim	/^        let g:airline_theme=s:random_theme()$/;"	v
g:airline_theme	.vim/pack/ide/start/airline/plugin/airline.vim	/^      let g:airline_theme = 'dark'$/;"	v
g:airline_theme	.vim/pack/ide/start/airline/plugin/airline.vim	/^    let g:airline_theme = 'dark'$/;"	v
g:airline_theme	.vim/pack/ide/start/airline/t/airline.vim	/^let g:airline_theme = 'dark'$/;"	v
g:airline_theme	.vim/pack/ide/start/airline/t/builder.vim	/^let g:airline_theme = 'dark'$/;"	v
g:airline_theme	.vim/pack/ide/start/airline/t/highlighter.vim	/^let g:airline_theme = 'dark'$/;"	v
g:astronaut_bold	.vim/colors/astronaut.vim	/^ let g:astronaut_bold= 0$/;"	v
g:astronaut_dark	.vim/colors/astronaut.vim	/^ let g:astronaut_dark= 0$/;"	v
g:astronaut_italic	.vim/colors/astronaut.vim	/^ let g:astronaut_italic= 0$/;"	v
g:astronaut_underline	.vim/colors/astronaut.vim	/^ let g:astronaut_underline= 1$/;"	v
g:autoloaded_fugitive	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let g:autoloaded_fugitive = 1$/;"	v
g:bar	.vim/pack/ide/start/tlib/spec/tlib/var.vim	/^let g:bar = 2$/;"	v
g:bar	.vim/pack/ide/start/tlib/test/tlib.vim	/^let g:bar = 2$/;"	v
g:battery#update_statusline	.vim/pack/ide/start/airline/autoload/airline/extensions/battery.vim	/^    let g:battery#update_statusline = 1$/;"	v
g:bufferline_active_buffer_left	.vim/pack/ide/start/airline/autoload/airline/extensions/bufferline.vim	/^    let g:bufferline_active_buffer_left = ''$/;"	v
g:bufferline_active_buffer_right	.vim/pack/ide/start/airline/autoload/airline/extensions/bufferline.vim	/^    let g:bufferline_active_buffer_right = ''$/;"	v
g:bufferline_active_highlight	.vim/pack/ide/start/airline/autoload/airline/extensions/bufferline.vim	/^    let g:bufferline_active_highlight = 'bufferline_selected'$/;"	v
g:bufferline_inactive_highlight	.vim/pack/ide/start/airline/autoload/airline/extensions/bufferline.vim	/^    let g:bufferline_inactive_highlight = 'airline_c'$/;"	v
g:bufferline_separator	.vim/pack/ide/start/airline/autoload/airline/extensions/bufferline.vim	/^    let g:bufferline_separator = g:airline_symbols.space$/;"	v
g:coc_stl_format	.vim/pack/ide/start/airline/autoload/airline/extensions/coc.vim	/^    let g:coc_stl_format = _backup$/;"	v
g:coc_stl_format	.vim/pack/ide/start/airline/autoload/airline/extensions/coc.vim	/^    let g:coc_stl_format = get(g:, 'airline#extensions#coc#stl_format_err', '%E{[%e(#%fe)]}')$/;"	v
g:coc_stl_format	.vim/pack/ide/start/airline/autoload/airline/extensions/coc.vim	/^    let g:coc_stl_format = get(g:, 'airline#extensions#coc#stl_format_warn', '%W{[%w(#%fw)]}')$/;"	v
g:colors_name	.vim/colors/adrian.vim	/^let g:colors_name = "adrian"$/;"	v
g:colors_name	.vim/colors/aiseered.vim	/^let g:colors_name="aiseered"$/;"	v
g:colors_name	.vim/colors/anotherdark.vim	/^let g:colors_name="anotherdark"$/;"	v
g:colors_name	.vim/colors/aqua.vim	/^let g:colors_name="aqua"$/;"	v
g:colors_name	.vim/colors/astronaut.vim	/^let g:colors_name      = "astronaut"$/;"	v
g:colors_name	.vim/colors/asu1dark.vim	/^let g:colors_name="asu1dark"$/;"	v
g:colors_name	.vim/colors/baycomb.vim	/^let g:colors_name="baycomb"$/;"	v
g:colors_name	.vim/colors/bclear.vim	/^let g:colors_name = "bclear"$/;"	v
g:colors_name	.vim/colors/biogoo.vim	/^let g:colors_name = "biogoo"$/;"	v
g:colors_name	.vim/colors/blacksea.vim	/^let g:colors_name = "BlackSea"$/;"	v
g:colors_name	.vim/colors/bluegreen.vim	/^let g:colors_name="mine"$/;"	v
g:colors_name	.vim/colors/borland.vim	/^let g:colors_name="borland"$/;"	v
g:colors_name	.vim/colors/brookstream.vim	/^let g:colors_name="brookstream"$/;"	v
g:colors_name	.vim/colors/calmar256-dark.vim	/^let g:colors_name = "calmar256-dark"$/;"	v
g:colors_name	.vim/colors/calmar256-light.vim	/^let g:colors_name = "calmar256-light"$/;"	v
g:colors_name	.vim/colors/camo.vim	/^let g:colors_name="camo"$/;"	v
g:colors_name	.vim/colors/candycode.vim	/^let g:colors_name="candycode"$/;"	v
g:colors_name	.vim/colors/chela_light.vim	/^let g:colors_name="chela_light"$/;"	v
g:colors_name	.vim/colors/chocolateliquor.vim	/^let g:colors_name = "ChocolateLiquor"$/;"	v
g:colors_name	.vim/colors/clarity.vim	/^let g:colors_name="clarity"$/;"	v
g:colors_name	.vim/colors/colorer.vim	/^let g:colors_name = "colorer"$/;"	v
g:colors_name	.vim/colors/dante.vim	/^let g:colors_name = "dante"$/;"	v
g:colors_name	.vim/colors/darkZ.vim	/^let g:colors_name="darkZ"$/;"	v
g:colors_name	.vim/colors/darkblue2.vim	/^let g:colors_name = "darkblue2"$/;"	v
g:colors_name	.vim/colors/darkbone.vim	/^let g:colors_name = 'darkbone'$/;"	v
g:colors_name	.vim/colors/darkslategray.vim	/^let g:colors_name = "darkslategray"$/;"	v
g:colors_name	.vim/colors/darkspectrum.vim	/^let g:colors_name="darkspectrum"$/;"	v
g:colors_name	.vim/colors/denim.vim	/^let g:colors_name="denim"$/;"	v
g:colors_name	.vim/colors/desert256.vim	/^let g:colors_name="desert256"$/;"	v
g:colors_name	.vim/colors/desertEx.vim	/^let g:colors_name="desertEx"$/;"	v
g:colors_name	.vim/colors/dw_blue.vim	/^let g:colors_name="dw_blue"$/;"	v
g:colors_name	.vim/colors/dw_cyan.vim	/^let g:colors_name="dw_cyan"$/;"	v
g:colors_name	.vim/colors/dw_green.vim	/^let g:colors_name="dw_green"$/;"	v
g:colors_name	.vim/colors/dw_orange.vim	/^let g:colors_name="dw_orange"$/;"	v
g:colors_name	.vim/colors/dw_purple.vim	/^let g:colors_name="dw_purple"$/;"	v
g:colors_name	.vim/colors/dw_red.vim	/^let g:colors_name="dw_red"$/;"	v
g:colors_name	.vim/colors/dw_yellow.vim	/^let g:colors_name="dw_yellow"$/;"	v
g:colors_name	.vim/colors/eclipse.vim	/^let g:colors_name = "eclipse"$/;"	v
g:colors_name	.vim/colors/ekvoli.vim	/^let g:colors_name = "ekvoli"$/;"	v
g:colors_name	.vim/colors/golden.vim	/^let g:colors_name = "golden"$/;"	v
g:colors_name	.vim/colors/guardian.vim	/^let g:colors_name = "Guardian"$/;"	v
g:colors_name	.vim/colors/habilight.vim	/^let g:colors_name = "habiLight"$/;"	v
g:colors_name	.vim/colors/impact.vim	/^let g:colors_name="impact"$/;"	v
g:colors_name	.vim/colors/jammy.vim	/^let g:colors_name="jammy"$/;"	v
g:colors_name	.vim/colors/leo.vim	/^let g:colors_name = "leo256"$/;"	v
g:colors_name	.vim/colors/lettuce.vim	/^let g:colors_name="lettuce"$/;"	v
g:colors_name	.vim/colors/manxome.vim	/^let g:colors_name = "manxome"$/;"	v
g:colors_name	.vim/colors/marklar.vim	/^let g:colors_name = "marklar"$/;"	v
g:colors_name	.vim/colors/maroloccio.vim	/^let g:colors_name="maroloccio"$/;"	v
g:colors_name	.vim/colors/matrix.vim	/^let g:colors_name = 'matrix'$/;"	v
g:colors_name	.vim/colors/molokai.vim	/^let g:colors_name="molokai"$/;"	v
g:colors_name	.vim/colors/moss.vim	/^let g:colors_name = "moss"$/;"	v
g:colors_name	.vim/colors/motus.vim	/^let g:colors_name = "motus"$/;"	v
g:colors_name	.vim/colors/navajo-night.vim	/^let g:colors_name = "navajo-night"$/;"	v
g:colors_name	.vim/colors/navajo.vim	/^let g:colors_name = "navajo"$/;"	v
g:colors_name	.vim/colors/neverness.vim	/^let g:colors_name = 'neverness'$/;"	v
g:colors_name	.vim/colors/nightshimmer.vim	/^let g:colors_name = "nightshimmer"$/;"	v
g:colors_name	.vim/colors/northland.vim	/^let g:colors_name="northland"$/;"	v
g:colors_name	.vim/colors/nuvola.vim	/^let g:colors_name = "nuvola"$/;"	v
g:colors_name	.vim/colors/oceanblack.vim	/^let g:colors_name = "oceanblack"$/;"	v
g:colors_name	.vim/colors/oceandeep.vim	/^let g:colors_name = "oceandeep"$/;"	v
g:colors_name	.vim/colors/oceanlight.vim	/^let g:colors_name = "oceanlight"$/;"	v
g:colors_name	.vim/colors/olive.vim	/^let g:colors_name="olive"$/;"	v
g:colors_name	.vim/colors/papayawhip.vim	/^let g:colors_name = "PapayaWhip"$/;"	v
g:colors_name	.vim/colors/peaksea.vim	/^let g:colors_name = expand("<sfile>:t:r")$/;"	v
g:colors_name	.vim/colors/print_bw.vim	/^let g:colors_name = "print_bw"$/;"	v
g:colors_name	.vim/colors/railscasts.vim	/^let g:colors_name = "railscasts"$/;"	v
g:colors_name	.vim/colors/railscasts2.vim	/^let g:colors_name = "railscasts"$/;"	v
g:colors_name	.vim/colors/relaxedgreen.vim	/^let g:colors_name = "relaxedgreen"$/;"	v
g:colors_name	.vim/colors/robinhood.vim	/^let g:colors_name = "robinhood"$/;"	v
g:colors_name	.vim/colors/rootwater.vim	/^let g:colors_name = 'rootwater'$/;"	v
g:colors_name	.vim/colors/settlemyer.vim	/^let g:colors_name="settlemyer"$/;"	v
g:colors_name	.vim/colors/sienna.vim	/^let g:colors_name = 'sienna'$/;"	v
g:colors_name	.vim/colors/silent.vim	/^let g:colors_name = "silent"$/;"	v
g:colors_name	.vim/colors/simpleandfriendly.vim	/^let g:colors_name = "simpleandfriendly"$/;"	v
g:colors_name	.vim/colors/softblue.vim	/^let g:colors_name="softblue"$/;"	v
g:colors_name	.vim/colors/soso.vim	/^let g:colors_name="soso"$/;"	v
g:colors_name	.vim/colors/summerfruit256.vim	/^let g:colors_name="summerfruit256"$/;"	v
g:colors_name	.vim/colors/synic.vim	/^let g:colors_name = "synic"$/;"	v
g:colors_name	.vim/colors/tabula.vim	/^let g:colors_name = "tabula"$/;"	v
g:colors_name	.vim/colors/tolerable.vim	/^let g:colors_name="tolerable"$/;"	v
g:colors_name	.vim/colors/torte.vim	/^let g:colors_name = "torte"$/;"	v
g:colors_name	.vim/colors/two2tango.vim	/^let g:colors_name="two2tango"$/;"	v
g:colors_name	.vim/colors/vc.vim	/^let g:colors_name="vc"$/;"	v
g:colors_name	.vim/colors/vibrantink.vim	/^let g:colors_name = "vibrantink"$/;"	v
g:colors_name	.vim/colors/vylight.vim	/^let g:colors_name="vylight"$/;"	v
g:colors_name	.vim/colors/wombat256.vim	/^let g:colors_name = "wombat256"$/;"	v
g:colors_name	.vim/colors/wood.vim	/^let g:colors_name="wood"$/;"	v
g:colors_name	.vim/colors/wuye.vim	/^let g:colors_name = "wuye"$/;"	v
g:colors_name	.vim/colors/xemacs.vim	/^let g:colors_name="xemacs"$/;"	v
g:colors_name	.vim/colors/zenburn.vim	/^let g:colors_name="zenburn"$/;"	v
g:colors_name	.vim/colors/zmrok.vim	/^let g:colors_name="zmrok"$/;"	v
g:colors_name	.vim/pack/ide/opt/seoul256/colors/seoul256-light.vim	/^    let g:colors_name = &background == 'dark' ? 'seoul256' : 'seoul256-light'$/;"	v
g:colors_name	.vim/pack/ide/opt/seoul256/colors/seoul256-light.vim	/^    let g:colors_name = 'seoul256'$/;"	v
g:colors_name	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^let g:colors_name = 'seoul256'$/;"	v
g:count	.vim/pack/ide/start/airline/t/util.vim	/^    let g:count = 0$/;"	v
g:count	.vim/pack/ide/start/airline/t/util.vim	/^  let g:count += 1$/;"	v
g:count	.vim/pack/ide/start/airline/t/util.vim	/^  let g:count += 2$/;"	v
g:count	.vim/pack/ide/start/airline/t/util.vim	/^  let g:count = a:0$/;"	v
g:ctrlp_alldirs	.vim/pack/ide/start/ctrlp/autoload/ctrlp/dir.vim	/^			let g:ctrlp_alldirs = ctrlp#utils#readfile(cafile)$/;"	v
g:ctrlp_allfiles	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^			let g:ctrlp_allfiles = ctrlp#dirnfile(g:ctrlp_allfiles)[1]$/;"	v
g:ctrlp_allfiles	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^			let g:ctrlp_allfiles = ctrlp#utils#readfile(cafile)$/;"	v
g:ctrlp_allfiles	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^		let g:ctrlp_allfiles += [a:data]$/;"	v
g:ctrlp_allfiles	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^		let g:ctrlp_allfiles += dnf[1]$/;"	v
g:ctrlp_allfiles	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^		let g:ctrlp_allfiles += filter(a:data, 'v:val !=# ""')$/;"	v
g:ctrlp_allfiles	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^		let g:ctrlp_allfiles = []$/;"	v
g:ctrlp_allfiles	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^		let g:ctrlp_allfiles = split(system(s:safe_printf(lscmd, path)), "\\n")$/;"	v
g:ctrlp_allfiles	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^		let g:ctrlp_allfiles = systemlist(s:safe_printf(lscmd, path))$/;"	v
g:ctrlp_allmixes	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mixed.vim	/^	let g:ctrlp_allmixes = { 'filtime': getftime(ctrlp#utils#cachefile()),$/;"	v
g:ctrlp_alltags	.vim/pack/ide/start/ctrlp/autoload/ctrlp/tag.vim	/^	let g:ctrlp_alltags = []$/;"	v
g:ctrlp_autoignore_debug	.vim/pack/ide/start/ctrlp/autoload/ctrlp/autoignore.vim	/^	let g:ctrlp_autoignore_debug = 0$/;"	v
g:ctrlp_autoignore_loaded	.vim/pack/ide/start/ctrlp/autoload/ctrlp/autoignore.vim	/^let g:ctrlp_autoignore_loaded = 1$/;"	v
g:ctrlp_autoignore_trace	.vim/pack/ide/start/ctrlp/autoload/ctrlp/autoignore.vim	/^	let g:ctrlp_autoignore_trace = 0$/;"	v
g:ctrlp_builtins	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^let g:ctrlp_builtins = len(g:ctrlp_types)-1$/;"	v
g:ctrlp_custom_ignore	.vim/pack/ide/start/ctrlp/autoload/ctrlp/autoignore.vim	/^	let g:ctrlp_custom_ignore = {}$/;"	v
g:ctrlp_custom_ignore	.vim/pack/ide/start/ctrlp/autoload/ctrlp/autoignore.vim	/^let g:ctrlp_custom_ignore['func'] = 'ctrlp#autoignore#ignore'$/;"	v
g:ctrlp_custom_ignore	.vim/pack/ide/start/ctrlp/autoload/ctrlp/autoignore.vim	/^let g:ctrlp_custom_ignore['func-close'] = 'ctrlp#autoignore#ignore_close'$/;"	v
g:ctrlp_custom_ignore	.vim/pack/ide/start/ctrlp/autoload/ctrlp/autoignore.vim	/^let g:ctrlp_custom_ignore['func-init'] = 'ctrlp#autoignore#ignore_init'$/;"	v
g:ctrlp_custom_ignore	.vimrc	/^let g:ctrlp_custom_ignore = {$/;"	v
g:ctrlp_lines	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^		let g:ctrlp_lines = ctrlp#mrufiles#refresh()$/;"	v
g:ctrlp_lines	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^	let g:ctrlp_lines = []$/;"	v
g:ctrlp_lines	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^	let g:ctrlp_lines = call(a:rfunc, [tbrem])$/;"	v
g:ctrlp_lines	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^	let g:ctrlp_lines = eval(types[s:itemtype])$/;"	v
g:ctrlp_lines	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mixed.vim	/^		let g:ctrlp_lines = g:ctrlp_allmixes['data']$/;"	v
g:ctrlp_lines	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mixed.vim	/^	let g:ctrlp_lines = copy(ctrlp#files())$/;"	v
g:ctrlp_lines	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mixed.vim	/^	let g:ctrlp_lines = len(mrufs) > len(g:ctrlp_lines)$/;"	v
g:ctrlp_max_depth	.vimrc	/^let g:ctrlp_max_depth=40$/;"	v
g:ctrlp_max_files	.vimrc	/^let g:ctrlp_max_files=0$/;"	v
g:ctrlp_newcache	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^		let g:ctrlp_newcache = 0$/;"	v
g:ctrlp_newcache	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mixed.vim	/^		let g:ctrlp_newcache = 1$/;"	v
g:ctrlp_newdir	.vim/pack/ide/start/ctrlp/autoload/ctrlp/dir.vim	/^		let g:ctrlp_newdir = 0$/;"	v
g:ctrlp_newmix	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mixed.vim	/^	let g:ctrlp_newmix = 0$/;"	v
g:ctrlp_root_markers	.vim/pack/ide/start/ctrlp/autoload/ctrlp/autoignore.vim	/^	let g:ctrlp_root_markers = []$/;"	v
g:ctrlp_status_func	.vim/pack/ide/start/airline/autoload/airline/extensions/ctrlp.vim	/^  let g:ctrlp_status_func = {$/;"	v
g:ctrlp_types	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^	let g:ctrlp_types = s:types$/;"	v
g:ctrlsf_absolute_file_path	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_absolute_file_path = 0$/;"	v
g:ctrlsf_auto_close	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_auto_close = {$/;"	v
g:ctrlsf_auto_focus	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^        let g:ctrlsf_auto_focus['duration_less_than'] = 1000$/;"	v
g:ctrlsf_auto_focus	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_auto_focus = {$/;"	v
g:ctrlsf_auto_preview	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_auto_preview = 0$/;"	v
g:ctrlsf_backend	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^        let g:ctrlsf_backend = ctrlsf#backend#Detect()$/;"	v
g:ctrlsf_backend	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^        let g:ctrlsf_backend = g:ctrlsf_ackprg$/;"	v
g:ctrlsf_case_sensitive	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_case_sensitive = 'smart'$/;"	v
g:ctrlsf_compact_position	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_compact_position = 'bottom_outside'$/;"	v
g:ctrlsf_compact_winsize	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_compact_winsize = '10'$/;"	v
g:ctrlsf_confirm_save	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_confirm_save = 1$/;"	v
g:ctrlsf_confirm_unsaving_quit	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_confirm_unsaving_quit = 1$/;"	v
g:ctrlsf_context	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_context = '-C 3'$/;"	v
g:ctrlsf_debug_mode	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_debug_mode = 0$/;"	v
g:ctrlsf_default_root	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_default_root = 'cwd'$/;"	v
g:ctrlsf_default_view_mode	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_default_view_mode = 'normal'$/;"	v
g:ctrlsf_extra_backend_args	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_extra_backend_args = {}$/;"	v
g:ctrlsf_extra_root_markers	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_extra_root_markers = []$/;"	v
g:ctrlsf_fold_result	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_fold_result = 0$/;"	v
g:ctrlsf_follow_symlinks	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_follow_symlinks = 1$/;"	v
g:ctrlsf_ignore_dir	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_ignore_dir = []$/;"	v
g:ctrlsf_indent	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_indent = 4$/;"	v
g:ctrlsf_loaded	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^let g:ctrlsf_loaded = 1$/;"	v
g:ctrlsf_mapping	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^        let g:ctrlsf_mapping[key] = get(g:ctrlsf_mapping, key,$/;"	v
g:ctrlsf_mapping	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_mapping = s:default_mapping$/;"	v
g:ctrlsf_parse_speed	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_parse_speed = 300$/;"	v
g:ctrlsf_populate_qflist	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_populate_qflist = 0$/;"	v
g:ctrlsf_position	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^            let g:ctrlsf_position = 'left'$/;"	v
g:ctrlsf_position	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^            let g:ctrlsf_position = 'right'$/;"	v
g:ctrlsf_position	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^        let g:ctrlsf_position = 'left'$/;"	v
g:ctrlsf_preview_position	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_preview_position = 'outside'$/;"	v
g:ctrlsf_regex_pattern	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_regex_pattern = 0$/;"	v
g:ctrlsf_search_mode	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^        let g:ctrlsf_search_mode = 'async'$/;"	v
g:ctrlsf_search_mode	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^        let g:ctrlsf_search_mode = 'sync'$/;"	v
g:ctrlsf_selected_line_hl	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_selected_line_hl = 'p'$/;"	v
g:ctrlsf_tail_loaded	.vim/pack/ide/opt/ctrlsf/after/plugin/ctrlsf.vim	/^let g:ctrlsf_tail_loaded = 1$/;"	v
g:ctrlsf_toggle_map_key	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_toggle_map_key = ''$/;"	v
g:ctrlsf_winsize	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^        let g:ctrlsf_winsize = g:ctrlsf_width$/;"	v
g:ctrlsf_winsize	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^    let g:ctrlsf_winsize = 'auto'$/;"	v
g:cursormode_exit_mode	.vim/pack/ide/start/airline/autoload/airline/extensions/cursormode.vim	/^  let g:cursormode_exit_mode='n'$/;"	v
g:eval_a	.vim/pack/ide/start/tlib/spec/tlib/eval.vim	/^let g:eval_a = {'foo': range(0, 5), 'd': {'a': range(0, 5)}}$/;"	v
g:eval_a0	.vim/pack/ide/start/tlib/spec/tlib/eval.vim	/^let g:eval_a0 = deepcopy(g:eval_a)$/;"	v
g:eval_b	.vim/pack/ide/start/tlib/spec/tlib/eval.vim	/^let g:eval_b = {'foo': range(6, 10), 'd': {'a': range(6, 10), 'b': 2}, 'bar': range(5)}$/;"	v
g:eval_b0	.vim/pack/ide/start/tlib/spec/tlib/eval.vim	/^let g:eval_b0 = deepcopy(g:eval_b)$/;"	v
g:eval_c	.vim/pack/ide/start/tlib/spec/tlib/eval.vim	/^let g:eval_c = {'foo': range(0, 10), 'd': {'a': range(0, 10), 'b': 2}, 'bar': range(5)}$/;"	v
g:fern_force_overwrite_statusline	.vim/pack/ide/start/airline/autoload/airline/extensions/fern.vim	/^  let g:fern_force_overwrite_statusline = 0$/;"	v
g:foo	.vim/pack/ide/start/tlib/spec/tlib/var.vim	/^let g:foo = 1$/;"	v
g:foo	.vim/pack/ide/start/tlib/test/tlib.vim	/^let g:foo = 1$/;"	v
g:fugitive_event	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^      let g:fugitive_event = a:state.git_dir$/;"	v
g:fugitive_event	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^    let g:fugitive_event = dir$/;"	v
g:fugitive_result	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^      let g:fugitive_result = a:dir$/;"	v
g:fugitive_result	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^      let g:fugitive_result = a:state$/;"	v
g:fugitive_summary_format	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^  let g:fugitive_summary_format = '%s'$/;"	v
g:gina#component#repo#commit_length	.vim/pack/ide/start/airline/autoload/airline/extensions/branch.vim	/^    let g:gina#component#repo#commit_length = s:sha1size$/;"	v
g:gina_force_overwrite_statusline	.vim/pack/ide/start/airline/autoload/airline/extensions/gina.vim	/^  let g:gina_force_overwrite_statusline = 0$/;"	v
g:gutentags_add_ctrlp_root_markers	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_add_ctrlp_root_markers = get(g:, 'gutentags_add_ctrlp_root_markers', 1)$/;"	v
g:gutentags_add_default_project_roots	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_add_default_project_roots = get(g:, 'gutentags_add_default_project_roots', 1)$/;"	v
g:gutentags_auto_add_cscope	.vim/pack/ide/start/gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_auto_add_cscope = 1$/;"	v
g:gutentags_auto_add_gtags_cscope	.vim/pack/ide/start/gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_auto_add_gtags_cscope = 1$/;"	v
g:gutentags_background_update	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_background_update = get(g:, 'gutentags_background_update', 1)$/;"	v
g:gutentags_cache_dir	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = ''$/;"	v
g:gutentags_cache_dir	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':p')$/;"	v
g:gutentags_cache_dir	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':s?[\/\\\\]$??')$/;"	v
g:gutentags_cscope_build_inverted_index	.vim/pack/ide/start/gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_build_inverted_index = 0$/;"	v
g:gutentags_cscope_executable	.vim/pack/ide/start/gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_executable = 'cscope'$/;"	v
g:gutentags_ctags_auto_set_tags	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_auto_set_tags = get(g:, 'gutentags_ctags_auto_set_tags', 1)$/;"	v
g:gutentags_ctags_check_tagfile	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_check_tagfile = get(g:, 'gutentags_ctags_check_tagfile', 0)$/;"	v
g:gutentags_ctags_exclude	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude = get(g:, 'gutentags_ctags_exclude', [])$/;"	v
g:gutentags_ctags_exclude_wildignore	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude_wildignore = get(g:, 'gutentags_ctags_exclude_wildignore', 1)$/;"	v
g:gutentags_ctags_executable	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_executable = get(g:, 'gutentags_ctags_executable', 'ctags')$/;"	v
g:gutentags_ctags_extra_args	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_extra_args = get(g:, 'gutentags_ctags_extra_args', [])$/;"	v
g:gutentags_ctags_options_file	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_options_file = get(g:, 'gutentags_ctags_options_file', '.gutctags')$/;"	v
g:gutentags_ctags_post_process_cmd	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_post_process_cmd = get(g:, 'gutentags_ctags_post_process_cmd', '')$/;"	v
g:gutentags_ctags_tagfile	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_tagfile = get(g:, 'gutentags_ctags_tagfile', 'tags')$/;"	v
g:gutentags_debug	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_debug = get(g:, 'gutentags_debug', 0)$/;"	v
g:gutentags_define_advanced_commands	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_define_advanced_commands = get(g:, 'gutentags_define_advanced_commands', 0)$/;"	v
g:gutentags_enabled	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^            let g:gutentags_enabled = 0$/;"	v
g:gutentags_enabled	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_enabled = get(g:, 'gutentags_enabled', 1)$/;"	v
g:gutentags_exclude_filetypes	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_filetypes = get(g:, 'gutentags_exclude_filetypes', [])$/;"	v
g:gutentags_exclude_project_root	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_project_root = get(g:, 'gutentags_exclude_project_root', ['\/usr\/local'/;"	v
g:gutentags_fake	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^        let g:gutentags_fake = a:1$/;"	v
g:gutentags_fake	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^    let g:gutentags_fake = !g:gutentags_fake$/;"	v
g:gutentags_fake	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_fake = get(g:, 'gutentags_fake', 0)$/;"	v
g:gutentags_file_list_command	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_file_list_command = get(g:, 'gutentags_file_list_command', '')$/;"	v
g:gutentags_generate_on_empty_buffer	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_empty_buffer = get(g:, 'gutentags_generate_on_empty_buffer', 0)$/;"	v
g:gutentags_generate_on_missing	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_missing = get(g:, 'gutentags_generate_on_missing', 1)$/;"	v
g:gutentags_generate_on_new	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_new = get(g:, 'gutentags_generate_on_new', 1)$/;"	v
g:gutentags_generate_on_write	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_write = get(g:, 'gutentags_generate_on_write', 1)$/;"	v
g:gutentags_gtags_cscope_executable	.vim/pack/ide/start/gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_cscope_executable = 'gtags-cscope'$/;"	v
g:gutentags_gtags_dbpath	.vim/pack/ide/start/gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_dbpath = ''$/;"	v
g:gutentags_gtags_executable	.vim/pack/ide/start/gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_executable = 'gtags'$/;"	v
g:gutentags_gtags_options_file	.vim/pack/ide/start/gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_options_file = '.gutgtags'$/;"	v
g:gutentags_init_user_func	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_init_user_func = get(g:, 'gutentags_init_user_func', $/;"	v
g:gutentags_modules	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_modules = get(g:, 'gutentags_modules', ['ctags'])$/;"	v
g:gutentags_pause_after_update	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_pause_after_update = get(g:, 'gutentags_pause_after_update', 0)$/;"	v
g:gutentags_plat_dir	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . "\\\\plat\\\\win32\\\\"$/;"	v
g:gutentags_plat_dir	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . '\/plat\/unix\/'$/;"	v
g:gutentags_project_info	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_project_info = get(g:, 'gutentags_project_info', [])$/;"	v
g:gutentags_project_root	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^    let g:gutentags_project_root += ['.git', '.hg', '.svn', '.bzr', '_darcs', '_FOSSIL_', '.fslc/;"	v
g:gutentags_project_root	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root = get(g:, 'gutentags_project_root', [])$/;"	v
g:gutentags_project_root_finder	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root_finder = get(g:, 'gutentags_project_root_finder', '')$/;"	v
g:gutentags_res_dir	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . "\\\\res\\\\"$/;"	v
g:gutentags_res_dir	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . '\/res\/'$/;"	v
g:gutentags_resolve_symlinks	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_resolve_symlinks = get(g:, 'gutentags_resolve_symlinks', 0)$/;"	v
g:gutentags_scopefile	.vim/pack/ide/start/gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_scopefile = 'cscope.out'$/;"	v
g:gutentags_script_ext	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.cmd'$/;"	v
g:gutentags_script_ext	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.sh'$/;"	v
g:gutentags_trace	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^            let g:gutentags_trace = l:prev_trace$/;"	v
g:gutentags_trace	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = 1$/;"	v
g:gutentags_trace	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = a:1$/;"	v
g:gutentags_trace	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = l:trace_backup$/;"	v
g:gutentags_trace	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^    let g:gutentags_trace = !g:gutentags_trace$/;"	v
g:gutentags_trace	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_trace = get(g:, 'gutentags_trace', 0)$/;"	v
g:gutentags_use_jobs	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:gutentags_use_jobs = get(g:, 'gutentags_use_jobs', has('job'))$/;"	v
g:indent_guides_auto_colors	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^let g:indent_guides_auto_colors = 0$/;"	v
g:inkpot_black_background	.vim/colors/inkpot.vim	/^    let g:inkpot_black_background = 0$/;"	v
g:io_fugitive	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^let g:io_fugitive = {$/;"	v
g:loaded_airline	.vim/pack/ide/start/airline/plugin/airline.vim	/^let g:loaded_airline = 1$/;"	v
g:loaded_astronaut	.vim/colors/astronaut.vim	/^let g:loaded_astronaut = "v7"$/;"	v
g:loaded_ctrlp	.vim/pack/ide/start/ctrlp/plugin/ctrlp.vim	/^let g:loaded_ctrlp = 1$/;"	v
g:loaded_ctrlp_bookmarkdir	.vim/pack/ide/start/ctrlp/autoload/ctrlp/bookmarkdir.vim	/^let g:loaded_ctrlp_bookmarkdir = 1$/;"	v
g:loaded_ctrlp_buftag	.vim/pack/ide/start/ctrlp/autoload/ctrlp/buffertag.vim	/^let g:loaded_ctrlp_buftag = 1$/;"	v
g:loaded_ctrlp_changes	.vim/pack/ide/start/ctrlp/autoload/ctrlp/changes.vim	/^let g:loaded_ctrlp_changes = 1$/;"	v
g:loaded_ctrlp_line	.vim/pack/ide/start/ctrlp/autoload/ctrlp/line.vim	/^let g:loaded_ctrlp_line = 1$/;"	v
g:loaded_ctrlp_quickfix	.vim/pack/ide/start/ctrlp/autoload/ctrlp/quickfix.vim	/^let g:loaded_ctrlp_quickfix = 1$/;"	v
g:loaded_ctrlp_tag	.vim/pack/ide/start/ctrlp/autoload/ctrlp/tag.vim	/^let g:loaded_ctrlp_tag = 1$/;"	v
g:loaded_ctrlp_undo	.vim/pack/ide/start/ctrlp/autoload/ctrlp/undo.vim	/^let g:loaded_ctrlp_undo = 1$/;"	v
g:loaded_cursormode	.vim/pack/ide/start/airline/autoload/airline/extensions/cursormode.vim	/^let g:loaded_cursormode = 1$/;"	v
g:loaded_fugitive	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^let g:loaded_fugitive = 1$/;"	v
g:loaded_gutentags	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^let g:loaded_gutentags = 1$/;"	v
g:loaded_nerdtree_autoload	.vim/pack/ide/start/nerdtree/autoload/nerdtree.vim	/^let g:loaded_nerdtree_autoload = 1$/;"	v
g:loaded_nerdtree_exec_menuitem	.vim/pack/ide/start/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	.vim/pack/ide/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:loaded_nerdtree_ui_glue_autoload	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^let g:loaded_nerdtree_ui_glue_autoload = 1$/;"	v
g:loaded_signify	.vim/pack/ide/start/signify/plugin/signify.vim	/^let g:loaded_signify = 1$/;"	v
g:loaded_solarized_menu	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let g:loaded_solarized_menu = 1$/;"	v
g:loaded_surround	.vim/pack/ide/start/surround/plugin/surround.vim	/^let g:loaded_surround = 1$/;"	v
g:loaded_syntastic_actionscript_mxmlc_checker	.vim/pack/ide/start/syntastic/syntax_checkers/actionscript/mxmlc.vim	/^let g:loaded_syntastic_actionscript_mxmlc_checker = 1$/;"	v
g:loaded_syntastic_ada_gcc_checker	.vim/pack/ide/start/syntastic/syntax_checkers/ada/gcc.vim	/^let g:loaded_syntastic_ada_gcc_checker = 1$/;"	v
g:loaded_syntastic_ansible_ansible_lint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/ansible/ansible_lint.vim	/^let g:loaded_syntastic_ansible_ansible_lint_checker = 1$/;"	v
g:loaded_syntastic_apiblueprint_drafter_checker	.vim/pack/ide/start/syntastic/syntax_checkers/apiblueprint/drafter.vim	/^let g:loaded_syntastic_apiblueprint_drafter_checker = 1$/;"	v
g:loaded_syntastic_applescript_osacompile_checker	.vim/pack/ide/start/syntastic/syntax_checkers/applescript/osacompile.vim	/^let g:loaded_syntastic_applescript_osacompile_checker = 1$/;"	v
g:loaded_syntastic_asciidoc_asciidoc_checker	.vim/pack/ide/start/syntastic/syntax_checkers/asciidoc/asciidoc.vim	/^let g:loaded_syntastic_asciidoc_asciidoc_checker = 1$/;"	v
g:loaded_syntastic_asciidoc_proselint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/asciidoc/proselint.vim	/^let g:loaded_syntastic_asciidoc_proselint_checker = 1$/;"	v
g:loaded_syntastic_asl_iasl_checker	.vim/pack/ide/start/syntastic/syntax_checkers/asl/iasl.vim	/^let g:loaded_syntastic_asl_iasl_checker = 1$/;"	v
g:loaded_syntastic_asm_gcc_checker	.vim/pack/ide/start/syntastic/syntax_checkers/asm/gcc.vim	/^let g:loaded_syntastic_asm_gcc_checker = 1$/;"	v
g:loaded_syntastic_bemhtml_bemhtmllint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/bemhtml/bemhtmllint.vim	/^let g:loaded_syntastic_bemhtml_bemhtmllint_checker = 1$/;"	v
g:loaded_syntastic_bro_bro_checker	.vim/pack/ide/start/syntastic/syntax_checkers/bro/bro.vim	/^let g:loaded_syntastic_bro_bro_checker = 1$/;"	v
g:loaded_syntastic_c_autoload	.vim/pack/ide/start/syntastic/autoload/syntastic/c.vim	/^let g:loaded_syntastic_c_autoload = 1$/;"	v
g:loaded_syntastic_c_avrgcc_checker	.vim/pack/ide/start/syntastic/syntax_checkers/c/avrgcc.vim	/^let g:loaded_syntastic_c_avrgcc_checker = 1$/;"	v
g:loaded_syntastic_c_checkpatch_checker	.vim/pack/ide/start/syntastic/syntax_checkers/c/checkpatch.vim	/^let g:loaded_syntastic_c_checkpatch_checker = 1$/;"	v
g:loaded_syntastic_c_clang_check_checker	.vim/pack/ide/start/syntastic/syntax_checkers/c/clang_check.vim	/^let g:loaded_syntastic_c_clang_check_checker = 1$/;"	v
g:loaded_syntastic_c_clang_tidy_checker	.vim/pack/ide/start/syntastic/syntax_checkers/c/clang_tidy.vim	/^let g:loaded_syntastic_c_clang_tidy_checker = 1$/;"	v
g:loaded_syntastic_c_cppcheck_checker	.vim/pack/ide/start/syntastic/syntax_checkers/c/cppcheck.vim	/^let g:loaded_syntastic_c_cppcheck_checker = 1$/;"	v
g:loaded_syntastic_c_cppclean_checker	.vim/pack/ide/start/syntastic/syntax_checkers/c/cppclean.vim	/^let g:loaded_syntastic_c_cppclean_checker = 1$/;"	v
g:loaded_syntastic_c_flawfinder_checker	.vim/pack/ide/start/syntastic/syntax_checkers/c/flawfinder.vim	/^let g:loaded_syntastic_c_flawfinder_checker = 1$/;"	v
g:loaded_syntastic_c_gcc_checker	.vim/pack/ide/start/syntastic/syntax_checkers/c/gcc.vim	/^let g:loaded_syntastic_c_gcc_checker = 1$/;"	v
g:loaded_syntastic_c_make_checker	.vim/pack/ide/start/syntastic/syntax_checkers/c/make.vim	/^let g:loaded_syntastic_c_make_checker = 1$/;"	v
g:loaded_syntastic_c_oclint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/c/oclint.vim	/^let g:loaded_syntastic_c_oclint_checker = 1$/;"	v
g:loaded_syntastic_c_pc_lint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/c/pc_lint.vim	/^let g:loaded_syntastic_c_pc_lint_checker = 1$/;"	v
g:loaded_syntastic_c_sparse_checker	.vim/pack/ide/start/syntastic/syntax_checkers/c/sparse.vim	/^let g:loaded_syntastic_c_sparse_checker = 1$/;"	v
g:loaded_syntastic_c_splint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/c/splint.vim	/^let g:loaded_syntastic_c_splint_checker = 1$/;"	v
g:loaded_syntastic_cabal_cabal_checker	.vim/pack/ide/start/syntastic/syntax_checkers/cabal/cabal.vim	/^let g:loaded_syntastic_cabal_cabal_checker = 1$/;"	v
g:loaded_syntastic_checker	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^let g:loaded_syntastic_checker = 1$/;"	v
g:loaded_syntastic_chef_foodcritic_checker	.vim/pack/ide/start/syntastic/syntax_checkers/chef/foodcritic.vim	/^let g:loaded_syntastic_chef_foodcritic_checker = 1$/;"	v
g:loaded_syntastic_cmake_cmakelint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/cmake/cmakelint.vim	/^let g:loaded_syntastic_cmake_cmakelint_checker = 1$/;"	v
g:loaded_syntastic_co_coco_checker	.vim/pack/ide/start/syntastic/syntax_checkers/co/coco.vim	/^let g:loaded_syntastic_co_coco_checker = 1$/;"	v
g:loaded_syntastic_cobol_cobc_checker	.vim/pack/ide/start/syntastic/syntax_checkers/cobol/cobc.vim	/^let g:loaded_syntastic_cobol_cobc_checker = 1$/;"	v
g:loaded_syntastic_coffee_coffee_checker	.vim/pack/ide/start/syntastic/syntax_checkers/coffee/coffee.vim	/^let g:loaded_syntastic_coffee_coffee_checker = 1$/;"	v
g:loaded_syntastic_coffee_coffee_jshint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/coffee/coffee_jshint.vim	/^let g:loaded_syntastic_coffee_coffee_jshint_checker = 1$/;"	v
g:loaded_syntastic_coffee_coffeelint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/coffee/coffeelint.vim	/^let g:loaded_syntastic_coffee_coffeelint_checker = 1$/;"	v
g:loaded_syntastic_coq_coqtop_checker	.vim/pack/ide/start/syntastic/syntax_checkers/coq/coqtop.vim	/^let g:loaded_syntastic_coq_coqtop_checker = 1$/;"	v
g:loaded_syntastic_cpp_avrgcc_checker	.vim/pack/ide/start/syntastic/syntax_checkers/cpp/avrgcc.vim	/^let g:loaded_syntastic_cpp_avrgcc_checker = 1$/;"	v
g:loaded_syntastic_cpp_clang_check_checker	.vim/pack/ide/start/syntastic/syntax_checkers/cpp/clang_check.vim	/^let g:loaded_syntastic_cpp_clang_check_checker = 1$/;"	v
g:loaded_syntastic_cpp_clang_tidy_checker	.vim/pack/ide/start/syntastic/syntax_checkers/cpp/clang_tidy.vim	/^let g:loaded_syntastic_cpp_clang_tidy_checker = 1$/;"	v
g:loaded_syntastic_cpp_cppcheck_checker	.vim/pack/ide/start/syntastic/syntax_checkers/cpp/cppcheck.vim	/^let g:loaded_syntastic_cpp_cppcheck_checker = 1$/;"	v
g:loaded_syntastic_cpp_cppclean_checker	.vim/pack/ide/start/syntastic/syntax_checkers/cpp/cppclean.vim	/^let g:loaded_syntastic_cpp_cppclean_checker = 1$/;"	v
g:loaded_syntastic_cpp_cpplint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/cpp/cpplint.vim	/^let g:loaded_syntastic_cpp_cpplint_checker = 1$/;"	v
g:loaded_syntastic_cpp_flawfinder_checker	.vim/pack/ide/start/syntastic/syntax_checkers/cpp/flawfinder.vim	/^let g:loaded_syntastic_cpp_flawfinder_checker = 1$/;"	v
g:loaded_syntastic_cpp_gcc_checker	.vim/pack/ide/start/syntastic/syntax_checkers/cpp/gcc.vim	/^let g:loaded_syntastic_cpp_gcc_checker = 1$/;"	v
g:loaded_syntastic_cpp_oclint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/cpp/oclint.vim	/^let g:loaded_syntastic_cpp_oclint_checker = 1$/;"	v
g:loaded_syntastic_cpp_pc_lint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/cpp/pc_lint.vim	/^let g:loaded_syntastic_cpp_pc_lint_checker = 1$/;"	v
g:loaded_syntastic_cpp_verapp_checker	.vim/pack/ide/start/syntastic/syntax_checkers/cpp/verapp.vim	/^let g:loaded_syntastic_cpp_verapp_checker = 1$/;"	v
g:loaded_syntastic_cs_mcs_checker	.vim/pack/ide/start/syntastic/syntax_checkers/cs/mcs.vim	/^let g:loaded_syntastic_cs_mcs_checker = 1$/;"	v
g:loaded_syntastic_css_csslint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/css/csslint.vim	/^let g:loaded_syntastic_css_csslint_checker = 1$/;"	v
g:loaded_syntastic_css_mixedindentlint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/css/mixedindentlint.vim	/^let g:loaded_syntastic_css_mixedindentlint_checker = 1$/;"	v
g:loaded_syntastic_css_phpcs_checker	.vim/pack/ide/start/syntastic/syntax_checkers/css/phpcs.vim	/^let g:loaded_syntastic_css_phpcs_checker = 1$/;"	v
g:loaded_syntastic_css_prettycss_checker	.vim/pack/ide/start/syntastic/syntax_checkers/css/prettycss.vim	/^let g:loaded_syntastic_css_prettycss_checker = 1$/;"	v
g:loaded_syntastic_css_recess_checker	.vim/pack/ide/start/syntastic/syntax_checkers/css/recess.vim	/^let g:loaded_syntastic_css_recess_checker = 1$/;"	v
g:loaded_syntastic_css_stylelint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/css/stylelint.vim	/^let g:loaded_syntastic_css_stylelint_checker = 1$/;"	v
g:loaded_syntastic_cucumber_cucumber_checker	.vim/pack/ide/start/syntastic/syntax_checkers/cucumber/cucumber.vim	/^let g:loaded_syntastic_cucumber_cucumber_checker = 1$/;"	v
g:loaded_syntastic_cuda_nvcc_checker	.vim/pack/ide/start/syntastic/syntax_checkers/cuda/nvcc.vim	/^let g:loaded_syntastic_cuda_nvcc_checker = 1$/;"	v
g:loaded_syntastic_d_dmd_checker	.vim/pack/ide/start/syntastic/syntax_checkers/d/dmd.vim	/^let g:loaded_syntastic_d_dmd_checker = 1$/;"	v
g:loaded_syntastic_d_dscanner_checker	.vim/pack/ide/start/syntastic/syntax_checkers/d/dscanner.vim	/^let g:loaded_syntastic_d_dscanner_checker = 1$/;"	v
g:loaded_syntastic_dart_dartanalyzer_checker	.vim/pack/ide/start/syntastic/syntax_checkers/dart/dartanalyzer.vim	/^let g:loaded_syntastic_dart_dartanalyzer_checker = 1$/;"	v
g:loaded_syntastic_docbk_igor_checker	.vim/pack/ide/start/syntastic/syntax_checkers/docbk/igor.vim	/^let g:loaded_syntastic_docbk_igor_checker = 1$/;"	v
g:loaded_syntastic_docbk_xmllint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/docbk/xmllint.vim	/^let g:loaded_syntastic_docbk_xmllint_checker = 1$/;"	v
g:loaded_syntastic_dockerfile_dockerfile_lint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/dockerfile/dockerfile_lint.vim	/^let g:loaded_syntastic_dockerfile_dockerfile_lint_checker = 1$/;"	v
g:loaded_syntastic_dockerfile_hadolint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/dockerfile/hadolint.vim	/^let g:loaded_syntastic_dockerfile_hadolint_checker = 1$/;"	v
g:loaded_syntastic_dustjs_swiffer_checker	.vim/pack/ide/start/syntastic/syntax_checkers/dustjs/swiffer.vim	/^let g:loaded_syntastic_dustjs_swiffer_checker = 1$/;"	v
g:loaded_syntastic_elixir_elixir_checker	.vim/pack/ide/start/syntastic/syntax_checkers/elixir/elixir.vim	/^let g:loaded_syntastic_elixir_elixir_checker = 1$/;"	v
g:loaded_syntastic_erlang_erlang_checker	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/escript.vim	/^let g:loaded_syntastic_erlang_erlang_checker = 1$/;"	v
g:loaded_syntastic_erlang_syntaxerl_checker	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/syntaxerl.vim	/^let g:loaded_syntastic_erlang_syntaxerl_checker = 1$/;"	v
g:loaded_syntastic_eruby_ruby_checker	.vim/pack/ide/start/syntastic/syntax_checkers/eruby/ruby.vim	/^let g:loaded_syntastic_eruby_ruby_checker = 1$/;"	v
g:loaded_syntastic_fortran_gfortran_checker	.vim/pack/ide/start/syntastic/syntax_checkers/fortran/gfortran.vim	/^let g:loaded_syntastic_fortran_gfortran_checker = 1$/;"	v
g:loaded_syntastic_glsl_cgc_checker	.vim/pack/ide/start/syntastic/syntax_checkers/glsl/cgc.vim	/^let g:loaded_syntastic_glsl_cgc_checker = 1$/;"	v
g:loaded_syntastic_go_go_checker	.vim/pack/ide/start/syntastic/syntax_checkers/go/go.vim	/^let g:loaded_syntastic_go_go_checker = 1$/;"	v
g:loaded_syntastic_go_gofmt_checker	.vim/pack/ide/start/syntastic/syntax_checkers/go/gofmt.vim	/^let g:loaded_syntastic_go_gofmt_checker = 1$/;"	v
g:loaded_syntastic_go_golangci_lint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/go/golangci_lint.vim	/^let g:loaded_syntastic_go_golangci_lint_checker = 1$/;"	v
g:loaded_syntastic_go_golint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/go/golint.vim	/^let g:loaded_syntastic_go_golint_checker = 1$/;"	v
g:loaded_syntastic_go_gometalinter_checker	.vim/pack/ide/start/syntastic/syntax_checkers/go/gometalinter.vim	/^let g:loaded_syntastic_go_gometalinter_checker = 1$/;"	v
g:loaded_syntastic_go_gotype_checker	.vim/pack/ide/start/syntastic/syntax_checkers/go/gotype.vim	/^let g:loaded_syntastic_go_gotype_checker = 1$/;"	v
g:loaded_syntastic_go_govet_checker	.vim/pack/ide/start/syntastic/syntax_checkers/go/govet.vim	/^let g:loaded_syntastic_go_govet_checker = 1$/;"	v
g:loaded_syntastic_haml_haml_checker	.vim/pack/ide/start/syntastic/syntax_checkers/haml/haml.vim	/^let g:loaded_syntastic_haml_haml_checker = 1$/;"	v
g:loaded_syntastic_haml_haml_lint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/haml/haml_lint.vim	/^let g:loaded_syntastic_haml_haml_lint_checker = 1$/;"	v
g:loaded_syntastic_handlebars_handlebars_checker	.vim/pack/ide/start/syntastic/syntax_checkers/handlebars/handlebars.vim	/^let g:loaded_syntastic_handlebars_handlebars_checker = 1$/;"	v
g:loaded_syntastic_haskell_hdevtools_checker	.vim/pack/ide/start/syntastic/syntax_checkers/haskell/hdevtools.vim	/^let g:loaded_syntastic_haskell_hdevtools_checker = 1$/;"	v
g:loaded_syntastic_haskell_hlint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/haskell/hlint.vim	/^let g:loaded_syntastic_haskell_hlint_checker = 1$/;"	v
g:loaded_syntastic_haskell_scan_checker	.vim/pack/ide/start/syntastic/syntax_checkers/haskell/scan.vim	/^let g:loaded_syntastic_haskell_scan_checker = 1$/;"	v
g:loaded_syntastic_haxe_haxe_checker	.vim/pack/ide/start/syntastic/syntax_checkers/haxe/haxe.vim	/^let g:loaded_syntastic_haxe_haxe_checker = 1$/;"	v
g:loaded_syntastic_help_proselint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/help/proselint.vim	/^let g:loaded_syntastic_help_proselint_checker = 1$/;"	v
g:loaded_syntastic_hss_hss_checker	.vim/pack/ide/start/syntastic/syntax_checkers/hss/hss.vim	/^let g:loaded_syntastic_hss_hss_checker = 1$/;"	v
g:loaded_syntastic_html_eslint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/html/eslint.vim	/^let g:loaded_syntastic_html_eslint_checker = 1$/;"	v
g:loaded_syntastic_html_gjslint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/html/gjslint.vim	/^let g:loaded_syntastic_html_gjslint_checker = 1$/;"	v
g:loaded_syntastic_html_htmlhint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/html/htmlhint.vim	/^let g:loaded_syntastic_html_htmlhint_checker = 1$/;"	v
g:loaded_syntastic_html_jshint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/html/jshint.vim	/^let g:loaded_syntastic_html_jshint_checker = 1$/;"	v
g:loaded_syntastic_html_proselint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/html/proselint.vim	/^let g:loaded_syntastic_html_proselint_checker = 1$/;"	v
g:loaded_syntastic_html_stylelint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/html/stylelint.vim	/^let g:loaded_syntastic_html_stylelint_checker = 1$/;"	v
g:loaded_syntastic_html_textlint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/html/textlint.vim	/^let g:loaded_syntastic_html_textlint_checker = 1$/;"	v
g:loaded_syntastic_html_tidy_checker	.vim/pack/ide/start/syntastic/syntax_checkers/html/tidy.vim	/^let g:loaded_syntastic_html_tidy_checker = 1$/;"	v
g:loaded_syntastic_html_validator_checker	.vim/pack/ide/start/syntastic/syntax_checkers/html/validator.vim	/^let g:loaded_syntastic_html_validator_checker=1$/;"	v
g:loaded_syntastic_html_w3_checker	.vim/pack/ide/start/syntastic/syntax_checkers/html/w3.vim	/^let g:loaded_syntastic_html_w3_checker = 1$/;"	v
g:loaded_syntastic_jade_jade_lint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/jade/jade_lint.vim	/^let g:loaded_syntastic_jade_jade_lint_checker = 1$/;"	v
g:loaded_syntastic_java_checkstyle_checker	.vim/pack/ide/start/syntastic/syntax_checkers/java/checkstyle.vim	/^let g:loaded_syntastic_java_checkstyle_checker = 1$/;"	v
g:loaded_syntastic_java_javac_checker	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^let g:loaded_syntastic_java_javac_checker = 1$/;"	v
g:loaded_syntastic_javascript_closurecompiler_checker	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/closurecompiler.vim	/^let g:loaded_syntastic_javascript_closurecompiler_checker = 1$/;"	v
g:loaded_syntastic_javascript_eslint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/eslint.vim	/^let g:loaded_syntastic_javascript_eslint_checker = 1$/;"	v
g:loaded_syntastic_javascript_flow_checker	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/flow.vim	/^let g:loaded_syntastic_javascript_flow_checker = 1$/;"	v
g:loaded_syntastic_javascript_gjslint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/gjslint.vim	/^let g:loaded_syntastic_javascript_gjslint_checker = 1$/;"	v
g:loaded_syntastic_javascript_jscs_checker	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/jscs.vim	/^let g:loaded_syntastic_javascript_jscs_checker = 1$/;"	v
g:loaded_syntastic_javascript_jshint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/jshint.vim	/^let g:loaded_syntastic_javascript_jshint_checker = 1$/;"	v
g:loaded_syntastic_javascript_jsl_checker	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/jsl.vim	/^let g:loaded_syntastic_javascript_jsl_checker = 1$/;"	v
g:loaded_syntastic_javascript_jslint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/jslint.vim	/^let g:loaded_syntastic_javascript_jslint_checker = 1$/;"	v
g:loaded_syntastic_javascript_jsxhint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/jsxhint.vim	/^let g:loaded_syntastic_javascript_jsxhint_checker = 1$/;"	v
g:loaded_syntastic_javascript_lynt_checker	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/lynt.vim	/^let g:loaded_syntastic_javascript_lynt_checker = 1$/;"	v
g:loaded_syntastic_javascript_mixedindentlint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/mixedindentlint.vim	/^let g:loaded_syntastic_javascript_mixedindentlint_checker = 1$/;"	v
g:loaded_syntastic_javascript_standard_checker	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/standard.vim	/^let g:loaded_syntastic_javascript_standard_checker = 1$/;"	v
g:loaded_syntastic_javascript_tern_lint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/tern_lint.vim	/^let g:loaded_syntastic_javascript_tern_lint_checker = 1$/;"	v
g:loaded_syntastic_json_jsonlint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/json/jsonlint.vim	/^let g:loaded_syntastic_json_jsonlint_checker = 1$/;"	v
g:loaded_syntastic_json_jsonval_checker	.vim/pack/ide/start/syntastic/syntax_checkers/json/jsonval.vim	/^let g:loaded_syntastic_json_jsonval_checker = 1$/;"	v
g:loaded_syntastic_less_lessc_checker	.vim/pack/ide/start/syntastic/syntax_checkers/less/lessc.vim	/^let g:loaded_syntastic_less_lessc_checker = 1$/;"	v
g:loaded_syntastic_less_recess_checker	.vim/pack/ide/start/syntastic/syntax_checkers/less/recess.vim	/^let g:loaded_syntastic_less_recess_checker = 1$/;"	v
g:loaded_syntastic_less_stylelint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/less/stylelint.vim	/^let g:loaded_syntastic_less_stylelint_checker = 1$/;"	v
g:loaded_syntastic_lex_flex_checker	.vim/pack/ide/start/syntastic/syntax_checkers/lex/flex.vim	/^let g:loaded_syntastic_lex_flex_checker = 1$/;"	v
g:loaded_syntastic_limbo_limbo_checker	.vim/pack/ide/start/syntastic/syntax_checkers/limbo/limbo.vim	/^let g:loaded_syntastic_limbo_limbo_checker = 1$/;"	v
g:loaded_syntastic_lisp_clisp_checker	.vim/pack/ide/start/syntastic/syntax_checkers/lisp/clisp.vim	/^let g:loaded_syntastic_lisp_clisp_checker = 1$/;"	v
g:loaded_syntastic_llvm_llvm_checker	.vim/pack/ide/start/syntastic/syntax_checkers/llvm/llvm.vim	/^let g:loaded_syntastic_llvm_llvm_checker = 1$/;"	v
g:loaded_syntastic_loclist	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^let g:loaded_syntastic_loclist = 1$/;"	v
g:loaded_syntastic_log_autoload	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^let g:loaded_syntastic_log_autoload = 1$/;"	v
g:loaded_syntastic_lua_luac_checker	.vim/pack/ide/start/syntastic/syntax_checkers/lua/luac.vim	/^let g:loaded_syntastic_lua_luac_checker = 1$/;"	v
g:loaded_syntastic_lua_luacheck_checker	.vim/pack/ide/start/syntastic/syntax_checkers/lua/luacheck.vim	/^let g:loaded_syntastic_lua_luacheck_checker = 1$/;"	v
g:loaded_syntastic_markdown_mdl_checker	.vim/pack/ide/start/syntastic/syntax_checkers/markdown/mdl.vim	/^let g:loaded_syntastic_markdown_mdl_checker = 1$/;"	v
g:loaded_syntastic_markdown_proselint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/markdown/proselint.vim	/^let g:loaded_syntastic_markdown_proselint_checker = 1$/;"	v
g:loaded_syntastic_markdown_remark_lint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/markdown/remark_lint.vim	/^let g:loaded_syntastic_markdown_remark_lint_checker = 1$/;"	v
g:loaded_syntastic_markdown_textlint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/markdown/textlint.vim	/^let g:loaded_syntastic_markdown_textlint_checker = 1$/;"	v
g:loaded_syntastic_matlab_mlint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/matlab/mlint.vim	/^let g:loaded_syntastic_matlab_mlint_checker = 1$/;"	v
g:loaded_syntastic_mercury_mmc_checker	.vim/pack/ide/start/syntastic/syntax_checkers/mercury/mmc.vim	/^let g:loaded_syntastic_mercury_mmc_checker = 1$/;"	v
g:loaded_syntastic_modemap	.vim/pack/ide/start/syntastic/plugin/syntastic/modemap.vim	/^let g:loaded_syntastic_modemap = 1$/;"	v
g:loaded_syntastic_nasm_nasm_checker	.vim/pack/ide/start/syntastic/syntax_checkers/nasm/nasm.vim	/^let g:loaded_syntastic_nasm_nasm_checker = 1$/;"	v
g:loaded_syntastic_nix_nix_checker	.vim/pack/ide/start/syntastic/syntax_checkers/nix/nix.vim	/^let g:loaded_syntastic_nix_nix_checker = 1$/;"	v
g:loaded_syntastic_notifier_autoloclist	.vim/pack/ide/start/syntastic/plugin/syntastic/autoloclist.vim	/^let g:loaded_syntastic_notifier_autoloclist = 1$/;"	v
g:loaded_syntastic_notifier_balloons	.vim/pack/ide/start/syntastic/plugin/syntastic/balloons.vim	/^let g:loaded_syntastic_notifier_balloons = 1$/;"	v
g:loaded_syntastic_notifier_cursor	.vim/pack/ide/start/syntastic/plugin/syntastic/cursor.vim	/^let g:loaded_syntastic_notifier_cursor = 1$/;"	v
g:loaded_syntastic_notifier_highlighting	.vim/pack/ide/start/syntastic/plugin/syntastic/highlighting.vim	/^let g:loaded_syntastic_notifier_highlighting = 1$/;"	v
g:loaded_syntastic_notifier_signs	.vim/pack/ide/start/syntastic/plugin/syntastic/signs.vim	/^let g:loaded_syntastic_notifier_signs = 1$/;"	v
g:loaded_syntastic_notifiers	.vim/pack/ide/start/syntastic/plugin/syntastic/notifiers.vim	/^let g:loaded_syntastic_notifiers = 1$/;"	v
g:loaded_syntastic_nroff_igor_checker	.vim/pack/ide/start/syntastic/syntax_checkers/nroff/igor.vim	/^let g:loaded_syntastic_nroff_igor_checker = 1$/;"	v
g:loaded_syntastic_nroff_mandoc_checker	.vim/pack/ide/start/syntastic/syntax_checkers/nroff/mandoc.vim	/^let g:loaded_syntastic_nroff_mandoc_checker = 1$/;"	v
g:loaded_syntastic_nroff_proselint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/nroff/proselint.vim	/^let g:loaded_syntastic_nroff_proselint_checker = 1$/;"	v
g:loaded_syntastic_objc_gcc_checker	.vim/pack/ide/start/syntastic/syntax_checkers/objc/gcc.vim	/^let g:loaded_syntastic_objc_gcc_checker = 1$/;"	v
g:loaded_syntastic_objc_oclint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/objc/oclint.vim	/^let g:loaded_syntastic_objc_oclint_checker = 1$/;"	v
g:loaded_syntastic_objcpp_gcc_checker	.vim/pack/ide/start/syntastic/syntax_checkers/objcpp/gcc.vim	/^let g:loaded_syntastic_objcpp_gcc_checker = 1$/;"	v
g:loaded_syntastic_objcpp_oclint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/objcpp/oclint.vim	/^let g:loaded_syntastic_objcpp_oclint_checker = 1$/;"	v
g:loaded_syntastic_ocaml_camlp4o_checker	.vim/pack/ide/start/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^let g:loaded_syntastic_ocaml_camlp4o_checker = 1$/;"	v
g:loaded_syntastic_perl6_perl6_checker	.vim/pack/ide/start/syntastic/syntax_checkers/perl6/perl6.vim	/^let g:loaded_syntastic_perl6_perl6_checker = 1$/;"	v
g:loaded_syntastic_perl_perl_checker	.vim/pack/ide/start/syntastic/syntax_checkers/perl/perl.vim	/^let g:loaded_syntastic_perl_perl_checker = 1$/;"	v
g:loaded_syntastic_perl_perlcritic_checker	.vim/pack/ide/start/syntastic/syntax_checkers/perl/perlcritic.vim	/^let g:loaded_syntastic_perl_perlcritic_checker = 1$/;"	v
g:loaded_syntastic_perl_podchecker_checker	.vim/pack/ide/start/syntastic/syntax_checkers/perl/podchecker.vim	/^let g:loaded_syntastic_perl_podchecker_checker = 1$/;"	v
g:loaded_syntastic_php_php_checker	.vim/pack/ide/start/syntastic/syntax_checkers/php/php.vim	/^let g:loaded_syntastic_php_php_checker = 1$/;"	v
g:loaded_syntastic_php_phpcs_checker	.vim/pack/ide/start/syntastic/syntax_checkers/php/phpcs.vim	/^let g:loaded_syntastic_php_phpcs_checker = 1$/;"	v
g:loaded_syntastic_php_phplint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/php/phplint.vim	/^let g:loaded_syntastic_php_phplint_checker = 1$/;"	v
g:loaded_syntastic_php_phpmd_checker	.vim/pack/ide/start/syntastic/syntax_checkers/php/phpmd.vim	/^let g:loaded_syntastic_php_phpmd_checker = 1$/;"	v
g:loaded_syntastic_php_phpstan_checker	.vim/pack/ide/start/syntastic/syntax_checkers/php/phpstan.vim	/^let g:loaded_syntastic_php_phpstan_checker = 1$/;"	v
g:loaded_syntastic_plugin	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^let g:loaded_syntastic_plugin = 1$/;"	v
g:loaded_syntastic_po_dennis_checker	.vim/pack/ide/start/syntastic/syntax_checkers/po/dennis.vim	/^let g:loaded_syntastic_po_dennis_checker = 1$/;"	v
g:loaded_syntastic_po_msgfmt_checker	.vim/pack/ide/start/syntastic/syntax_checkers/po/msgfmt.vim	/^let g:loaded_syntastic_po_msgfmt_checker = 1$/;"	v
g:loaded_syntastic_pod_podchecker_checker	.vim/pack/ide/start/syntastic/syntax_checkers/pod/podchecker.vim	/^let g:loaded_syntastic_pod_podchecker_checker = 1$/;"	v
g:loaded_syntastic_pod_proselint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/pod/proselint.vim	/^let g:loaded_syntastic_pod_proselint_checker = 1$/;"	v
g:loaded_syntastic_postprocess_autoload	.vim/pack/ide/start/syntastic/autoload/syntastic/postprocess.vim	/^let g:loaded_syntastic_postprocess_autoload = 1$/;"	v
g:loaded_syntastic_preprocess_autoload	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^let g:loaded_syntastic_preprocess_autoload = 1$/;"	v
g:loaded_syntastic_pug_pug_lint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/pug/pug_lint.vim	/^let g:loaded_syntastic_pug_pug_lint_checker = 1$/;"	v
g:loaded_syntastic_puppet_puppet_checker	.vim/pack/ide/start/syntastic/syntax_checkers/puppet/puppet.vim	/^let g:loaded_syntastic_puppet_puppet_checker = 1$/;"	v
g:loaded_syntastic_puppet_puppetlint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/puppet/puppetlint.vim	/^let g:loaded_syntastic_puppet_puppetlint_checker = 1$/;"	v
g:loaded_syntastic_python_bandit_checker	.vim/pack/ide/start/syntastic/syntax_checkers/python/bandit.vim	/^let g:loaded_syntastic_python_bandit_checker = 1$/;"	v
g:loaded_syntastic_python_flake8_checker	.vim/pack/ide/start/syntastic/syntax_checkers/python/flake8.vim	/^let g:loaded_syntastic_python_flake8_checker = 1$/;"	v
g:loaded_syntastic_python_frosted_checker	.vim/pack/ide/start/syntastic/syntax_checkers/python/frosted.vim	/^let g:loaded_syntastic_python_frosted_checker = 1$/;"	v
g:loaded_syntastic_python_mypy_checker	.vim/pack/ide/start/syntastic/syntax_checkers/python/mypy.vim	/^let g:loaded_syntastic_python_mypy_checker = 1$/;"	v
g:loaded_syntastic_python_pep257_checker	.vim/pack/ide/start/syntastic/syntax_checkers/python/pep257.vim	/^let g:loaded_syntastic_python_pep257_checker = 1$/;"	v
g:loaded_syntastic_python_pep8_checker	.vim/pack/ide/start/syntastic/syntax_checkers/python/pep8.vim	/^let g:loaded_syntastic_python_pep8_checker = 1$/;"	v
g:loaded_syntastic_python_prospector_checker	.vim/pack/ide/start/syntastic/syntax_checkers/python/prospector.vim	/^let g:loaded_syntastic_python_prospector_checker = 1$/;"	v
g:loaded_syntastic_python_py3kwarn_checker	.vim/pack/ide/start/syntastic/syntax_checkers/python/py3kwarn.vim	/^let g:loaded_syntastic_python_py3kwarn_checker = 1$/;"	v
g:loaded_syntastic_python_pycodestyle_checker	.vim/pack/ide/start/syntastic/syntax_checkers/python/pycodestyle.vim	/^let g:loaded_syntastic_python_pycodestyle_checker = 1$/;"	v
g:loaded_syntastic_python_pydocstyle_checker	.vim/pack/ide/start/syntastic/syntax_checkers/python/pydocstyle.vim	/^let g:loaded_syntastic_python_pydocstyle_checker = 1$/;"	v
g:loaded_syntastic_python_pyflakes_checker	.vim/pack/ide/start/syntastic/syntax_checkers/python/pyflakes.vim	/^let g:loaded_syntastic_python_pyflakes_checker = 1$/;"	v
g:loaded_syntastic_python_pylama_checker	.vim/pack/ide/start/syntastic/syntax_checkers/python/pylama.vim	/^let g:loaded_syntastic_python_pylama_checker = 1$/;"	v
g:loaded_syntastic_python_pylint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/python/pylint.vim	/^let g:loaded_syntastic_python_pylint_checker = 1$/;"	v
g:loaded_syntastic_python_python_checker	.vim/pack/ide/start/syntastic/syntax_checkers/python/python.vim	/^let g:loaded_syntastic_python_python_checker = 1$/;"	v
g:loaded_syntastic_qml_qmllint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/qml/qmllint.vim	/^let g:loaded_syntastic_qml_qmllint_checker = 1$/;"	v
g:loaded_syntastic_r_lint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/r/lint.vim	/^let g:loaded_syntastic_r_lint_checker = 1$/;"	v
g:loaded_syntastic_r_lintr_checker	.vim/pack/ide/start/syntastic/syntax_checkers/r/lintr.vim	/^let g:loaded_syntastic_r_lintr_checker = 1$/;"	v
g:loaded_syntastic_r_svtools_checker	.vim/pack/ide/start/syntastic/syntax_checkers/r/svtools.vim	/^let g:loaded_syntastic_r_svtools_checker = 1$/;"	v
g:loaded_syntastic_racket_code_ayatollah_checker	.vim/pack/ide/start/syntastic/syntax_checkers/racket/code-ayatollah.vim	/^let g:loaded_syntastic_racket_code_ayatollah_checker = 1$/;"	v
g:loaded_syntastic_racket_racket_checker	.vim/pack/ide/start/syntastic/syntax_checkers/racket/racket.vim	/^let g:loaded_syntastic_racket_racket_checker=1$/;"	v
g:loaded_syntastic_raku_raku_checker	.vim/pack/ide/start/syntastic/syntax_checkers/raku/raku.vim	/^let g:loaded_syntastic_raku_raku_checker = 1$/;"	v
g:loaded_syntastic_registry	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^let g:loaded_syntastic_registry = 1$/;"	v
g:loaded_syntastic_rmd_lintr_checker	.vim/pack/ide/start/syntastic/syntax_checkers/rmd/lintr.vim	/^let g:loaded_syntastic_rmd_lintr_checker = 1$/;"	v
g:loaded_syntastic_rnc_rnv_checker	.vim/pack/ide/start/syntastic/syntax_checkers/rnc/rnv.vim	/^let g:loaded_syntastic_rnc_rnv_checker = 1$/;"	v
g:loaded_syntastic_rst_proselint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/rst/proselint.vim	/^let g:loaded_syntastic_rst_proselint_checker = 1$/;"	v
g:loaded_syntastic_rst_rst2pseudoxml_checker	.vim/pack/ide/start/syntastic/syntax_checkers/rst/rst2pseudoxml.vim	/^let g:loaded_syntastic_rst_rst2pseudoxml_checker = 1$/;"	v
g:loaded_syntastic_rst_rstcheck_checker	.vim/pack/ide/start/syntastic/syntax_checkers/rst/rstcheck.vim	/^let g:loaded_syntastic_rst_rstcheck_checker = 1$/;"	v
g:loaded_syntastic_rst_sphinx_checker	.vim/pack/ide/start/syntastic/syntax_checkers/rst/sphinx.vim	/^let g:loaded_syntastic_rst_sphinx_checker = 1$/;"	v
g:loaded_syntastic_ruby_flog_checker	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/flog.vim	/^let g:loaded_syntastic_ruby_flog_checker = 1$/;"	v
g:loaded_syntastic_ruby_jruby_checker	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/jruby.vim	/^let g:loaded_syntastic_ruby_jruby_checker = 1$/;"	v
g:loaded_syntastic_ruby_macruby_checker	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/macruby.vim	/^let g:loaded_syntastic_ruby_macruby_checker = 1$/;"	v
g:loaded_syntastic_ruby_mri_checker	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/mri.vim	/^let g:loaded_syntastic_ruby_mri_checker = 1$/;"	v
g:loaded_syntastic_ruby_reek_checker	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/reek.vim	/^let g:loaded_syntastic_ruby_reek_checker = 1$/;"	v
g:loaded_syntastic_ruby_rubocop_checker	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/rubocop.vim	/^let g:loaded_syntastic_ruby_rubocop_checker = 1$/;"	v
g:loaded_syntastic_ruby_rubylint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/rubylint.vim	/^let g:loaded_syntastic_ruby_rubylint_checker = 1$/;"	v
g:loaded_syntastic_ruby_sorbet_checker	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/sorbet.vim	/^let g:loaded_syntastic_ruby_sorbet_checker = 1$/;"	v
g:loaded_syntastic_sass_sass_checker	.vim/pack/ide/start/syntastic/syntax_checkers/sass/sass.vim	/^let g:loaded_syntastic_sass_sass_checker = 1$/;"	v
g:loaded_syntastic_sass_sass_lint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/sass/sass_lint.vim	/^let g:loaded_syntastic_sass_sass_lint_checker = 1$/;"	v
g:loaded_syntastic_sass_sassc_checker	.vim/pack/ide/start/syntastic/syntax_checkers/sass/sassc.vim	/^let g:loaded_syntastic_sass_sassc_checker = 1$/;"	v
g:loaded_syntastic_scala_fsc_checker	.vim/pack/ide/start/syntastic/syntax_checkers/scala/fsc.vim	/^let g:loaded_syntastic_scala_fsc_checker = 1$/;"	v
g:loaded_syntastic_scala_scalac_checker	.vim/pack/ide/start/syntastic/syntax_checkers/scala/scalac.vim	/^let g:loaded_syntastic_scala_scalac_checker = 1$/;"	v
g:loaded_syntastic_scala_scalastyle_checker	.vim/pack/ide/start/syntastic/syntax_checkers/scala/scalastyle.vim	/^let g:loaded_syntastic_scala_scalastyle_checker = 1$/;"	v
g:loaded_syntastic_scss_mixedindentlint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/scss/mixedindentlint.vim	/^let g:loaded_syntastic_scss_mixedindentlint_checker = 1$/;"	v
g:loaded_syntastic_scss_sass_checker	.vim/pack/ide/start/syntastic/syntax_checkers/scss/sass.vim	/^let g:loaded_syntastic_scss_sass_checker = 1$/;"	v
g:loaded_syntastic_scss_sass_lint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/scss/sass_lint.vim	/^let g:loaded_syntastic_scss_sass_lint_checker = 1$/;"	v
g:loaded_syntastic_scss_sassc_checker	.vim/pack/ide/start/syntastic/syntax_checkers/scss/sassc.vim	/^let g:loaded_syntastic_scss_sassc_checker = 1$/;"	v
g:loaded_syntastic_scss_scss_lint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/scss/scss_lint.vim	/^let g:loaded_syntastic_scss_scss_lint_checker = 1$/;"	v
g:loaded_syntastic_scss_stylelint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/scss/stylelint.vim	/^let g:loaded_syntastic_scss_stylelint_checker = 1$/;"	v
g:loaded_syntastic_sh_bashate_checker	.vim/pack/ide/start/syntastic/syntax_checkers/sh/bashate.vim	/^let g:loaded_syntastic_sh_bashate_checker = 1$/;"	v
g:loaded_syntastic_sh_checkbashisms_checker	.vim/pack/ide/start/syntastic/syntax_checkers/sh/checkbashisms.vim	/^let g:loaded_syntastic_sh_checkbashisms_checker = 1$/;"	v
g:loaded_syntastic_sh_sh_checker	.vim/pack/ide/start/syntastic/syntax_checkers/sh/sh.vim	/^let g:loaded_syntastic_sh_sh_checker = 1$/;"	v
g:loaded_syntastic_sh_shellcheck_checker	.vim/pack/ide/start/syntastic/syntax_checkers/sh/shellcheck.vim	/^let g:loaded_syntastic_sh_shellcheck_checker = 1$/;"	v
g:loaded_syntastic_sh_shfmt_checker	.vim/pack/ide/start/syntastic/syntax_checkers/sh/shfmt.vim	/^let g:loaded_syntastic_sh_shfmt_checker = 1$/;"	v
g:loaded_syntastic_slim_slim_lint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/slim/slim_lint.vim	/^let g:loaded_syntastic_slim_slim_lint_checker = 1$/;"	v
g:loaded_syntastic_slim_slimrb_checker	.vim/pack/ide/start/syntastic/syntax_checkers/slim/slimrb.vim	/^let g:loaded_syntastic_slim_slimrb_checker = 1$/;"	v
g:loaded_syntastic_sml_smlnj_checker	.vim/pack/ide/start/syntastic/syntax_checkers/sml/smlnj.vim	/^let g:loaded_syntastic_sml_smlnj_checker = 1$/;"	v
g:loaded_syntastic_solidity_solc_checker	.vim/pack/ide/start/syntastic/syntax_checkers/solidity/solc.vim	/^let g:loaded_syntastic_solidity_solc_checker = 1$/;"	v
g:loaded_syntastic_solidity_solhint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/solidity/solhint.vim	/^let g:loaded_syntastic_solidity_solhint_checker = 1$/;"	v
g:loaded_syntastic_solidity_solium_checker	.vim/pack/ide/start/syntastic/syntax_checkers/solidity/solium.vim	/^let g:loaded_syntastic_solidity_solium_checker = 1$/;"	v
g:loaded_syntastic_spec_rpmlint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/spec/rpmlint.vim	/^let g:loaded_syntastic_spec_rpmlint_checker = 1$/;"	v
g:loaded_syntastic_sql_sqlint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/sql/sqlint.vim	/^let g:loaded_syntastic_sql_sqlint_checker = 1$/;"	v
g:loaded_syntastic_sql_tsqllint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/sql/tsqllint.vim	/^let g:loaded_syntastic_sql_tsqllint_checker = 1$/;"	v
g:loaded_syntastic_stylus_stylint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/stylus/stylint.vim	/^let g:loaded_syntastic_stylus_stylint_checker = 1$/;"	v
g:loaded_syntastic_svg_validator_checker	.vim/pack/ide/start/syntastic/syntax_checkers/svg/validator.vim	/^let g:loaded_syntastic_svg_validator_checker = 1$/;"	v
g:loaded_syntastic_svg_w3_checker	.vim/pack/ide/start/syntastic/syntax_checkers/svg/w3.vim	/^let g:loaded_syntastic_svg_w3_checker = 1$/;"	v
g:loaded_syntastic_tcl_nagelfar_checker	.vim/pack/ide/start/syntastic/syntax_checkers/tcl/nagelfar.vim	/^let g:loaded_syntastic_tcl_nagelfar_checker = 1$/;"	v
g:loaded_syntastic_tex_chktex_checker	.vim/pack/ide/start/syntastic/syntax_checkers/tex/chktex.vim	/^let g:loaded_syntastic_tex_chktex_checker = 1$/;"	v
g:loaded_syntastic_tex_lacheck_checker	.vim/pack/ide/start/syntastic/syntax_checkers/tex/lacheck.vim	/^let g:loaded_syntastic_tex_lacheck_checker = 1$/;"	v
g:loaded_syntastic_tex_proselint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/tex/proselint.vim	/^let g:loaded_syntastic_tex_proselint_checker = 1$/;"	v
g:loaded_syntastic_texinfo_makeinfo_checker	.vim/pack/ide/start/syntastic/syntax_checkers/texinfo/makeinfo.vim	/^let g:loaded_syntastic_texinfo_makeinfo_checker = 1$/;"	v
g:loaded_syntastic_texinfo_proselint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/texinfo/proselint.vim	/^let g:loaded_syntastic_texinfo_proselint_checker = 1$/;"	v
g:loaded_syntastic_text_atdtool_checker	.vim/pack/ide/start/syntastic/syntax_checkers/text/atdtool.vim	/^let g:loaded_syntastic_text_atdtool_checker = 1$/;"	v
g:loaded_syntastic_text_igor_checker	.vim/pack/ide/start/syntastic/syntax_checkers/text/igor.vim	/^let g:loaded_syntastic_text_igor_checker = 1$/;"	v
g:loaded_syntastic_text_language_check_checker	.vim/pack/ide/start/syntastic/syntax_checkers/text/language_check.vim	/^let g:loaded_syntastic_text_language_check_checker = 1$/;"	v
g:loaded_syntastic_text_proselint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/text/proselint.vim	/^let g:loaded_syntastic_text_proselint_checker = 1$/;"	v
g:loaded_syntastic_text_textlint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/text/textlint.vim	/^let g:loaded_syntastic_text_textlint_checker = 1$/;"	v
g:loaded_syntastic_trig_rapper_checker	.vim/pack/ide/start/syntastic/syntax_checkers/trig/rapper.vim	/^let g:loaded_syntastic_trig_rapper_checker = 1$/;"	v
g:loaded_syntastic_turtle_rapper_checker	.vim/pack/ide/start/syntastic/syntax_checkers/turtle/rapper.vim	/^let g:loaded_syntastic_turtle_rapper_checker = 1$/;"	v
g:loaded_syntastic_turtle_ttl_checker	.vim/pack/ide/start/syntastic/syntax_checkers/turtle/ttl.vim	/^let g:loaded_syntastic_turtle_ttl_checker = 1$/;"	v
g:loaded_syntastic_twig_twigcs_checker	.vim/pack/ide/start/syntastic/syntax_checkers/twig/twigcs.vim	/^let g:loaded_syntastic_twig_twigcs_checker = 1$/;"	v
g:loaded_syntastic_twig_twiglint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/twig/twiglint.vim	/^let g:loaded_syntastic_twig_twiglint_checker = 1$/;"	v
g:loaded_syntastic_typescript_eslint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/typescript/eslint.vim	/^let g:loaded_syntastic_typescript_eslint_checker = 1$/;"	v
g:loaded_syntastic_typescript_lynt_checker	.vim/pack/ide/start/syntastic/syntax_checkers/typescript/lynt.vim	/^let g:loaded_syntastic_typescript_lynt_checker = 1$/;"	v
g:loaded_syntastic_typescript_tslint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/typescript/tslint.vim	/^let g:loaded_syntastic_typescript_tslint_checker = 1$/;"	v
g:loaded_syntastic_util_autoload	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^let g:loaded_syntastic_util_autoload = 1$/;"	v
g:loaded_syntastic_verilog_iverilog_checker	.vim/pack/ide/start/syntastic/syntax_checkers/verilog/iverilog.vim	/^let g:loaded_syntastic_verilog_iverilog_checker = 1$/;"	v
g:loaded_syntastic_verilog_verilator_checker	.vim/pack/ide/start/syntastic/syntax_checkers/verilog/verilator.vim	/^let g:loaded_syntastic_verilog_verilator_checker = 1$/;"	v
g:loaded_syntastic_vhdl_ghdl_checker	.vim/pack/ide/start/syntastic/syntax_checkers/vhdl/ghdl.vim	/^let g:loaded_syntastic_vhdl_ghdl_checker = 1$/;"	v
g:loaded_syntastic_vhdl_vcom_checker	.vim/pack/ide/start/syntastic/syntax_checkers/vhdl/vcom.vim	/^let g:loaded_syntastic_vhdl_vcom_checker = 1$/;"	v
g:loaded_syntastic_vim_vimlint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/vim/vimlint.vim	/^let g:loaded_syntastic_vim_vimlint_checker = 1$/;"	v
g:loaded_syntastic_vim_vint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/vim/vint.vim	/^let g:loaded_syntastic_vim_vint_checker = 1$/;"	v
g:loaded_syntastic_vue_eslint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/vue/eslint.vim	/^let g:loaded_syntastic_vue_eslint_checker = 1$/;"	v
g:loaded_syntastic_vue_pug_lint_vue_checker	.vim/pack/ide/start/syntastic/syntax_checkers/vue/pug_lint_vue.vim	/^let g:loaded_syntastic_vue_pug_lint_vue_checker = 1$/;"	v
g:loaded_syntastic_vue_stylelint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/vue/stylelint.vim	/^let g:loaded_syntastic_vue_stylelint_checker = 1$/;"	v
g:loaded_syntastic_xhtml_jshint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/xhtml/jshint.vim	/^let g:loaded_syntastic_xhtml_jshint_checker = 1$/;"	v
g:loaded_syntastic_xhtml_proselint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/xhtml/proselint.vim	/^let g:loaded_syntastic_xhtml_proselint_checker = 1$/;"	v
g:loaded_syntastic_xhtml_tidy_checker	.vim/pack/ide/start/syntastic/syntax_checkers/xhtml/tidy.vim	/^let g:loaded_syntastic_xhtml_tidy_checker = 1$/;"	v
g:loaded_syntastic_xhtml_validator_checker	.vim/pack/ide/start/syntastic/syntax_checkers/xhtml/validator.vim	/^let g:loaded_syntastic_xhtml_validator_checker = 1$/;"	v
g:loaded_syntastic_xhtml_w3_checker	.vim/pack/ide/start/syntastic/syntax_checkers/xhtml/w3.vim	/^let g:loaded_syntastic_xhtml_w3_checker = 1$/;"	v
g:loaded_syntastic_xml_plutil_checker	.vim/pack/ide/start/syntastic/syntax_checkers/xml/plutil.vim	/^let g:loaded_syntastic_xml_plutil_checker = 1$/;"	v
g:loaded_syntastic_xml_xmllint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/xml/xmllint.vim	/^let g:loaded_syntastic_xml_xmllint_checker = 1$/;"	v
g:loaded_syntastic_xquery_basex_checker	.vim/pack/ide/start/syntastic/syntax_checkers/xquery/basex.vim	/^let g:loaded_syntastic_xquery_basex_checker = 1$/;"	v
g:loaded_syntastic_xslt_xmllint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/xslt/xmllint.vim	/^let g:loaded_syntastic_xslt_xmllint_checker = 1$/;"	v
g:loaded_syntastic_yacc_bison_checker	.vim/pack/ide/start/syntastic/syntax_checkers/yacc/bison.vim	/^let g:loaded_syntastic_yacc_bison_checker = 1$/;"	v
g:loaded_syntastic_yaml_jsyaml_checker	.vim/pack/ide/start/syntastic/syntax_checkers/yaml/jsyaml.vim	/^let g:loaded_syntastic_yaml_jsyaml_checker = 1$/;"	v
g:loaded_syntastic_yaml_yamllint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/yaml/yamllint.vim	/^let g:loaded_syntastic_yaml_yamllint_checker = 1$/;"	v
g:loaded_syntastic_yaml_yamlxs_checker	.vim/pack/ide/start/syntastic/syntax_checkers/yaml/yamlxs.vim	/^let g:loaded_syntastic_yaml_yamlxs_checker = 1$/;"	v
g:loaded_syntastic_yang_pyang_checker	.vim/pack/ide/start/syntastic/syntax_checkers/yang/pyang.vim	/^let g:loaded_syntastic_yang_pyang_checker = 1$/;"	v
g:loaded_syntastic_yara_yarac_checker	.vim/pack/ide/start/syntastic/syntax_checkers/yara/yara.vim	/^let g:loaded_syntastic_yara_yarac_checker = 1$/;"	v
g:loaded_syntastic_z80_z80syntaxchecker_checker	.vim/pack/ide/start/syntastic/syntax_checkers/z80/z80syntaxchecker.vim	/^let g:loaded_syntastic_z80_z80syntaxchecker_checker = 1$/;"	v
g:loaded_syntastic_zpt_zptlint_checker	.vim/pack/ide/start/syntastic/syntax_checkers/zpt/zptlint.vim	/^let g:loaded_syntastic_zpt_zptlint_checker = 1$/;"	v
g:loaded_syntastic_zsh_zsh_checker	.vim/pack/ide/start/syntastic/syntax_checkers/zsh/zsh.vim	/^let g:loaded_syntastic_zsh_zsh_checker = 1$/;"	v
g:loaded_tagbar	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let g:loaded_tagbar = 1$/;"	v
g:loaded_tlib	.vim/pack/ide/start/tlib/plugin/02tlib.vim	/^let g:loaded_tlib = 127$/;"	v
g:loaded_togglebg	.vim/pack/ide/start/colors-solarized/autoload/togglebg.vim	/^let g:loaded_togglebg = 1$/;"	v
g:loaded_vim_airline_zoomwintab	.vim/pack/ide/start/airline/autoload/airline/extensions/zoomwintab.vim	/^let g:loaded_vim_airline_zoomwintab = 1$/;"	v
g:loaded_xtabline	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^    let g:loaded_xtabline = 1$/;"	v
g:netrw_force_overwrite_statusline	.vim/pack/ide/start/airline/autoload/airline/extensions/netrw.vim	/^  let g:netrw_force_overwrite_statusline = 0$/;"	v
g:obsession_append	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^        let g:obsession_append = [string]$/;"	v
g:promptline_symbols	.vim/pack/ide/start/airline/autoload/airline/extensions/promptline.vim	/^    let g:promptline_symbols = {$/;"	v
g:seoul256_background	.vim/pack/ide/opt/seoul256/colors/seoul256-light.vim	/^      let g:seoul256_background = s:backup$/;"	v
g:seoul256_background	.vim/pack/ide/opt/seoul256/colors/seoul256-light.vim	/^      let g:seoul256_background = s:custom_bg$/;"	v
g:seoul256_current_bg	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^let g:seoul256_current_bg = [s:dark_bg, s:light_bg][s:style_idx]$/;"	v
g:seoul256_current_fg	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^let g:seoul256_current_fg = [s:dark_fg, s:light_fg][s:style_idx]$/;"	v
g:signify_disable_by_default	.vim/pack/ide/start/signify/autoload/sy.vim	/^  let g:signify_disable_by_default = 0$/;"	v
g:signify_disable_by_default	.vim/pack/ide/start/signify/autoload/sy.vim	/^  let g:signify_disable_by_default = 1$/;"	v
g:signify_line_highlight	.vim/pack/ide/start/signify/autoload/sy/highlight.vim	/^  let g:signify_line_highlight = 0$/;"	v
g:signify_line_highlight	.vim/pack/ide/start/signify/autoload/sy/highlight.vim	/^  let g:signify_line_highlight = 1$/;"	v
g:signify_locked	.vim/pack/ide/start/signify/plugin/signify.vim	/^let g:signify_locked = 0$/;"	v
g:signify_vcs_cmds	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^  let g:signify_vcs_cmds = s:default_vcs_cmds$/;"	v
g:signify_vcs_cmds_diffmode	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^  let g:signify_vcs_cmds_diffmode = s:default_vcs_cmds_diffmode$/;"	v
g:solarized_termcolors	.vimrc	/^let g:solarized_termcolors=256$/;"	v
g:spec_tlib_list	.vim/pack/ide/start/tlib/spec/tlib/input.vim	/^let g:spec_tlib_list = [10, 20, 30, 40, 'a50', 'aa60', 'b70', 'ba80', 90]$/;"	v
g:syntastic_	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^                let g:syntastic_{a:new} = NEW_VAR$/;"	v
g:syntastic_	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^            let g:syntastic_{a:new} = g:syntastic_{a:old}$/;"	v
g:syntastic_	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^        let g:syntastic_{s:key} = copy(g:_SYNTASTIC_DEFAULTS[s:key])$/;"	v
g:syntastic_	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^            let g:syntastic_{newObj._filetype}_{newObj._name}_sort = g:syntastic_{filetype}_{nam/;"	v
g:syntastic_	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^        let g:syntastic_{self._filetype}_{self._name}_sort = a:val$/;"	v
g:syntastic_	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^        let g:syntastic_{a:filetype}_checkers = [g:syntastic_{a:filetype}_checker]$/;"	v
g:syntastic_ada_compiler	.vim/pack/ide/start/syntastic/syntax_checkers/ada/gcc.vim	/^        let g:syntastic_ada_compiler = self.getExec()$/;"	v
g:syntastic_ada_compiler_options	.vim/pack/ide/start/syntastic/syntax_checkers/ada/gcc.vim	/^    let g:syntastic_ada_compiler_options = ''$/;"	v
g:syntastic_always_populate_loc_list	.vimrc	/^let g:syntastic_always_populate_loc_list = 1$/;"	v
g:syntastic_apiblueprint_drafter_sort	.vim/pack/ide/start/syntastic/syntax_checkers/apiblueprint/drafter.vim	/^    let g:syntastic_apiblueprint_drafter_sort = 1$/;"	v
g:syntastic_asm_compiler	.vim/pack/ide/start/syntastic/syntax_checkers/asm/gcc.vim	/^        let g:syntastic_asm_compiler = self.getExec()$/;"	v
g:syntastic_asm_compiler_options	.vim/pack/ide/start/syntastic/syntax_checkers/asm/gcc.vim	/^    let g:syntastic_asm_compiler_options = ''$/;"	v
g:syntastic_asm_generic	.vim/pack/ide/start/syntastic/syntax_checkers/asm/gcc.vim	/^    let g:syntastic_asm_generic = 0$/;"	v
g:syntastic_auto_loc_list	.vimrc	/^let g:syntastic_auto_loc_list = 1$/;"	v
g:syntastic_c_checkpatch_exec	.vim/pack/ide/start/syntastic/syntax_checkers/c/checkpatch.vim	/^            let g:syntastic_c_checkpatch_exec = 'checkpatch'$/;"	v
g:syntastic_c_checkpatch_exec	.vim/pack/ide/start/syntastic/syntax_checkers/c/checkpatch.vim	/^            let g:syntastic_c_checkpatch_exec = fnamemodify('.\/scripts\/checkpatch', ':p')$/;"	v
g:syntastic_c_checkpatch_exec	.vim/pack/ide/start/syntastic/syntax_checkers/c/checkpatch.vim	/^            let g:syntastic_c_checkpatch_exec = fnamemodify('.\/scripts\/checkpatch.pl', ':p')$/;"	v
g:syntastic_c_clang_check_sort	.vim/pack/ide/start/syntastic/syntax_checkers/c/clang_check.vim	/^    let g:syntastic_c_clang_check_sort = 1$/;"	v
g:syntastic_c_clang_tidy_sort	.vim/pack/ide/start/syntastic/syntax_checkers/c/clang_tidy.vim	/^    let g:syntastic_c_clang_tidy_sort = 1$/;"	v
g:syntastic_c_compiler	.vim/pack/ide/start/syntastic/syntax_checkers/c/gcc.vim	/^        let g:syntastic_c_compiler = executable(self.getExec()) ? self.getExec() : 'clang'$/;"	v
g:syntastic_c_compiler_options	.vim/pack/ide/start/syntastic/syntax_checkers/c/gcc.vim	/^    let g:syntastic_c_compiler_options = '-std=gnu99'$/;"	v
g:syntastic_c_flawfinder_sort	.vim/pack/ide/start/syntastic/syntax_checkers/c/flawfinder.vim	/^    let g:syntastic_c_flawfinder_sort = 1$/;"	v
g:syntastic_c_flawfinder_thres	.vim/pack/ide/start/syntastic/syntax_checkers/c/flawfinder.vim	/^    let g:syntastic_c_flawfinder_thres = 3$/;"	v
g:syntastic_c_oclint_sort	.vim/pack/ide/start/syntastic/syntax_checkers/c/oclint.vim	/^    let g:syntastic_c_oclint_sort = 1$/;"	v
g:syntastic_check_on_open	.vimrc	/^let g:syntastic_check_on_open = 1$/;"	v
g:syntastic_check_on_wq	.vimrc	/^let g:syntastic_check_on_wq = 0$/;"	v
g:syntastic_cobol_compiler	.vim/pack/ide/start/syntastic/syntax_checkers/cobol/cobc.vim	/^        let g:syntastic_cobol_compiler = self.getExec()$/;"	v
g:syntastic_cobol_compiler_options	.vim/pack/ide/start/syntastic/syntax_checkers/cobol/cobc.vim	/^    let g:syntastic_cobol_compiler_options = ''$/;"	v
g:syntastic_cpp_compiler	.vim/pack/ide/start/syntastic/syntax_checkers/cpp/gcc.vim	/^        let g:syntastic_cpp_compiler = executable(self.getExec()) ? self.getExec() : 'clang++'$/;"	v
g:syntastic_cpp_compiler_options	.vim/pack/ide/start/syntastic/syntax_checkers/cpp/gcc.vim	/^    let g:syntastic_cpp_compiler_options = ''$/;"	v
g:syntastic_cpp_compiler_options	.vimrc	/^let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'$/;"	v
g:syntastic_cpp_cpplint_thres	.vim/pack/ide/start/syntastic/syntax_checkers/cpp/cpplint.vim	/^    let g:syntastic_cpp_cpplint_thres = 5$/;"	v
g:syntastic_cpp_flawfinder_thres	.vim/pack/ide/start/syntastic/syntax_checkers/cpp/flawfinder.vim	/^    let g:syntastic_cpp_flawfinder_thres = 3$/;"	v
g:syntastic_css_prettycss_sort	.vim/pack/ide/start/syntastic/syntax_checkers/css/prettycss.vim	/^    let g:syntastic_css_prettycss_sort = 1$/;"	v
g:syntastic_d_compiler	.vim/pack/ide/start/syntastic/syntax_checkers/d/dmd.vim	/^        let g:syntastic_d_compiler = self.getExec()$/;"	v
g:syntastic_d_compiler_options	.vim/pack/ide/start/syntastic/syntax_checkers/d/dmd.vim	/^    let g:syntastic_d_compiler_options = ''$/;"	v
g:syntastic_d_dub_exec	.vim/pack/ide/start/syntastic/syntax_checkers/d/dmd.vim	/^    let g:syntastic_d_dub_exec = 'dub'$/;"	v
g:syntastic_d_include_dirs	.vim/pack/ide/start/syntastic/syntax_checkers/d/dmd.vim	/^        let g:syntastic_d_include_dirs = s:GetIncludes(self, fnamemodify(bufname(buf), ':p:h'))$/;"	v
g:syntastic_d_use_dub	.vim/pack/ide/start/syntastic/syntax_checkers/d/dmd.vim	/^    let g:syntastic_d_use_dub = 1$/;"	v
g:syntastic_enable_balloons	.vim/pack/ide/start/syntastic/plugin/syntastic/balloons.vim	/^    let g:syntastic_enable_balloons = 0$/;"	v
g:syntastic_erlc_include_path	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/escript.vim	/^    let g:syntastic_erlc_include_path = ''$/;"	v
g:syntastic_eruby_ruby_exec	.vim/pack/ide/start/syntastic/syntax_checkers/eruby/ruby.vim	/^        let g:syntastic_eruby_ruby_exec = g:syntastic_ruby_exec$/;"	v
g:syntastic_fortran_compiler	.vim/pack/ide/start/syntastic/syntax_checkers/fortran/gfortran.vim	/^        let g:syntastic_fortran_compiler = self.getExec()$/;"	v
g:syntastic_fortran_compiler_options	.vim/pack/ide/start/syntastic/syntax_checkers/fortran/gfortran.vim	/^    let g:syntastic_fortran_compiler_options = ''$/;"	v
g:syntastic_fortran_gfortran_sort	.vim/pack/ide/start/syntastic/syntax_checkers/fortran/gfortran.vim	/^            let g:syntastic_fortran_gfortran_sort = 0$/;"	v
g:syntastic_fortran_gfortran_sort	.vim/pack/ide/start/syntastic/syntax_checkers/fortran/gfortran.vim	/^            let g:syntastic_fortran_gfortran_sort = 1$/;"	v
g:syntastic_haskell_hdevtools_args	.vim/pack/ide/start/syntastic/syntax_checkers/haskell/hdevtools.vim	/^        let g:syntastic_haskell_hdevtools_args = g:hdevtools_options$/;"	v
g:syntastic_haskell_scan_sort	.vim/pack/ide/start/syntastic/syntax_checkers/haskell/scan.vim	/^    let g:syntastic_haskell_scan_sort = 1$/;"	v
g:syntastic_html_tidy_blocklevel_tags	.vim/pack/ide/start/syntastic/syntax_checkers/html/tidy.vim	/^    let g:syntastic_html_tidy_blocklevel_tags = []$/;"	v
g:syntastic_html_tidy_empty_tags	.vim/pack/ide/start/syntastic/syntax_checkers/html/tidy.vim	/^    let g:syntastic_html_tidy_empty_tags = []$/;"	v
g:syntastic_html_tidy_ignore_errors	.vim/pack/ide/start/syntastic/syntax_checkers/html/tidy.vim	/^    let g:syntastic_html_tidy_ignore_errors = []$/;"	v
g:syntastic_html_tidy_inline_tags	.vim/pack/ide/start/syntastic/syntax_checkers/html/tidy.vim	/^    let g:syntastic_html_tidy_inline_tags = []$/;"	v
g:syntastic_java_checkstyle_classpath	.vim/pack/ide/start/syntastic/syntax_checkers/java/checkstyle.vim	/^    let g:syntastic_java_checkstyle_classpath = 'checkstyle-6.10.1-all.jar'$/;"	v
g:syntastic_java_checkstyle_conf_file	.vim/pack/ide/start/syntastic/syntax_checkers/java/checkstyle.vim	/^    let g:syntastic_java_checkstyle_conf_file = 'sun_checks.xml'$/;"	v
g:syntastic_java_javac_autoload_maven_classpath	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_autoload_maven_classpath = 1$/;"	v
g:syntastic_java_javac_classpath	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_classpath = ''$/;"	v
g:syntastic_java_javac_classpath	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_classpath = path$/;"	v
g:syntastic_java_javac_config_file	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_config_file = '.syntastic_javac_config'$/;"	v
g:syntastic_java_javac_config_file_enabled	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_config_file_enabled = 0$/;"	v
g:syntastic_java_javac_custom_classpath_command	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_custom_classpath_command = ''$/;"	v
g:syntastic_java_javac_delete_output	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_delete_output = 1$/;"	v
g:syntastic_java_javac_exec	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^let g:syntastic_java_javac_exec = g:syntastic_java_javac_executable$/;"	v
g:syntastic_java_javac_executable	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_executable = 'javac'$/;"	v
g:syntastic_java_javac_maven_pom_classpath	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^            let g:syntastic_java_javac_maven_pom_classpath[pom] = mvn_classpath$/;"	v
g:syntastic_java_javac_maven_pom_classpath	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_maven_pom_classpath = {}$/;"	v
g:syntastic_java_javac_maven_pom_ftime	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^            let g:syntastic_java_javac_maven_pom_ftime[pom] = getftime(pom)$/;"	v
g:syntastic_java_javac_maven_pom_ftime	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_maven_pom_ftime = {}$/;"	v
g:syntastic_java_javac_maven_pom_properties	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^            let g:syntastic_java_javac_maven_pom_properties[pom] = mvn_properties$/;"	v
g:syntastic_java_javac_maven_pom_properties	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^let g:syntastic_java_javac_maven_pom_properties = {}$/;"	v
g:syntastic_java_javac_maven_pom_tags	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^let g:syntastic_java_javac_maven_pom_tags = ['build', 'properties']$/;"	v
g:syntastic_java_javac_options	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_options = '-Xlint'$/;"	v
g:syntastic_java_maven_executable	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_maven_executable = 'mvn'$/;"	v
g:syntastic_java_maven_options	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_maven_options = ''$/;"	v
g:syntastic_javascript_checkers	.vimrc	/^let g:syntastic_javascript_checkers = ['eslint']$/;"	v
g:syntastic_javascript_eslint_generic	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/eslint.vim	/^    let g:syntastic_javascript_eslint_generic = 0$/;"	v
g:syntastic_javascript_eslint_sort	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/eslint.vim	/^    let g:syntastic_javascript_eslint_sort = 1$/;"	v
g:syntastic_javascript_flow_sort	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/flow.vim	/^    let g:syntastic_javascript_flow_sort = 1$/;"	v
g:syntastic_javascript_jscs_sort	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/jscs.vim	/^    let g:syntastic_javascript_jscs_sort = 1$/;"	v
g:syntastic_javascript_jshint_sort	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/jshint.vim	/^    let g:syntastic_javascript_jshint_sort = 1$/;"	v
g:syntastic_javascript_standard_generic	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/standard.vim	/^    let g:syntastic_javascript_standard_generic = 0$/;"	v
g:syntastic_less_use_less_lint	.vim/pack/ide/start/syntastic/syntax_checkers/less/lessc.vim	/^    let g:syntastic_less_use_less_lint = 0$/;"	v
g:syntastic_markdown_mdl_sort	.vim/pack/ide/start/syntastic/syntax_checkers/markdown/mdl.vim	/^    let g:syntastic_markdown_mdl_sort = 1$/;"	v
g:syntastic_mode_map	.vim/pack/ide/start/syntastic/plugin/syntastic/modemap.vim	/^        let g:syntastic_mode_map = {}$/;"	v
g:syntastic_mode_map	.vim/pack/ide/start/syntastic/plugin/syntastic/modemap.vim	/^    let g:syntastic_mode_map['mode'] = self._mode$/;"	v
g:syntastic_mode_map	.vimrc	/^let g:syntastic_mode_map = { 'passive_filetypes': ['c'] }$/;"	v
g:syntastic_objc_compiler	.vim/pack/ide/start/syntastic/syntax_checkers/objc/gcc.vim	/^        let g:syntastic_objc_compiler = executable(self.getExec()) ? self.getExec() : 'clang'$/;"	v
g:syntastic_objc_compiler_options	.vim/pack/ide/start/syntastic/syntax_checkers/objc/gcc.vim	/^    let g:syntastic_objc_compiler_options = '-std=gnu99'$/;"	v
g:syntastic_objcpp_compiler	.vim/pack/ide/start/syntastic/syntax_checkers/objcpp/gcc.vim	/^        let g:syntastic_objcpp_compiler = executable(self.getExec()) ? self.getExec() : 'clang'$/;"	v
g:syntastic_objcpp_compiler_options	.vim/pack/ide/start/syntastic/syntax_checkers/objcpp/gcc.vim	/^    let g:syntastic_objcpp_compiler_options = '-std=gnu99'$/;"	v
g:syntastic_ocaml_janestreet_core_dir	.vim/pack/ide/start/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^    let g:syntastic_ocaml_janestreet_core_dir = '.'$/;"	v
g:syntastic_ocaml_use_janestreet_core	.vim/pack/ide/start/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^    let g:syntastic_ocaml_use_janestreet_core = 0$/;"	v
g:syntastic_ocaml_use_ocamlbuild	.vim/pack/ide/start/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^    let g:syntastic_ocaml_use_ocamlbuild = 0$/;"	v
g:syntastic_ocaml_use_ocamlc	.vim/pack/ide/start/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^    let g:syntastic_ocaml_use_ocamlc = 0$/;"	v
g:syntastic_perl_lib_path	.vim/pack/ide/start/syntastic/syntax_checkers/perl/perl.vim	/^    let g:syntastic_perl_lib_path = []$/;"	v
g:syntastic_perl_lib_path	.vim/pack/ide/start/syntastic/syntax_checkers/yaml/yamlxs.vim	/^    let g:syntastic_perl_lib_path = []$/;"	v
g:syntastic_perl_perl_exec	.vim/pack/ide/start/syntastic/syntax_checkers/perl/perl.vim	/^        let g:syntastic_perl_perl_exec = g:syntastic_perl_interpreter$/;"	v
g:syntastic_perl_perlcritic_thres	.vim/pack/ide/start/syntastic/syntax_checkers/perl/perlcritic.vim	/^    let g:syntastic_perl_perlcritic_thres = 5$/;"	v
g:syntastic_python_prospector_sort	.vim/pack/ide/start/syntastic/syntax_checkers/python/prospector.vim	/^    let g:syntastic_python_prospector_sort = 1$/;"	v
g:syntastic_python_pylama_sort	.vim/pack/ide/start/syntastic/syntax_checkers/python/pylama.vim	/^    let g:syntastic_python_pylama_sort = 1$/;"	v
g:syntastic_python_pylint_sort	.vim/pack/ide/start/syntastic/syntax_checkers/python/pylint.vim	/^    let g:syntastic_python_pylint_sort = 1$/;"	v
g:syntastic_python_python_exec	.vimrc	/^let g:syntastic_python_python_exec = 'python3'$/;"	v
g:syntastic_python_python_use_codec	.vim/pack/ide/start/syntastic/syntax_checkers/python/python.vim	/^    let g:syntastic_python_python_use_codec = 0$/;"	v
g:syntastic_quiet_messages	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^        let g:syntastic_quiet_messages['type'] = s:quiet_warnings$/;"	v
g:syntastic_r_lint_sort	.vim/pack/ide/start/syntastic/syntax_checkers/r/lint.vim	/^    let g:syntastic_r_lint_sort = 1$/;"	v
g:syntastic_r_lint_styles	.vim/pack/ide/start/syntastic/syntax_checkers/r/lint.vim	/^    let g:syntastic_r_lint_styles = 'lint.style'$/;"	v
g:syntastic_r_lintr_cache	.vim/pack/ide/start/syntastic/syntax_checkers/r/lintr.vim	/^    let g:syntastic_r_lintr_cache = 'FALSE'$/;"	v
g:syntastic_r_lintr_linters	.vim/pack/ide/start/syntastic/syntax_checkers/r/lintr.vim	/^    let g:syntastic_r_lintr_linters = 'default_linters'$/;"	v
g:syntastic_r_svtools_styles	.vim/pack/ide/start/syntastic/syntax_checkers/r/svtools.vim	/^    let g:syntastic_r_svtools_styles = 'lint.style'$/;"	v
g:syntastic_racket_code_ayatollah_script	.vim/pack/ide/start/syntastic/syntax_checkers/racket/code-ayatollah.vim	/^    let g:syntastic_racket_code_ayatollah_script = 'code-ayatollah.rkt'$/;"	v
g:syntastic_racket_code_ayatollah_sort	.vim/pack/ide/start/syntastic/syntax_checkers/racket/code-ayatollah.vim	/^    let g:syntastic_racket_code_ayatollah_sort = 1$/;"	v
g:syntastic_raku_lib_path	.vim/pack/ide/start/syntastic/syntax_checkers/raku/raku.vim	/^    let g:syntastic_raku_lib_path = []$/;"	v
g:syntastic_raku_raku_sort	.vim/pack/ide/start/syntastic/syntax_checkers/raku/raku.vim	/^    let g:syntastic_raku_raku_sort = 1$/;"	v
g:syntastic_ruby_flog_sort	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/flog.vim	/^    let g:syntastic_ruby_flog_sort = 1$/;"	v
g:syntastic_ruby_flog_threshold_error	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/flog.vim	/^    let g:syntastic_ruby_flog_threshold_error = 90$/;"	v
g:syntastic_ruby_flog_threshold_warning	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/flog.vim	/^    let g:syntastic_ruby_flog_threshold_warning = 45$/;"	v
g:syntastic_ruby_mri_exec	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/mri.vim	/^        let g:syntastic_ruby_mri_exec = g:syntastic_ruby_exec$/;"	v
g:syntastic_sass_check_partials	.vim/pack/ide/start/syntastic/syntax_checkers/sass/sass.vim	/^    let g:syntastic_sass_check_partials = 0$/;"	v
g:syntastic_scala_scalastyle_config_file	.vim/pack/ide/start/syntastic/syntax_checkers/scala/scalastyle.vim	/^    let g:syntastic_scala_scalastyle_config_file = 'scalastyle_config.xml'$/;"	v
g:syntastic_scala_scalastyle_jar	.vim/pack/ide/start/syntastic/syntax_checkers/scala/scalastyle.vim	/^    let g:syntastic_scala_scalastyle_jar = 'scalastyle-batch_2.10.jar'$/;"	v
g:syntastic_shell	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^    let g:syntastic_shell = &shell$/;"	v
g:syntastic_sql_tsqllint_sort	.vim/pack/ide/start/syntastic/syntax_checkers/sql/tsqllint.vim	/^    let g:syntastic_sql_tsqllint_sort = 1$/;"	v
g:syntastic_stl_format	.vim/pack/ide/start/airline/autoload/airline/extensions/syntastic.vim	/^    let g:syntastic_stl_format = _backup$/;"	v
g:syntastic_stl_format	.vim/pack/ide/start/airline/autoload/airline/extensions/syntastic.vim	/^    let g:syntastic_stl_format = get(g:, 'airline#extensions#syntastic#stl_format_err', '%E{[%fe/;"	v
g:syntastic_stl_format	.vim/pack/ide/start/airline/autoload/airline/extensions/syntastic.vim	/^    let g:syntastic_stl_format = get(g:, 'airline#extensions#syntastic#stl_format_warn', '%W{[%f/;"	v
g:syntastic_tex_chktex_showmsgs	.vim/pack/ide/start/syntastic/syntax_checkers/tex/chktex.vim	/^    let g:syntastic_tex_chktex_showmsgs = 1$/;"	v
g:syntastic_tex_chktex_sort	.vim/pack/ide/start/syntastic/syntax_checkers/tex/chktex.vim	/^    let g:syntastic_tex_chktex_sort = 1$/;"	v
g:syntastic_text_atdtool_sort	.vim/pack/ide/start/syntastic/syntax_checkers/text/atdtool.vim	/^    let g:syntastic_text_atdtool_sort = 1$/;"	v
g:syntastic_text_proselint_sort	.vim/pack/ide/start/syntastic/syntax_checkers/text/proselint.vim	/^    let g:syntastic_text_proselint_sort = 1$/;"	v
g:syntastic_typescript_tslint_sort	.vim/pack/ide/start/syntastic/syntax_checkers/typescript/tslint.vim	/^    let g:syntastic_typescript_tslint_sort = 1$/;"	v
g:syntastic_verilog_compiler	.vim/pack/ide/start/syntastic/syntax_checkers/verilog/verilator.vim	/^        let g:syntastic_verilog_compiler = self.getExec()$/;"	v
g:syntastic_verilog_compiler_options	.vim/pack/ide/start/syntastic/syntax_checkers/verilog/verilator.vim	/^    let g:syntastic_verilog_compiler_options = '-Wall'$/;"	v
g:syntastic_version	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^let g:syntastic_version =$/;"	v
g:syntastic_vim_vint_sort	.vim/pack/ide/start/syntastic/syntax_checkers/vim/vint.vim	/^    let g:syntastic_vim_vint_sort = 1$/;"	v
g:syntastic_xhtml_tidy_ignore_errors	.vim/pack/ide/start/syntastic/syntax_checkers/xhtml/tidy.vim	/^    let g:syntastic_xhtml_tidy_ignore_errors = []$/;"	v
g:syntastic_yaml_yamlxs_exec	.vim/pack/ide/start/syntastic/syntax_checkers/yaml/yamlxs.vim	/^        let g:syntastic_yaml_yamlxs_exec = g:syntastic_perl_interpreter$/;"	v
g:taboo_tabline	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  let g:taboo_tabline = 0$/;"	v
g:tagbar#icon_closed	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let g:tagbar#icon_closed = g:tagbar_iconchars[0]$/;"	v
g:tagbar#icon_open	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let g:tagbar#icon_open   = g:tagbar_iconchars[1]$/;"	v
g:tagbar_autoclose	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^    let g:tagbar_autoclose = !g:tagbar_autoclose$/;"	v
g:tagbar_case_insensitive	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^    let g:tagbar_case_insensitive = !g:tagbar_case_insensitive$/;"	v
g:tagbar_ctags_bin	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^                let g:tagbar_ctags_bin = ctags$/;"	v
g:tagbar_ctags_bin	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^        let g:tagbar_ctags_bin = expand(g:tagbar_ctags_bin)$/;"	v
g:tagbar_height	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^            let g:tagbar_height = g:tagbar_vertical$/;"	v
g:tagbar_hide_nonpublic	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^    let g:tagbar_hide_nonpublic = !g:tagbar_hide_nonpublic$/;"	v
g:tagbar_iconchars	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^        let g:tagbar_iconchars = ['+', '-']$/;"	v
g:tagbar_iconchars	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^        let g:tagbar_iconchars = ['▶', '▼']$/;"	v
g:tagbar_position	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^            let g:tagbar_position = 'botright vertical'$/;"	v
g:tagbar_position	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^            let g:tagbar_position = 'leftabove'$/;"	v
g:tagbar_position	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^            let g:tagbar_position = 'rightbelow'$/;"	v
g:tagbar_position	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^            let g:tagbar_position = 'topleft vertical'$/;"	v
g:tagbar_sort	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^        let g:tagbar_sort = !g:tagbar_sort$/;"	v
g:tagbar_status_func	.vim/pack/ide/start/airline/autoload/airline/extensions/tagbar.vim	/^  let g:tagbar_status_func = 'airline#extensions#tagbar#get_status'$/;"	v
g:tcomment#blank_lines	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^    let g:tcomment#blank_lines = 2    "{{{2$/;"	v
g:tcomment#block2_fmt_c	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^    let g:tcomment#block2_fmt_c = {$/;"	v
g:tcomment#block_fmt_c	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^    let g:tcomment#block_fmt_c = {$/;"	v
g:tcomment#block_fmt_xml	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^    let g:tcomment#block_fmt_xml = {$/;"	v
g:tcomment#commentstring_c	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^    let g:tcomment#commentstring_c = '\/* %s *\/'   "{{{2$/;"	v
g:tcomment#filetype#guess	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#guess = 0   "{{{2$/;"	v
g:tcomment#filetype#guess_blade	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#guess_blade = 'html'   "{{{2$/;"	v
g:tcomment#filetype#guess_cpp	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#guess_cpp = 0   "{{{2$/;"	v
g:tcomment#filetype#guess_django	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#guess_django = 1   "{{{2$/;"	v
g:tcomment#filetype#guess_dsl	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#guess_dsl = 'xml'   "{{{2$/;"	v
g:tcomment#filetype#guess_eruby	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#guess_eruby = 1   "{{{2$/;"	v
g:tcomment#filetype#guess_html	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#guess_html = 1   "{{{2$/;"	v
g:tcomment#filetype#guess_javascript	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#guess_javascript = 1   "{{{2$/;"	v
g:tcomment#filetype#guess_jinja	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#guess_jinja = 'html'   "{{{2$/;"	v
g:tcomment#filetype#guess_perl	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#guess_perl = 1   "{{{2$/;"	v
g:tcomment#filetype#guess_php	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#guess_php = 'html'   "{{{2$/;"	v
g:tcomment#filetype#guess_rmd	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#guess_rmd = 'markdown'   "{{{2$/;"	v
g:tcomment#filetype#guess_rnoweb	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#guess_rnoweb = 'r'   "{{{2$/;"	v
g:tcomment#filetype#guess_smarty	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#guess_smarty = 1   "{{{2$/;"	v
g:tcomment#filetype#guess_tex	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#guess_tex = 1   "{{{2$/;"	v
g:tcomment#filetype#guess_tskeleton	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#guess_tskeleton = 1   "{{{2$/;"	v
g:tcomment#filetype#guess_typescript	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#guess_typescript = 1   "{{{2$/;"	v
g:tcomment#filetype#guess_vim	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#guess_vim = 1   "{{{2$/;"	v
g:tcomment#filetype#guess_vue	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#guess_vue = 'html'   "{{{2$/;"	v
g:tcomment#filetype#ignore_blade	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#ignore_blade = 'html'   "{{{2$/;"	v
g:tcomment#filetype#ignore_php	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#ignore_php = 'sql'   "{{{2$/;"	v
g:tcomment#filetype#map	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#map = extend(g:tcomment#filetype#map, g:tcomment#filetype#map_user)$/;"	v
g:tcomment#filetype#map	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#map = {$/;"	v
g:tcomment#filetype#syntax_map	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#syntax_map = extend(g:tcomment#filetype#syntax_map, g:tcomment#filet/;"	v
g:tcomment#filetype#syntax_map	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^    let g:tcomment#filetype#syntax_map = {$/;"	v
g:tcomment#ignore_char_type	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^    let g:tcomment#ignore_char_type = 1   "{{{2$/;"	v
g:tcomment#ignore_comment_def	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^    let g:tcomment#ignore_comment_def = []   "{{{2$/;"	v
g:tcomment#inline_fmt_c	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^    let g:tcomment#inline_fmt_c = tcomment#GetLineC()$/;"	v
g:tcomment#inline_fmt_xml	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^    let g:tcomment#inline_fmt_xml = {$/;"	v
g:tcomment#line_fmt_c	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^    let g:tcomment#line_fmt_c = {$/;"	v
g:tcomment#mode_extra	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^    let g:tcomment#mode_extra = ''   "{{{2$/;"	v
g:tcomment#must_escape_expression_backslash	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^    let g:tcomment#must_escape_expression_backslash = 0   "{{{2$/;"	v
g:tcomment#operator#mode_extra	.vim/pack/ide/start/tcomment/autoload/tcomment/operator.vim	/^    let g:tcomment#operator#mode_extra = ''   "{{{2$/;"	v
g:tcomment#options	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^    let g:tcomment#options = {}   "{{{2$/;"	v
g:tcomment#options_comments	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^    let g:tcomment#options_comments = {'whitespace': get(g:tcomment#options, 'whitespace', 'both/;"	v
g:tcomment#options_commentstring	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^    let g:tcomment#options_commentstring = {'whitespace': get(g:tcomment#options, 'whitespace', /;"	v
g:tcomment#replacements_c	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^    let g:tcomment#replacements_c = {$/;"	v
g:tcomment#replacements_xml	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^    let g:tcomment#replacements_xml = {$/;"	v
g:tcomment#rstrip_on_uncomment	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^    let g:tcomment#rstrip_on_uncomment = 1   "{{{2$/;"	v
g:tcomment#syntax#substitute	.vim/pack/ide/start/tcomment/autoload/tcomment/syntax.vim	/^    let g:tcomment#syntax#substitute = {$/;"	v
g:tcomment#syntax#substitute_by_filetype	.vim/pack/ide/start/tcomment/autoload/tcomment/syntax.vim	/^    let g:tcomment#syntax#substitute_by_filetype = {$/;"	v
g:tcomment#types#dirty	.vim/pack/ide/start/tcomment/autoload/tcomment/type.vim	/^        let g:tcomment#types#dirty = 0$/;"	v
g:tcomment#types#dirty	.vim/pack/ide/start/tcomment/autoload/tcomment/type.vim	/^    let g:tcomment#types#dirty = 1$/;"	v
g:tcomment#types#dirty	.vim/pack/ide/start/tcomment/autoload/tcomment/type.vim	/^let g:tcomment#types#dirty = 1$/;"	v
g:tcomment#types#names	.vim/pack/ide/start/tcomment/autoload/tcomment/type.vim	/^        let g:tcomment#types#names = keys(s:definitions)$/;"	v
g:tcomment#types#rx	.vim/pack/ide/start/tcomment/autoload/tcomment/type.vim	/^        let g:tcomment#types#rx = '\\V\\^\\('. join(g:tcomment#types#names, '\\|') .'\\)\\(\\u\\/;"	v
g:tcomment_map_modifier	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^    let g:tcomment_map_modifier = '<silent>'   "{{{2$/;"	v
g:tcomment_mapleader1	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^    let g:tcomment_mapleader1 = '<c-_>' "{{{2$/;"	v
g:tcomment_mapleader2	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^    let g:tcomment_mapleader2 = '<Leader>_' "{{{2$/;"	v
g:tcomment_mapleader_comment_anyway	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^    let g:tcomment_mapleader_comment_anyway = 'g>' "{{{2$/;"	v
g:tcomment_mapleader_uncomment_anyway	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^    let g:tcomment_mapleader_uncomment_anyway = 'g<' "{{{2$/;"	v
g:tcomment_maps	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^    let g:tcomment_maps = 1   "{{{2$/;"	v
g:tcomment_opleader1	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^    let g:tcomment_opleader1 = 'gc' "{{{2$/;"	v
g:tcomment_opmap_modifier	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^    let g:tcomment_opmap_modifier = '<silent>'   "{{{2$/;"	v
g:tcomment_textobject_inlinecomment	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^    let g:tcomment_textobject_inlinecomment = 'ic'   "{{{2$/;"	v
g:tlib#cache#purge_every_days	.vim/pack/ide/start/tlib/autoload/tlib/cache.vim	/^            let g:tlib#cache#purge_every_days = -1$/;"	v
g:tlib#cmd#last_output	.vim/pack/ide/start/tlib/autoload/tlib/cmd.vim	/^    let g:tlib#cmd#last_output = split(s:redir_lines, '\\n')$/;"	v
g:tlib#cmd#last_output	.vim/pack/ide/start/tlib/autoload/tlib/cmd.vim	/^let g:tlib#cmd#last_output = []$/;"	v
g:tlib#date#date_format	.vim/pack/ide/start/tlib/autoload/tlib/date.vim	/^let g:tlib#date#date_format = '%Y-%m-%d'$/;"	v
g:tlib#date#date_rx	.vim/pack/ide/start/tlib/autoload/tlib/date.vim	/^let g:tlib#date#date_rx = '\\<\\(\\d\\{4}\\)-\\(\\d\\d\\)-\\(\\d\\d\\)\\>'$/;"	v
g:tlib#date#dayshift	.vim/pack/ide/start/tlib/autoload/tlib/date.vim	/^let g:tlib#date#dayshift = 60 * 60 * 24$/;"	v
g:tlib#file#absolute_filename_rx	.vim/pack/ide/start/tlib/autoload/tlib/file.vim	/^    let g:tlib#file#absolute_filename_rx = '^\\~\\?[\\\/]'   "{{{2$/;"	v
g:tlib#file#drop	.vim/pack/ide/start/tlib/autoload/tlib/file.vim	/^    let g:tlib#file#drop = has('gui')   "{{{2$/;"	v
g:tlib#file#edit_cmds	.vim/pack/ide/start/tlib/autoload/tlib/file.vim	/^    let g:tlib#file#edit_cmds = g:tlib#file#use_tabs ? {'buffer': 'tab split | buffer', 'edit': /;"	v
g:tlib#file#reject_rx	.vim/pack/ide/start/tlib/autoload/tlib/file.vim	/^    let g:tlib#file#reject_rx = '\\%(^\\|[\\\/]\\)\\%(tags\\|Thumbs\\.db\\)$'   "{{{2$/;"	v
g:tlib#file#use_tabs	.vim/pack/ide/start/tlib/autoload/tlib/file.vim	/^    let g:tlib#file#use_tabs = 0   "{{{2$/;"	v
g:tlib#hash#use_adler32	.vim/pack/ide/start/tlib/autoload/tlib/hash.vim	/^    let g:tlib#hash#use_adler32 = ''   "{{{2$/;"	v
g:tlib#hash#use_crc32	.vim/pack/ide/start/tlib/autoload/tlib/hash.vim	/^    let g:tlib#hash#use_crc32 = ''   "{{{2$/;"	v
g:tlib#hash#use_crc32	.vim/pack/ide/start/tlib/spec/tlib/hash.vim	/^let g:tlib#hash#use_crc32 = 'ruby'$/;"	v
g:tlib#hash#use_crc32	.vim/pack/ide/start/tlib/spec/tlib/hash.vim	/^let g:tlib#hash#use_crc32 = 'vim'$/;"	v
g:tlib#hash#use_crc32	.vim/pack/ide/start/tlib/spec/tlib/hash.vim	/^let g:tlib#hash#use_crc32 = g:tlib_hash_use_crc32$/;"	v
g:tlib#input#keyagents_InputList_m	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^    let g:tlib#input#keyagents_InputList_m = extend(g:tlib#input#keyagents_InputList_m, g:tlib_e/;"	v
g:tlib#input#keyagents_InputList_s	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^    let g:tlib#input#keyagents_InputList_s = extend(g:tlib#input#keyagents_InputList_s, g:tlib_e/;"	v
g:tlib#sys#check_cygpath	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^    let g:tlib#sys#check_cygpath = g:tlib#sys#windows && tlib#sys#IsExecutable('cygpath', 1)   "/;"	v
g:tlib#sys#cygwin_expr	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^    let g:tlib#sys#cygwin_expr = '"bash -c ''". escape(%s, "''\\\\") ."''"'   "{{{2$/;"	v
g:tlib#sys#cygwin_path_rx	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^    let g:tlib#sys#cygwin_path_rx = '\/cygwin\/'   "{{{2$/;"	v
g:tlib#sys#null	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^    let g:tlib#sys#null = g:tlib#sys#windows ? 'NUL' : (filereadable('\/dev\/null') ? '\/dev\/nu/;"	v
g:tlib#sys#special_protocols	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^    let g:tlib#sys#special_protocols = ['https\\?', 'nntp', 'mailto']   "{{{2$/;"	v
g:tlib#sys#special_suffixes	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^    let g:tlib#sys#special_suffixes = ['xlsx\\?', 'docx\\?', 'pptx\\?', 'accdb', 'mdb', 'sqlite'/;"	v
g:tlib#sys#system_browser	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^        let g:tlib#sys#system_browser = "exec 'silent ! RunDll32.EXE URL.DLL,FileProtocolHandler/;"	v
g:tlib#sys#system_browser	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^        let g:tlib#sys#system_browser = "exec 'silent !'. g:netrw_browsex_viewer shellescape('%s/;"	v
g:tlib#sys#system_browser	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^        let g:tlib#sys#system_browser = "exec 'silent !gnome-open' shellescape('%s')"$/;"	v
g:tlib#sys#system_browser	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^        let g:tlib#sys#system_browser = "exec 'silent !kfmclient exec' shellescape('%s')"$/;"	v
g:tlib#sys#system_browser	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^        let g:tlib#sys#system_browser = "exec 'silent !open' shellescape('%s')"$/;"	v
g:tlib#sys#system_browser	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^        let g:tlib#sys#system_browser = "exec 'silent !xdg-open' shellescape('%s') '&'"$/;"	v
g:tlib#sys#system_browser	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^        let g:tlib#sys#system_browser = ''$/;"	v
g:tlib#sys#system_rx	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^    let g:tlib#sys#system_rx = printf('\\V\\%(\\^\\%(%s\\):\\|.\\%(%s\\)\\$\\)', join(g:tlib#sys/;"	v
g:tlib#sys#windows	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^    let g:tlib#sys#windows = &shell !~ 'sh' && (has('win16') || has('win32') || has('win64'))   /;"	v
g:tlib#trace#backtrace	.vim/pack/ide/start/tlib/autoload/tlib/trace.vim	/^    let g:tlib#trace#backtrace = 2   "{{{2$/;"	v
g:tlib#trace#hl	.vim/pack/ide/start/tlib/autoload/tlib/trace.vim	/^    let g:tlib#trace#hl = {'error': 'ErrorMsg', 'fatal': 'ErrorMsg', 'warn': 'WarningMsg'}   "{{/;"	v
g:tlib#trace#printer	.vim/pack/ide/start/tlib/autoload/tlib/trace.vim	/^            let g:tlib#trace#printer = 'echom'$/;"	v
g:tlib#trace#printer	.vim/pack/ide/start/tlib/autoload/tlib/trace.vim	/^            let g:tlib#trace#printer = ['file', a:vars.file]$/;"	v
g:tlib#trace#printer	.vim/pack/ide/start/tlib/autoload/tlib/trace.vim	/^    let g:tlib#trace#printer = 'echom'   "{{{2$/;"	v
g:tlib#trace#printer	.vim/pack/ide/start/tlib/autoload/tlib/trace.vim	/^    let g:tlib#trace#printer = 'echom'$/;"	v
g:tlib#type#nil	.vim/pack/ide/start/tlib/autoload/tlib/type.vim	/^let g:tlib#type#nil = []$/;"	v
g:tlib#vcs#executables	.vim/pack/ide/start/tlib/autoload/tlib/vcs.vim	/^            let g:tlib#vcs#executables[s:cmd] = executable(s:cmd1) ? s:cmd1 : ''$/;"	v
g:tlib#vim#simalt_maximize	.vim/pack/ide/start/tlib/autoload/tlib/vim.vim	/^        let g:tlib#vim#simalt_maximize = 'x'   "{{{2$/;"	v
g:tlib#vim#simalt_restore	.vim/pack/ide/start/tlib/autoload/tlib/vim.vim	/^        let g:tlib#vim#simalt_restore = 'r'   "{{{2$/;"	v
g:tlib#vim#use_vimtweak	.vim/pack/ide/start/tlib/autoload/tlib/vim.vim	/^        let g:tlib#vim#use_vimtweak = 0   "{{{2$/;"	v
g:tlib#vim#use_wmctrl	.vim/pack/ide/start/tlib/autoload/tlib/vim.vim	/^        let g:tlib#vim#use_wmctrl = executable('wmctrl')  "{{{2$/;"	v
g:tlib#win#null_id	.vim/pack/ide/start/tlib/autoload/tlib/win.vim	/^    let g:tlib#win#null_id = -1$/;"	v
g:tlib#win#null_id	.vim/pack/ide/start/tlib/autoload/tlib/win.vim	/^    let g:tlib#win#null_id = {}$/;"	v
g:tlib#win#use_winid	.vim/pack/ide/start/tlib/autoload/tlib/win.vim	/^    let g:tlib#win#use_winid = exists('*win_gotoid') && exists('*win_getid')   "{{{2$/;"	v
g:tlib_hash_use_crc32	.vim/pack/ide/start/tlib/spec/tlib/hash.vim	/^let g:tlib_hash_use_crc32 = g:tlib#hash#use_crc32$/;"	v
g:unite_force_overwrite_statusline	.vim/pack/ide/start/airline/autoload/airline/extensions/unite.vim	/^  let g:unite_force_overwrite_statusline = 0$/;"	v
g:vimfiler_force_overwrite_statusline	.vim/pack/ide/start/airline/autoload/airline/extensions.vim	/^    let g:vimfiler_force_overwrite_statusline = 0$/;"	v
g:virtual_scriptnames	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^    let g:virtual_scriptnames = {}$/;"	v
g:virtual_scriptnames	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^  let g:virtual_scriptnames[temp] = amatch$/;"	v
g:xtab_cwds	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^        let g:xtab_cwds[tabpagenr()-1] = t:cwd$/;"	v
g:xtabline_alt_action	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^    let g:xtabline_alt_action = get(g:, 'xtabline_alt_action', "buffer #")$/;"	v
g:xtabline_changing_buffer	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^        let g:xtabline_changing_buffer = 1$/;"	v
g:xtabline_include_previews	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^    let g:xtabline_include_previews = get(g:, 'xtabline_include_previews', 1)$/;"	v
gS	.vim/pack/ide/start/surround/plugin/surround.vim	/^  xmap gS  <Plug>VgSurround$/;"	m
get_root	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^get_root(Dir) ->$/;"	f
get_root	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^get_root(["src" | Tail], _Path) ->$/;"	f
get_root	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^get_root(["src", _Appname, "apps" | Tail], _Path) ->$/;"	f
get_root	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^get_root(["test" | Tail], _Path) ->$/;"	f
get_root	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^get_root([], Path) ->$/;"	f
get_root	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^get_root([_ | Tail], Path) ->$/;"	f
glob#Glob	.vim/pack/ide/start/addon-mw-utils/autoload/glob.vim	/^fun! glob#Glob(pattern, ...)$/;"	f
glob_linux#FileByGlobCurrentDir	.vim/pack/ide/start/addon-mw-utils/autoload/glob_linux.vim	/^function! glob_linux#FileByGlobCurrentDir(glob, exclude_pattern, ...)$/;"	f
globals	.vim/pack/ide/start/yajs/data/p.js	/^  var globals = {};$/;"	v
goyo	.vim/pack/ide/opt/goyo/autoload/goyo.vim	/^  augroup goyo$/;"	a
goyo#execute	.vim/pack/ide/opt/goyo/autoload/goyo.vim	/^function! goyo#execute(bang, dim)$/;"	f
goyo.vim ([고요](http://en.wiktionary.org/wiki/고요하다))	.vim/pack/ide/opt/goyo/README.md	/^goyo.vim ([고요](http:\/\/en.wiktionary.org\/wiki\/고요하다))$/;"	c
goyop	.vim/pack/ide/opt/goyo/autoload/goyo.vim	/^  augroup goyop$/;"	a
grey_color	.vim/colors/desert256.vim	/^    fun <SID>grey_color(n)$/;"	f
grey_color	.vim/colors/summerfruit256.vim	/^    fun <SID>grey_color(n)$/;"	f
grey_color	.vim/colors/wombat256.vim	/^fun <SID>grey_color(n)$/;"	f
grey_level	.vim/colors/desert256.vim	/^    fun <SID>grey_level(n)$/;"	f
grey_level	.vim/colors/summerfruit256.vim	/^    fun <SID>grey_level(n)$/;"	f
grey_level	.vim/colors/wombat256.vim	/^fun <SID>grey_level(n)$/;"	f
grey_number	.vim/colors/desert256.vim	/^    fun <SID>grey_number(x)$/;"	f
grey_number	.vim/colors/summerfruit256.vim	/^    fun <SID>grey_number(x)$/;"	f
grey_number	.vim/colors/wombat256.vim	/^fun <SID>grey_number(x)$/;"	f
group	.vim/pack/ide/start/yajs/data/p.js	/^  var group = '';$/;"	v
gutentags#add_job	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#add_job(module, tags_file, data) abort$/;"	f
gutentags#build_default_job_options	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^    function! gutentags#build_default_job_options(module) abort$/;"	f
gutentags#chdir	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#chdir(path)$/;"	f
gutentags#cscope#generate	.vim/pack/ide/start/gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#cscope#init	.vim/pack/ide/start/gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#init(project_root) abort$/;"	f
gutentags#cscope#on_job_exit	.vim/pack/ide/start/gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#ctags#generate	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#ctags#init	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#init(project_root) abort$/;"	f
gutentags#ctags#on_job_exit	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#on_job_exit(job, exit_val) abort$/;"	f
gutentags#default_get_project_root	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#default_get_project_root(path) abort$/;"	f
gutentags#default_stderr_cb	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#default_stderr_cb(chan, msg) abort$/;"	f
gutentags#default_stdout_cb	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#default_stdout_cb(chan, msg) abort$/;"	f
gutentags#error	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#error(message)$/;"	f
gutentags#fake	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#fake(...)$/;"	f
gutentags#find_job_index_by_data	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_data(module, data) abort$/;"	f
gutentags#find_job_index_by_tags_file	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_tags_file(module, tags_file) abort$/;"	f
gutentags#get_cachefile	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#get_cachefile(root_dir, filename) abort$/;"	f
gutentags#get_job_data	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_data(module, job_idx) abort$/;"	f
gutentags#get_job_tags_file	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_tags_file(module, job_idx) abort$/;"	f
gutentags#get_plat_file	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#get_plat_file(filename) abort$/;"	f
gutentags#get_project_file_list_cmd	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_file_list_cmd(path) abort$/;"	f
gutentags#get_project_info	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_info(path) abort$/;"	f
gutentags#get_project_root	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_root(path) abort$/;"	f
gutentags#get_res_file	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#get_res_file(filename) abort$/;"	f
gutentags#gtags_cscope#generate	.vim/pack/ide/start/gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#gtags_cscope#init	.vim/pack/ide/start/gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#init(project_root) abort$/;"	f
gutentags#gtags_cscope#on_job_exit	.vim/pack/ide/start/gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#inprogress	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#inprogress()$/;"	f
gutentags#is_path_rooted	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^    function! gutentags#is_path_rooted(path) abort$/;"	f
gutentags#make_args	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^    function! gutentags#make_args(cmd) abort$/;"	f
gutentags#normalizepath	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#normalizepath(path)$/;"	f
gutentags#on_vim_leave_pre	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#on_vim_leave_pre() abort$/;"	f
gutentags#remove_job	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job(module, job_idx) abort$/;"	f
gutentags#remove_job_by_data	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job_by_data(module, data) abort$/;"	f
gutentags#rescan	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#rescan(...)$/;"	f
gutentags#setup_gutentags	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#setup_gutentags() abort$/;"	f
gutentags#shellslash	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#shellslash(path)$/;"	f
gutentags#start_job	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^    function! gutentags#start_job(cmd, opts) abort$/;"	f
gutentags#statusline	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#statusline(...) abort$/;"	f
gutentags#statusline_cb	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#statusline_cb(fmt_cb, ...) abort$/;"	f
gutentags#stripslash	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#stripslash(path)$/;"	f
gutentags#throw	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#throw(message)$/;"	f
gutentags#toggletrace	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#toggletrace(...)$/;"	f
gutentags#trace	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#trace(message, ...)$/;"	f
gutentags#validate_cmd	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#validate_cmd(cmd) abort$/;"	f
gutentags#warning	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! gutentags#warning(message)$/;"	f
gutentags_detect	.vim/pack/ide/start/gutentags/plugin/gutentags.vim	/^augroup gutentags_detect$/;"	a
hilink	.vim/pack/ide/start/yajs/data/p.js	/^  var hilink = true;$/;"	v
hl	.vim/pack/ide/start/airline/t/highlighter.vim	/^      let hl = airline#highlighter#get_highlight('Foo1_to_Foo2')$/;"	v
hl	.vim/pack/ide/start/airline/t/highlighter.vim	/^    let hl = airline#highlighter#get_highlight('Foo1_to_Foo2')$/;"	v
hl	.vim/pack/ide/start/airline/t/themes.vim	/^    let hl = airline#themes#get_highlight('Foo', 'bold', 'italic')$/;"	v
hl	.vim/pack/ide/start/airline/t/themes.vim	/^    let hl = airline#themes#get_highlight2(['Foo','bg'], ['Foo','fg'], 'italic', 'bold')$/;"	v
hs_highlight_boolean	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^let hs_highlight_boolean=1$/;"	v
hs_highlight_delimiters	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^let hs_highlight_delimiters=1$/;"	v
html_my_rendering	.vim/colors/tabula.vim	/^let html_my_rendering=1$/;"	v
hunks ([vim-gitgutter][29] & [vim-signify][30] & [coc-git][59])	.vim/pack/ide/start/airline/README.md	/^#### hunks ([vim-gitgutter][29] & [vim-signify][30] & [coc-git][59])$/;"	t	section:Features""Seamless integration
i	.vim/pack/ide/start/yajs/data/p.js	/^  var i = 0;$/;"	v
iTerm2 color scheme	.vim/pack/ide/opt/seoul256/README.md	/^iTerm2 color scheme$/;"	s
init-author	.vim/pack/ide/start/yajs/Makefile	/^init-author:$/;"	t
init-runtime	.vim/pack/ide/start/yajs/Makefile	/^init-runtime:$/;"	t
install	.vim/pack/ide/start/yajs/Makefile	/^install: init-runtime bundle pure-install record$/;"	t
install-deps	.vim/pack/ide/start/yajs/Makefile	/^install-deps:$/;"	t
install_file	.vim/pack/ide/start/yajs/Makefile	/^install_file = \\$/;"	m
install_git_source	.vim/pack/ide/start/yajs/Makefile	/^install_git_source = \\$/;"	m
install_source	.vim/pack/ide/start/yajs/Makefile	/^install_source = \\$/;"	m
is-upper-case	.vim/pack/ide/start/yajs/package.json	/^        "is-upper-case": "*"$/;"	s	object:devDependencies
isUpper	.vim/pack/ide/start/yajs/data/p.js	/^var isUpper = require('is-upper-case');$/;"	v
javascript_props	.vim/pack/ide/start/yajs/syntax/javascript.vim	/^let javascript_props = 1$/;"	v
js-yaml	.vim/pack/ide/start/yajs/package.json	/^        "js-yaml": "*",$/;"	s	object:devDependencies
labels: "feature request"	.vim/pack/ide/start/nerdtree/.github/ISSUE_TEMPLATE/feature_request.md	/^labels: "feature request"$/;"	s
labels: "general question"	.vim/pack/ide/start/nerdtree/.github/ISSUE_TEMPLATE/question.md	/^labels: "general question"$/;"	s
labels: bug	.vim/pack/ide/start/nerdtree/.github/ISSUE_TEMPLATE/bug.md	/^labels: bug$/;"	s
less	.vim/pack/ide/start/syntastic/syntax_checkers/less/less-lint.js	/^  var args, fs, less, options, parser;$/;"	v
license	.vim/pack/ide/start/yajs/package.json	/^    "license": "Same as Vim"$/;"	s
link	.vim/pack/ide/start/yajs/Makefile	/^link: init-runtime$/;"	t
link_file	.vim/pack/ide/start/yajs/Makefile	/^link_file = \\$/;"	m
loaded_bufkill	.vim/plugin/bufkill.vim	/^let loaded_bufkill = 1$/;"	v
loaded_nerd_comments	.vim/pack/ide/start/nerdcommenter/plugin/nerdcommenter.vim	/^let loaded_nerd_comments = 1$/;"	v
loaded_nerd_tree	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_tcomment	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^let loaded_tcomment = 400$/;"	v
loaded_tlib_macros	.vim/pack/ide/start/tlib/macros/tlib.vim	/^let loaded_tlib_macros = 1$/;"	v
main	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^main([File]) ->$/;"	f
main	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^main(_) ->$/;"	f
main	.vim/pack/ide/start/tcomment/spec/tcomment/issue30_test.c	/^int main()$/;"	f	typeref:typename:int
main	.vim/pack/ide/start/tcomment/spec/tcomment/issue30_test_2.c	/^int main()$/;"	f	typeref:typename:int
main	.vim/pack/ide/start/tcomment/spec/tcomment/issue30_test_3.c	/^int main()$/;"	f	typeref:typename:int
main_syntax	.vim/pack/ide/start/yajs/syntax/javascript.vim	/^  let main_syntax = 'javascript'$/;"	v
main_syntax	.vim/syntax/htmljinja.vim	/^  let main_syntax = 'html'$/;"	v
maintainer	.vim/pack/ide/start/tcomment/addon-info.json	/^    "maintainer" : "Tom Link <micathom at gmail com>",$/;"	s
maintainer	.vim/pack/ide/start/tlib/addon-info.json	/^    "maintainer" : "Tom Link <micathom at gmail com>",$/;"	s
make_term	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^make_term(Str) ->$/;"	f
map	.vim/pack/ide/start/airline/t/themes.vim	/^    let map = airline#themes#generate_color_map($/;"	v
match	.vim/pack/ide/start/syntastic/syntax_checkers/python/codec.py	/^        match = re.match(r"#\\s*coding\\s*:\\s*(?P<coding>\\w+)", text[0])$/;"	v
mkfilelist	.vim/pack/ide/start/yajs/Makefile	/^mkfilelist:$/;"	t
mkrecordscript	.vim/pack/ide/start/yajs/Makefile	/^mkrecordscript:$/;"	t
name	.vim/pack/ide/start/tcomment/addon-info.json	/^    "name" : "tcomment",$/;"	s
name	.vim/pack/ide/start/tlib/addon-info.json	/^    "name" : "tlib",$/;"	s
name	.vim/pack/ide/start/yajs/package.json	/^    "name": "yajs.vim",$/;"	s
nerdcommenter#Comment	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! nerdcommenter#Comment(mode, type) range abort$/;"	f
nerdcommenter#IsCharCommented	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! nerdcommenter#IsCharCommented(line, col) abort$/;"	f
nerdcommenter#IsLineCommented	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! nerdcommenter#IsLineCommented(lineNo) abort$/;"	f
nerdcommenter#SetUp	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! nerdcommenter#SetUp() abort$/;"	f
nerdcommenter#SwitchToAlternativeDelimiters	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! nerdcommenter#SwitchToAlternativeDelimiters(printMsgs) abort$/;"	f
nerdcommenter#delimiterMap	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^let nerdcommenter#delimiterMap = s:delimiterMap$/;"	v
nerdtree#checkForBrowse	.vim/pack/ide/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#checkForBrowse(dir) abort$/;"	f
nerdtree#closeBookmarksOnOpen	.vim/pack/ide/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#closeBookmarksOnOpen() abort$/;"	f
nerdtree#closeTreeOnOpen	.vim/pack/ide/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#closeTreeOnOpen() abort$/;"	f
nerdtree#compareNodePaths	.vim/pack/ide/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodePaths(p1, p2) abort$/;"	f
nerdtree#compareNodes	.vim/pack/ide/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodes(n1, n2) abort$/;"	f
nerdtree#completeBookmarks	.vim/pack/ide/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#completeBookmarks(A,L,P) abort$/;"	f
nerdtree#deprecated	.vim/pack/ide/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#deprecated(func, ...) abort$/;"	f
nerdtree#echo	.vim/pack/ide/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echo(msg) abort$/;"	f
nerdtree#echoError	.vim/pack/ide/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoError(msg) abort$/;"	f
nerdtree#echoWarning	.vim/pack/ide/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoWarning(msg) abort$/;"	f
nerdtree#exec	.vim/pack/ide/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#exec(cmd, ignoreAll) abort$/;"	f
nerdtree#has_opt	.vim/pack/ide/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#has_opt(options, name) abort$/;"	f
nerdtree#loadClassFiles	.vim/pack/ide/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#loadClassFiles() abort$/;"	f
nerdtree#postSourceActions	.vim/pack/ide/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#postSourceActions() abort$/;"	f
nerdtree#renderView	.vim/pack/ide/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#renderView() abort$/;"	f
nerdtree#runningCygwin	.vim/pack/ide/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningCygwin() abort$/;"	f
nerdtree#runningWindows	.vim/pack/ide/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningWindows() abort$/;"	f
nerdtree#slash	.vim/pack/ide/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#slash() abort$/;"	f
nerdtree#ui_glue#bookmarkNode	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#bookmarkNode(...) abort$/;"	f
nerdtree#ui_glue#chRootCwd	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#chRootCwd() abort$/;"	f
nerdtree#ui_glue#clearBookmarks	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#clearBookmarks(bookmarks) abort$/;"	f
nerdtree#ui_glue#createDefaultBindings	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#createDefaultBindings() abort$/;"	f
nerdtree#ui_glue#invokeKeyMap	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#invokeKeyMap(key) abort$/;"	f
nerdtree#ui_glue#openBookmark	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#openBookmark(name) abort$/;"	f
nerdtree#ui_glue#revealBookmark	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#revealBookmark(name) abort$/;"	f
nerdtree#ui_glue#setupCommands	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#setupCommands() abort$/;"	f
nerdtree#ui_glue#upDir	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#upDir(preserveState) abort$/;"	f
nerdtree#version	.vim/pack/ide/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#version(...) abort$/;"	f
nested_app_ebins	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^nested_app_ebins() ->$/;"	f
options	.vim/pack/ide/start/syntastic/syntax_checkers/less/less-lint.js	/^  var args, fs, less, options, parser;$/;"	v
parser	.vim/pack/ide/start/syntastic/syntax_checkers/less/less-lint.js	/^  parser = new less.Parser(options);$/;"	v
parser	.vim/pack/ide/start/syntastic/syntax_checkers/less/less-lint.js	/^  var args, fs, less, options, parser;$/;"	v
plugin	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^    augroup plugin-xtabline$/;"	a
predef	.vim/pack/ide/start/yajs/data/p.js	/^  var predef = '';$/;"	v
pure-install	.vim/pack/ide/start/yajs/Makefile	/^pure-install:$/;"	t
q	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^        nnoremap <buffer> <silent> q    :<C-U>echoerr "fugitive: q is removed in favor of gq (or/;"	m
q	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^      nnoremap <buffer> <silent> q :<C-U>echoerr "fugitive: q is removed in favor of gq (or :q)"/;"	m
q	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^    nnoremap <buffer> <silent> q :<C-U>echoerr "fugitive: q removed in favor of gq (or :q)"<CR>$/;"	m
rebar_file	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^rebar_file(Dir, normal) -> filename:join(Dir, "rebar.config");$/;"	f
rebar_file	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^rebar_file(Dir, test)   ->$/;"	f
rebar_opts	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^rebar_opts(RebarFile) ->$/;"	f
record	.vim/pack/ide/start/yajs/Makefile	/^record: mkfilelist mkrecordscript$/;"	t
record_file	.vim/pack/ide/start/yajs/Makefile	/^record_file = \\$/;"	m
release	.vim/pack/ide/start/yajs/Makefile	/^release:$/;"	t
repository	.vim/pack/ide/start/tcomment/addon-info.json	/^    "repository" : {"type": "git", "url": "git:\/\/github.com\/tomtom\/tcomment_vim.git"},$/;"	o
repository	.vim/pack/ide/start/tlib/addon-info.json	/^    "repository" : {"type": "git", "url": "git:\/\/github.com\/tomtom\/tlib_vim.git"},$/;"	o
rgb	.vim/colors/desert256.vim	/^    fun <SID>rgb(rgb)$/;"	f
rgb	.vim/colors/summerfruit256.vim	/^    fun <SID>rgb(rgb)$/;"	f
rgb	.vim/colors/wombat256.vim	/^fun <SID>rgb(rgb)$/;"	f
rgb_color	.vim/colors/desert256.vim	/^    fun <SID>rgb_color(x, y, z)$/;"	f
rgb_color	.vim/colors/summerfruit256.vim	/^    fun <SID>rgb_color(x, y, z)$/;"	f
rgb_color	.vim/colors/wombat256.vim	/^fun <SID>rgb_color(x, y, z)$/;"	f
rgb_level	.vim/colors/desert256.vim	/^    fun <SID>rgb_level(n)$/;"	f
rgb_level	.vim/colors/summerfruit256.vim	/^    fun <SID>rgb_level(n)$/;"	f
rgb_level	.vim/colors/wombat256.vim	/^fun <SID>rgb_level(n)$/;"	f
rgb_number	.vim/colors/desert256.vim	/^    fun <SID>rgb_number(x)$/;"	f
rgb_number	.vim/colors/summerfruit256.vim	/^    fun <SID>rgb_number(x)$/;"	f
rgb_number	.vim/colors/wombat256.vim	/^fun <SID>rgb_number(x)$/;"	f
rmrecord	.vim/pack/ide/start/yajs/Makefile	/^rmrecord:$/;"	t
ruby_operators	.vim/colors/herald.vim	/^let ruby_operators = 1$/;"	v
ruby_operators	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^let ruby_operators = 1$/;"	v
rule	.vim/pack/ide/start/yajs/data/p.js	/^  var rule = '';$/;"	v
rules	.vim/pack/ide/start/yajs/data/p.js	/^  var rules = [];$/;"	v
run	Makefile	/^run:$/;"	t
s	.vim/pack/ide/start/airline/t/section.vim	/^    let s = airline#section#create(['asdf', 'func'])$/;"	v
s	.vim/pack/ide/start/airline/t/section.vim	/^    let s = airline#section#create(['conditional'])$/;"	v
s	.vim/pack/ide/start/airline/t/section.vim	/^    let s = airline#section#create(['hi'])$/;"	v
s	.vim/pack/ide/start/airline/t/section.vim	/^    let s = airline#section#create(['paste'])$/;"	v
s	.vim/pack/ide/start/airline/t/section.vim	/^    let s = airline#section#create(['text', 'raw', 'func'])$/;"	v
s	.vim/pack/ide/start/airline/t/section.vim	/^    let s = airline#section#create(['whitespace'])$/;"	v
s	.vim/pack/ide/start/airline/t/section.vim	/^    let s = airline#section#create_left(['asdf', 'aaaa', 'raw'])$/;"	v
s	.vim/pack/ide/start/airline/t/section.vim	/^    let s = airline#section#create_left(['asdf', 'raw'])$/;"	v
s	.vim/pack/ide/start/airline/t/section.vim	/^    let s = airline#section#create_left(['text', 'text'])$/;"	v
s	.vim/pack/ide/start/airline/t/section.vim	/^    let s = airline#section#create_right(['%t', 'asdf', '%{getcwd()}'])$/;"	v
s	.vim/pack/ide/start/airline/t/section.vim	/^    let s = airline#section#create_right(['ffenc','%{strftime("%H:%M")}'])$/;"	v
s	.vim/pack/ide/start/airline/t/section.vim	/^    let s = airline#section#create_right(['raw', '%f'])$/;"	v
s	.vim/pack/ide/start/airline/t/section.vim	/^    let s = airline#section#create_right(['text', 'text'])$/;"	v
s	.vim/pack/ide/start/tlib/spec/tlib/rx.vim	/^    let s = printf('%sfoo%sbar%s', c, c, c)$/;"	v
s	.vim/pack/ide/start/tlib/test/tlib.vim	/^    let s = printf('%sfoo%sbar%s', c, c, c)$/;"	v
s:AcceptSelection	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:AcceptSelection(action)$/;"	f
s:AddHeader	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:AddHeader(key, value) abort$/;"	f
s:AddLeftDelim	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:AddLeftDelim(delim, theLine) abort$/;"	f
s:AddLeftDelimAligned	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:AddLeftDelimAligned(delim, theLine, alignIndx) abort$/;"	f
s:AddParagraph	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/db.vim	/^func! s:AddParagraph(paragraph) abort$/;"	f
s:AddRightDelim	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:AddRightDelim(delim, theLine) abort$/;"	f
s:AddRightDelimAligned	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:AddRightDelimAligned(delim, theLine, alignIndx) abort$/;"	f
s:AddSection	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:AddSection(label, lines, ...) abort$/;"	f
s:AddToClasspath	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^function! s:AddToClasspath(classpath, path) " {{{2$/;"	f
s:AltMultipart	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:AltMultipart() abort$/;"	f
s:AltNested	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:AltNested() abort$/;"	f
s:Aluminium	.vim/colors/two2tango.vim	/^let s:Aluminium		= ['#eeeeec', '#d3d7cf', '#babdb6',$/;"	v
s:AppendCommentToLine	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:AppendCommentToLine() abort$/;"	f
s:ArgSplit	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:ArgSplit(string) abort$/;"	f
s:Args	.vim/pack/ide/start/syntastic/syntax_checkers/html/tidy.vim	/^function! s:Args() " {{{2$/;"	f
s:AskPassArgs	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:AskPassArgs(dir) abort$/;"	f
s:AutoUpdate	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:AutoUpdate(fname, force, ...) abort$/;"	f
s:BLOCKLEVEL_TAGS	.vim/pack/ide/start/syntastic/syntax_checkers/html/tidy.vim	/^let s:BLOCKLEVEL_TAGS = [$/;"	v
s:BMRU_Push	.vim/pack/ide/start/tlib/autoload/tlib/buffer.vim	/^function! s:BMRU_Push(bnr) abort "{{{3$/;"	f
s:BSearch	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^func! s:BSearch(resultset, left, right, vlnum) abort$/;"	f
s:Background	.vim/colors/two2tango.vim	/^let s:Background    = '#212628'$/;"	v
s:BitwiseComparison	.vim/pack/ide/start/tlib/autoload/tlib/bitwise.vim	/^function! s:BitwiseComparison(num1, num2, rtype, expr) "{{{3$/;"	f
s:BlameBufnr	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:BlameBufnr(...) abort$/;"	f
s:BlameCommit	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:BlameCommit(cmd, ...) abort$/;"	f
s:BlameCommitFileLnum	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:BlameCommitFileLnum(...) abort$/;"	f
s:BlameJump	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:BlameJump(suffix, ...) abort$/;"	f
s:BlameLeave	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:BlameLeave() abort$/;"	f
s:BlameQuit	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:BlameQuit() abort$/;"	f
s:BlameRehighlight	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:BlameRehighlight() abort$/;"	f
s:BlameSubcommand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:BlameSubcommand(line1, count, range, bang, mods, options) abort$/;"	f
s:BlobTemp	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:BlobTemp(url) abort$/;"	f
s:BlurStatus	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:BlurStatus() abort$/;"	f
s:BoldStatement	.vim/colors/tabula.vim	/^  let s:BoldStatement = g:Tabula_BoldStatement$/;"	v
s:BoldStatement	.vim/colors/tabula.vim	/^let s:BoldStatement = 0$/;"	v
s:Bookmark	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^let s:Bookmark = {}$/;"	v
s:Bookmark.AddBookmark	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
s:Bookmark.BookmarkExistsFor	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
s:Bookmark.BookmarkFor	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
s:Bookmark.BookmarkNames	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
s:Bookmark.Bookmarks	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
s:Bookmark.CacheBookmarks	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
s:Bookmark.ClearAll	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ClearAll()$/;"	f
s:Bookmark.CompareBookmarksByName	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CompareBookmarksByName(firstBookmark, secondBookmark)$/;"	f
s:Bookmark.Edit	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Edit()$/;"	f
s:Bookmark.GetNodeForName	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot, nerdtree)$/;"	f
s:Bookmark.GetSelected	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetSelected()$/;"	f
s:Bookmark.InvalidBookmarks	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
s:Bookmark.New	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.New(name, path)$/;"	f
s:Bookmark.SortBookmarksList	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.SortBookmarksList()$/;"	f
s:Bookmark.ToRoot	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ToRoot(name, nerdtree)$/;"	f
s:Bookmark.Write	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Write()$/;"	f
s:Bookmark.activate	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.activate(nerdtree, ...)$/;"	f
s:Bookmark.delete	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.delete()$/;"	f
s:Bookmark.getNode	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.getNode(nerdtree, searchFromAbsoluteRoot)$/;"	f
s:Bookmark.mustExist	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.mustExist()$/;"	f
s:Bookmark.open	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.open(nerdtree, ...)$/;"	f
s:Bookmark.openInNewTab	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
s:Bookmark.setPath	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.setPath(path)$/;"	f
s:Bookmark.str	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.str()$/;"	f
s:Bookmark.toRoot	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.toRoot(nerdtree)$/;"	f
s:Bookmark.validate	.vim/pack/ide/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.validate()$/;"	f
s:BranchCfile	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:BranchCfile(result) abort$/;"	f
s:BrowserOpen	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:BrowserOpen(url, mods, echo_copy) abort$/;"	f
s:BufEnterHook	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! s:BufEnterHook(fname) abort " {{{2$/;"	f
s:BufName	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:BufName(var) abort$/;"	f
s:BufReadPostHook	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! s:BufReadPostHook(fname) abort " {{{2$/;"	f
s:BufWinEnterHook	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! s:BufWinEnterHook(fname) abort " {{{2$/;"	f
s:BufWritePostHook	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! s:BufWritePostHook(fname) abort " {{{2$/;"	f
s:BuildCommand	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/backend.vim	/^func! s:BuildCommand(args, for_shell) abort$/;"	f
s:BuildEnvPrefix	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:BuildEnvPrefix(env) abort$/;"	f
s:BuildItem	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^function! s:BuildItem(menu, def) "{{{3$/;"	f
s:BuildMenu	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^function! s:BuildMenu(world) "{{{3$/;"	f
s:BuildPrompt	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:BuildPrompt(upd)$/;"	f
s:BuildResizeCmd	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! s:BuildResizeCmd(layout, resize, vresize) abort$/;"	f
s:BuildShell	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:BuildShell(dir, env, git, args) abort$/;"	f
s:Butter	.vim/colors/two2tango.vim	/^let s:Butter		= ['#fce94f', '#edd400', '#c4a000']$/;"	v
s:CONTENT_TYPE	.vim/pack/ide/start/syntastic/syntax_checkers/html/validator.vim	/^let s:CONTENT_TYPE = {$/;"	v
s:CacheErrors	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! s:CacheErrors(buf, checker_names) abort " {{{2$/;"	f
s:CallAgent	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^function! s:CallAgent(handler, world, list) abort "{{{3$/;"	f
s:CanCommentLine	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CanCommentLine(forceNested, lineNum) abort$/;"	f
s:CanPlaceCursor	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CanPlaceCursor(line, col) abort$/;"	f
s:CanSexyCommentLines	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CanSexyCommentLines(topline, bottomline) abort$/;"	f
s:CanToggleCommentLine	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CanToggleCommentLine(forceNested, lineNum) abort$/;"	f
s:CeilingDirectories	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! s:CeilingDirectories() abort$/;"	f
s:CfilePorcelain	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:CfilePorcelain(...) abort$/;"	f
s:Chameleon	.vim/colors/two2tango.vim	/^let s:Chameleon		= ['#8ae234', '#73d216', '#4e9a06']$/;"	v
s:ChangeFoldLevel	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:ChangeFoldLevel(diff, force) abort$/;"	f
s:CheckAgentReturnValue	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^function! s:CheckAgentReturnValue(name, value) "{{{3$/;"	f
s:CheckDefined	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  def s:CheckDefined(colors: list<any>): list<any>$/;"	f
s:CheckDefined	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  function! s:CheckDefined(colors) abort$/;"	f
s:CheckExCtagsVersion	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:CheckExCtagsVersion(output) abort$/;"	f
s:CheckFTCtags	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:CheckFTCtags(bin, ftype) abort$/;"	f
s:CheckForExCtags	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:CheckForExCtags(silent) abort$/;"	f
s:CheckMouseClick	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:CheckMouseClick() abort$/;"	f
s:Chocolate	.vim/colors/two2tango.vim	/^let s:Chocolate		= ['#e9b96e', '#c17d11', '#8f5902']$/;"	v
s:ChompDefault	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:ChompDefault(default, ...) abort$/;"	f
s:ChompStderr	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:ChompStderr(...) abort$/;"	f
s:ClassSep	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^function! s:ClassSep() " {{{2$/;"	f
s:ClearCache	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! s:ClearCache(buf) abort " {{{2$/;"	f
s:Close	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:Close()$/;"	f
s:CloseCustomFuncs	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:CloseCustomFuncs()$/;"	f
s:CloseFold	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:CloseFold() abort$/;"	f
s:CloseWindow	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:CloseWindow() abort$/;"	f
s:ColorPre	.vim/colors/tabula.vim	/^    let s:ColorPre = g:Tabula_ColorPre$/;"	v
s:ColorPre	.vim/colors/tabula.vim	/^let s:ColorPre = "blue"$/;"	v
s:CommentBlock	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CommentBlock(top, bottom, lSide, rSide, forceNested) abort$/;"	f
s:CommentBlock	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^function! s:CommentBlock(beg, end, cbeg, cend, comment_mode, comment_do, checkRx, cdef) abort$/;"	f
s:CommentLines	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CommentLines(forceNested, align, firstLine, lastLine) abort$/;"	f
s:CommentLinesMinimal	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CommentLinesMinimal(firstLine, lastLine) abort$/;"	f
s:CommentLinesSexy	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CommentLinesSexy(topline, bottomline) abort$/;"	f
s:CommentLinesToggle	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CommentLinesToggle(forceNested, firstLine, lastLine) abort$/;"	f
s:CommentRegion	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CommentRegion(topLine, topCol, bottomLine, bottomCol, forceNested) abort$/;"	f
s:CommitInteractive	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:CommitInteractive(line1, line2, range, bang, mods, options, patch) abort$/;"	f
s:CommitSubcommand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:CommitSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:CompactView	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^func! s:CompactView() abort$/;"	f
s:CompactViewIncr	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^func! s:CompactViewIncr(base_vlnum) abort$/;"	f
s:CompareBufferNrByMRU	.vim/pack/ide/start/tlib/autoload/tlib/buffer.vim	/^function! s:CompareBufferNrByMRU(a, b) abort "{{{3$/;"	f
s:CompareBuffernameByBasename	.vim/pack/ide/start/tlib/autoload/tlib/buffer.vim	/^function! s:CompareBuffernameByBasename(a, b) abort "{{{3$/;"	f
s:CompareHash	.vim/pack/ide/start/tlib/spec/tlib/hash.vim	/^function! s:CompareHash(text) "{{{3$/;"	f
s:CompletableSubcommands	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:CompletableSubcommands(dir) abort$/;"	f
s:CompleteCheckerName	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! s:CompleteCheckerName(argLead, cmdLine, cursorPos) abort " {{{2$/;"	f
s:CompleteFiletypes	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! s:CompleteFiletypes(argLead, cmdLine, cursorPos) abort " {{{2$/;"	f
s:CompleteHeads	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:CompleteHeads(dir) abort$/;"	f
s:CompletePush	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:CompletePush(A, L, P, ...) abort$/;"	f
s:CompleteRemote	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:CompleteRemote(A, L, P, ...) abort$/;"	f
s:CompleteRevision	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:CompleteRevision(A, L, P, ...) abort$/;"	f
s:CompleteSub	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:CompleteSub(subcommand, A, L, P, ...) abort$/;"	f
s:ConfigCallback	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:ConfigCallback(r, into) abort$/;"	f
s:ConfigLengthSort	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:ConfigLengthSort(i1, i2) abort$/;"	f
s:ConfigTimestamps	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:ConfigTimestamps(dir, dict) abort$/;"	f
s:ConstructFromCommentsOption	.vim/pack/ide/start/tcomment/autoload/tcomment/vimoptions.vim	/^function! s:ConstructFromCommentsOption(comment_mode) abort$/;"	f
s:ConsumeResult	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^func! s:ConsumeResult(max) abort$/;"	f
s:ContainingCommit	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:ContainingCommit() abort$/;"	f
s:ConvertLeadingSpacesToTabs	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:ConvertLeadingSpacesToTabs(line) abort$/;"	f
s:ConvertLeadingTabsToSpaces	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:ConvertLeadingTabsToSpaces(line) abort$/;"	f
s:ConvertLeadingWhiteSpace	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:ConvertLeadingWhiteSpace(line) abort$/;"	f
s:CorrectFocusOnStartup	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:CorrectFocusOnStartup() abort$/;"	f
s:CountHelper	.vim/pack/ide/start/tlib/autoload/tlib/string.vim	/^function! s:CountHelper() "{{{3$/;"	f
s:CountNonESCedOccurances	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CountNonESCedOccurances(str, searchstr, escChar) abort$/;"	f
s:CreateAutocommands	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:CreateAutocommands() abort$/;"	f
s:CreateDelimMapFromCms	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CreateDelimMapFromCms() abort$/;"	f
s:CreateMaps	.vim/pack/ide/start/nerdcommenter/plugin/nerdcommenter.vim	/^function! s:CreateMaps(modes, target, desc, combo)$/;"	f
s:CreateNewFile	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:CreateNewFile(...)$/;"	f
s:CreateTabTreeVCS	.vim/pack/ide/start/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:CreateTabTreeVCS(name)$/;"	f
s:Creator	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^let s:Creator = {}$/;"	v
s:Creator.BufNamePrefix	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.BufNamePrefix()$/;"	f
s:Creator.CreateMirror	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateMirror()$/;"	f
s:Creator.CreateTabTree	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateTabTree(name)$/;"	f
s:Creator.CreateWindowTree	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateWindowTree(dir)$/;"	f
s:Creator.New	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.New()$/;"	f
s:Creator.ToggleTabTree	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.ToggleTabTree(dir)$/;"	f
s:Creator._bindMappings	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._bindMappings()$/;"	f
s:Creator._broadcastInitEvent	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._broadcastInitEvent()$/;"	f
s:Creator._createNERDTree	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createNERDTree(path, type)$/;"	f
s:Creator._createTreeWin	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createTreeWin()$/;"	f
s:Creator._isBufHidden	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._isBufHidden(nr)$/;"	f
s:Creator._nextBufferName	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferName()$/;"	f
s:Creator._nextBufferNumber	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferNumber()$/;"	f
s:Creator._pathForString	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._pathForString(str)$/;"	f
s:Creator._removeTreeBufForTab	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._removeTreeBufForTab()$/;"	f
s:Creator._setCommonBufOptions	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setCommonBufOptions()$/;"	f
s:Creator._setupStatusline	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setupStatusline()$/;"	f
s:Creator._tabpagevar	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._tabpagevar(tabnr, var)$/;"	f
s:Creator._uniq	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._uniq(list)$/;"	f
s:Creator.createMirror	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createMirror()$/;"	f
s:Creator.createTabTree	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createTabTree(name)$/;"	f
s:Creator.createWindowTree	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createWindowTree(dir)$/;"	f
s:Creator.toggleTabTree	.vim/pack/ide/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.toggleTabTree(dir)$/;"	f
s:CtagsErrMsg	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:CtagsErrMsg(errmsg, infomsg, silent, ...) abort$/;"	f
s:CurColor	.vim/colors/tabula.vim	/^  let s:CurColor = g:Tabula_CurColor$/;"	v
s:CurColor	.vim/colors/tabula.vim	/^let s:CurColor = "blue"$/;"	v
s:CurTypeName	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:CurTypeName()$/;"	f
s:CurlResponse	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:CurlResponse(result) abort$/;"	f
s:DEFAULTS	.vim/pack/ide/start/syntastic/syntax_checkers/html/validator.vim	/^let s:DEFAULTS = {$/;"	v
s:DEFAULTS	.vim/pack/ide/start/syntastic/syntax_checkers/html/w3.vim	/^let s:DEFAULTS = {$/;"	v
s:DarkError	.vim/colors/tabula.vim	/^  let s:DarkError = g:Tabula_DarkError$/;"	v
s:DarkError	.vim/colors/tabula.vim	/^let s:DarkError = 0$/;"	v
s:DefactorizeLine	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/db.vim	/^func! s:DefactorizeLine(line, fname_guess) abort$/;"	f
s:DefaultContext	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/opt.vim	/^func! s:DefaultContext() abort$/;"	f
s:DefaultValue	.vim/pack/ide/start/tcomment/autoload/tcomment/vimoptions.vim	/^function! s:DefaultValue(option) abort$/;"	f
s:Delete	.vim/pack/ide/start/tlib/autoload/tlib/cache.vim	/^function! s:Delete(msg, file, flags) abort "{{{3$/;"	f
s:DetectFileType	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:DetectFileType(type, ft)$/;"	f
s:DetectFiletype	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:DetectFiletype(bufnr) abort$/;"	f
s:Diff	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/edit.vim	/^func! s:Diff(orig, modi) abort$/;"	f
s:DiffFile	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/edit.vim	/^func! s:DiffFile(orig, modi) abort$/;"	f
s:DiffModifier	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DiffModifier(count, default) abort$/;"	f
s:DifftoolSubcommand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DifftoolSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:Dir	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:Dir(...) abort$/;"	f
s:DirCheck	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DirCheck(...) abort$/;"	f
s:DirCommitFile	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DirCommitFile(path) abort$/;"	f
s:DirRev	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DirRev(url) abort$/;"	f
s:DirUrlPrefix	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DirUrlPrefix(...) abort$/;"	f
s:DiscardResult	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^func! s:DiscardResult() abort$/;"	f
s:Do	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:Do(action)$/;"	f
s:Do	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:Do(action, visual) abort$/;"	f
s:DoAutocmd	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoAutocmd(...) abort$/;"	f
s:DoAutocmdChanged	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoAutocmdChanged(dir) abort$/;"	f
s:DoReplacements	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^function! s:DoReplacements(text, tokens, replacements) abort "{{{3$/;"	f
s:DoSearchAsync	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! s:DoSearchAsync(args) abort$/;"	f
s:DoSearchSync	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! s:DoSearchSync(args) abort$/;"	f
s:DoStagePushHeader	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoStagePushHeader(value) abort$/;"	f
s:DoStageUnpushed	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoStageUnpushed(record) abort$/;"	f
s:DoStageUnpushedHeading	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoStageUnpushedHeading(heading) abort$/;"	f
s:DoStageUnstaged	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoStageUnstaged(record) abort$/;"	f
s:DoStageUnstagedHeading	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoStageUnstagedHeading(heading) abort$/;"	f
s:DoStageUntracked	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoStageUntracked(record) abort$/;"	f
s:DoStageUntrackedHeading	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoStageUntrackedHeading(heading) abort$/;"	f
s:DoToggleHeadHeader	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleHeadHeader(value) abort$/;"	f
s:DoToggleHelpHeader	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleHelpHeader(value) abort$/;"	f
s:DoTogglePushHeader	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoTogglePushHeader(value) abort$/;"	f
s:DoToggleStaged	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleStaged(record) abort$/;"	f
s:DoToggleStagedHeading	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleStagedHeading(...) abort$/;"	f
s:DoToggleUnpulled	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpulled(record) abort$/;"	f
s:DoToggleUnpulledHeading	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpulledHeading(heading) abort$/;"	f
s:DoToggleUnpushed	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpushed(record) abort$/;"	f
s:DoToggleUnpushedHeading	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpushedHeading(heading) abort$/;"	f
s:DoToggleUnstaged	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnstaged(record) abort$/;"	f
s:DoToggleUnstagedHeading	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnstagedHeading(...) abort$/;"	f
s:DoToggleUntracked	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleUntracked(record) abort$/;"	f
s:DoToggleUntrackedHeading	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleUntrackedHeading(...) abort$/;"	f
s:DoUnstageStaged	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoUnstageStaged(record) abort$/;"	f
s:DoUnstageStagedHeading	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoUnstageStagedHeading(heading) abort$/;"	f
s:DoUnstageUnpulled	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpulled(record) abort$/;"	f
s:DoUnstageUnpulledHeading	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpulledHeading(heading) abort$/;"	f
s:DoUnstageUnpushed	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpushed(record) abort$/;"	f
s:DoUnstageUnstaged	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnstaged(record) abort$/;"	f
s:DoesBlockHaveDelim	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:DoesBlockHaveDelim(delim, top, bottom) abort$/;"	f
s:DoesBlockHaveMultipartDelim	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:DoesBlockHaveMultipartDelim(top, bottom) abort$/;"	f
s:DotRelative	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:DotRelative(path, ...) abort$/;"	f
s:EMPTY_TAGS	.vim/pack/ide/start/syntastic/syntax_checkers/html/tidy.vim	/^let s:EMPTY_TAGS = [$/;"	v
s:Echo	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/log.vim	/^func! s:Echo(format, argv, hlgroup, save) abort$/;"	f
s:EditClasspath	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^function! s:EditClasspath() " {{{2$/;"	f
s:EditConfig	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^function! s:EditConfig() " {{{2$/;"	f
s:Ellipsis	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^func! s:Ellipsis() abort$/;"	f
s:Esc	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:Esc(str) abort$/;"	f
s:Escape	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/backend.vim	/^func! s:Escape(for_shell, str)$/;"	f
s:EscapeCtagsCmd	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:EscapeCtagsCmd(ctags_bin, args, ...) abort$/;"	f
s:Event	.vim/pack/ide/start/nerdtree/lib/nerdtree/event.vim	/^let s:Event = {}$/;"	v
s:Event.New	.vim/pack/ide/start/nerdtree/lib/nerdtree/event.vim	/^function! s:Event.New(nerdtree, subject, action, params) abort$/;"	f
s:ExcludeOther	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buflist.vim	/^function! s:ExcludeOther(nr, exclude_preview)$/;"	f
s:ExcludePaths	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buflist.vim	/^function! s:ExcludePaths(nr, exclude_paths)$/;"	f
s:ExecPath	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:ExecPath() abort$/;"	f
s:ExecSearch	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! s:ExecSearch(args) abort$/;"	f
s:ExecuteCtags	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:ExecuteCtags(ctags_cmd) abort$/;"	f
s:ExecuteCtagsOnFile	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:ExecuteCtagsOnFile(fname, realfname, typeinfo) abort$/;"	f
s:ExitIfSingleCandidate	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:ExitIfSingleCandidate()$/;"	f
s:Expand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:Expand(rev, ...) abort$/;"	f
s:ExpandVar	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:ExpandVar(other, var, flags, esc, ...) abort$/;"	f
s:ExpandVarLegacy	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:ExpandVarLegacy(str) abort$/;"	f
s:ExpireStatus	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:ExpireStatus(bufnr) abort$/;"	f
s:ExtendKeyMap	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^function! s:ExtendKeyMap(world, key_mode, key_handlers) "{{{3$/;"	f
s:ExtractCommentsPart	.vim/pack/ide/start/tcomment/autoload/tcomment/vimoptions.vim	/^function! s:ExtractCommentsPart() abort$/;"	f
s:FetchSubcommand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:FetchSubcommand(...) abort$/;"	f
s:FileIgnoreCase	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:FileIgnoreCase(for_completion) abort$/;"	f
s:Filename	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^func! s:Filename(paragraph) abort$/;"	f
s:FilterEscape	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:FilterEscape(items, ...) abort$/;"	f
s:FindBoundingLinesOfSexyCom	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:FindBoundingLinesOfSexyCom(lineNum) abort$/;"	f
s:FindDelimiterIndex	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:FindDelimiterIndex(delimiter, line) abort$/;"	f
s:FindMarker	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/fs.vim	/^func! s:FindMarker(dir, markers) abort$/;"	f
s:FindNextFile	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^func! s:FindNextFile(forward) abort$/;"	f
s:FindParentVCSRoot	.vim/pack/ide/start/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:FindParentVCSRoot(path)$/;"	f
s:FlagSet	.vim/pack/ide/start/nerdtree/lib/nerdtree/flag_set.vim	/^let s:FlagSet = {}$/;"	v
s:FlagSet.New	.vim/pack/ide/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.New()$/;"	f
s:FlagSet._flagsForScope	.vim/pack/ide/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet._flagsForScope(scope)$/;"	f
s:FlagSet.addFlag	.vim/pack/ide/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.addFlag(scope, flag)$/;"	f
s:FlagSet.clearFlags	.vim/pack/ide/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.clearFlags(scope)$/;"	f
s:FlagSet.removeFlag	.vim/pack/ide/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.removeFlag(scope, flag)$/;"	f
s:FlagSet.renderToString	.vim/pack/ide/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.renderToString()$/;"	f
s:FlatConstants	.vim/colors/tabula.vim	/^  let s:FlatConstants = g:Tabula_FlatConstants$/;"	v
s:FlatConstants	.vim/colors/tabula.vim	/^let s:FlatConstants = 1$/;"	v
s:FocusGainedHandler	.vim/pack/ide/start/airline/plugin/airline.vim	/^function! s:FocusGainedHandler(timer)$/;"	f
s:ForceUpdate	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:ForceUpdate()$/;"	f
s:Format	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:Format(val) abort$/;"	f
s:FormatFile	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:FormatFile(dict) abort$/;"	f
s:FormatHelp	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:FormatHelp(help) abort "{{{3$/;"	f
s:FormatHelpItem	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:FormatHelpItem(item, fmt) abort "{{{3$/;"	f
s:FormatLog	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:FormatLog(dict) abort$/;"	f
s:FormatRebase	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:FormatRebase(dict) abort$/;"	f
s:ForwardToZshChecker	.vim/pack/ide/start/syntastic/syntax_checkers/sh/sh.vim	/^function! s:ForwardToZshChecker() " {{{2$/;"	f
s:GF	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:GF(mode) abort$/;"	f
s:Generate	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:Generate(object, ...) abort$/;"	f
s:GetCacheTime	.vim/pack/ide/start/tlib/autoload/tlib/cache.vim	/^function! s:GetCacheTime(cfile) abort "{{{3$/;"	f
s:GetCmd	.vim/pack/ide/start/tlib/autoload/tlib/vcs.vim	/^function! s:GetCmd(vcstype, cmd)$/;"	f
s:GetCommentGeometry	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^function! s:GetCommentGeometry(cdef, beg, end, checkRx, comment_mode, cbeg, cend) abort$/;"	f
s:GetDialect	.vim/pack/ide/start/syntastic/syntax_checkers/asm/gcc.vim	/^function! s:GetDialect(buf) " {{{2$/;"	f
s:GetFileWinnr	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:GetFileWinnr(fileinfo) abort$/;"	f
s:GetHiCmd	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  def s:GetHiCmd(list: list<string>): string$/;"	f
s:GetHiCmd	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  function! s:GetHiCmd(list) abort$/;"	f
s:GetIncludes	.vim/pack/ide/start/syntastic/syntax_checkers/d/dmd.vim	/^function! s:GetIncludes(checker, base) " {{{2$/;"	f
s:GetMakeprg	.vim/pack/ide/start/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^function! s:GetMakeprg(buf) " {{{2$/;"	f
s:GetMavenClasspath	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^function! s:GetMavenClasspath() " {{{2$/;"	f
s:GetMavenProperties	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^function! s:GetMavenProperties() " {{{2$/;"	f
s:GetModdedChar	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^function! s:GetModdedChar(world) "{{{3$/;"	f
s:GetNearbyTag	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:GetNearbyTag(request, forcecurrent, ...) abort$/;"	f
s:GetNthElement	.vim/pack/ide/start/tlib/autoload/tlib/list.vim	/^function! s:GetNthElement(n, lists, default) abort "{{{3$/;"	f
s:GetOcamlBuildMakeprg	.vim/pack/ide/start/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^function! s:GetOcamlBuildMakeprg(buf) " {{{2$/;"	f
s:GetOcamlcMakeprg	.vim/pack/ide/start/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^function! s:GetOcamlcMakeprg(buf) " {{{2$/;"	f
s:GetOtherMakeprg	.vim/pack/ide/start/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^function! s:GetOtherMakeprg(buf) " {{{2$/;"	f
s:GetProfile	.vim/pack/ide/start/syntastic/syntax_checkers/glsl/cgc.vim	/^function! s:GetProfile(buf) " {{{2$/;"	f
s:GetReplacements	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^function! s:GetReplacements(cdef, text) abort "{{{3$/;"	f
s:GetSexyComLeft	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:GetSexyComLeft(space, esc) abort$/;"	f
s:GetSexyComMarker	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:GetSexyComMarker(space, esc) abort$/;"	f
s:GetSexyComRight	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:GetSexyComRight(space, esc) abort$/;"	f
s:GetShell	.vim/pack/ide/start/syntastic/syntax_checkers/sh/sh.vim	/^function! s:GetShell(buf) " {{{2$/;"	f
s:GetShell	.vim/pack/ide/start/syntastic/syntax_checkers/sh/shellcheck.vim	/^function! s:GetShell(buf) " {{{2$/;"	f
s:GetSupportedFiletypes	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:GetSupportedFiletypes() abort$/;"	f
s:GetTagInfo	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:GetTagInfo(linenr, ignorepseudo) abort$/;"	f
s:GetTempOption	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^function! s:GetTempOption(name, default) abort "{{{3$/;"	f
s:GetValue	.vim/pack/ide/start/tlib/autoload/tlib/cache.vim	/^function! s:GetValue(cfile, default) abort "{{{3$/;"	f
s:GetValueType	.vim/pack/ide/start/tlib/autoload/tlib/arg.vim	/^function! s:GetValueType(def) abort "{{{3$/;"	f
s:GitCmd	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:GitCmd() abort$/;"	f
s:GitDir	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:GitDir(...) abort$/;"	f
s:GitShellCmd	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:GitShellCmd() abort$/;"	f
s:GlobComplete	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:GlobComplete(lead, pattern, ...) abort$/;"	f
s:GlobPath	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^	fu! s:GlobPath(dirs, depth)$/;"	f
s:GotoFileWindow	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:GotoFileWindow(fileinfo, ...) abort$/;"	f
s:GotoNextFold	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:GotoNextFold() abort$/;"	f
s:GotoNextToplevelTag	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:GotoNextToplevelTag(direction) abort$/;"	f
s:GotoPrevFold	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:GotoPrevFold() abort$/;"	f
s:GrepCfile	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:GrepCfile(result) abort$/;"	f
s:GrepOptions	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:GrepOptions(args, dir) abort$/;"	f
s:GrepParseLine	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:GrepParseLine(options, quiet, dir, line) abort$/;"	f
s:GrepSubcommand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:GrepSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:HandleBufDelete	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:HandleBufDelete(bufname, bufnr) abort$/;"	f
s:HandleBufWrite	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:HandleBufWrite(fname) abort$/;"	f
s:HandleOnlyWindow	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:HandleOnlyWindow() abort$/;"	f
s:HasCStyleComments	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:HasCStyleComments() abort$/;"	f
s:HasLeadingTabs	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:HasLeadingTabs(...) abort$/;"	f
s:HasMultipartDelims	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:HasMultipartDelims() abort$/;"	f
s:HasOpenFileWindows	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:HasOpenFileWindows() abort$/;"	f
s:HasOpt	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:HasOpt(args, ...) abort$/;"	f
s:Help	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnfd.vim	/^let s:Help = s:prototype.Help$/;"	v
s:Help	.vim/pack/ide/start/tlib/autoload/tlib/Filter_fuzzy.vim	/^let s:Help = s:prototype.Help$/;"	v
s:Help	.vim/pack/ide/start/tlib/autoload/tlib/Filter_glob.vim	/^let s:Help = s:prototype.Help$/;"	v
s:HighlightTag	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:HighlightTag(openfolds, ...) abort$/;"	f
s:IGNORE_ERRORS	.vim/pack/ide/start/syntastic/syntax_checkers/html/tidy.vim	/^let s:IGNORE_ERRORS = [$/;"	v
s:INLINE_TAGS	.vim/pack/ide/start/syntastic/syntax_checkers/html/tidy.vim	/^let s:INLINE_TAGS = [$/;"	v
s:IgnoreError	.vim/pack/ide/start/syntastic/syntax_checkers/html/tidy.vim	/^function! s:IgnoreError(text) " {{{2$/;"	f
s:IgnoreError	.vim/pack/ide/start/syntastic/syntax_checkers/xhtml/tidy.vim	/^function! s:IgnoreError(text) " {{{2$/;"	f
s:Init	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:Init(silent) abort$/;"	f
s:Init	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^function! s:Init(world, cmd) "{{{3$/;"	f
s:InitCustomFuncs	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:InitCustomFuncs()$/;"	f
s:InitCwds	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:InitCwds()$/;"	f
s:InitMainWindow	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! s:InitMainWindow() abort$/;"	f
s:InitPreviewWindow	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/preview.vim	/^func! s:InitPreviewWindow() abort$/;"	f
s:InitTypes	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:InitTypes() abort$/;"	f
s:InitVariable	.vim/pack/ide/start/nerdcommenter/plugin/nerdcommenter.vim	/^function s:InitVariable(var, value)$/;"	f
s:InitViewMode	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! s:InitViewMode() abort$/;"	f
s:InitWindow	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:InitWindow(autoclose) abort$/;"	f
s:InlineReplacement	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^function! s:InlineReplacement(text, rx, tokens, replacements) abort "{{{3$/;"	f
s:InsertSelectedItems	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:InsertSelectedItems(rv, current) abort "{{{3$/;"	f
s:Intersection	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^fun! s:Intersection(a, b)$/;"	f
s:InvertComment	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:InvertComment(firstLine, lastLine) abort$/;"	f
s:InvisibleIgnore	.vim/colors/tabula.vim	/^  let s:InvisibleIgnore = g:Tabula_InvisibleIgnore$/;"	v
s:InvisibleIgnore	.vim/colors/tabula.vim	/^let s:InvisibleIgnore = 1$/;"	v
s:IsAllConsumed	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^func! s:IsAllConsumed() abort$/;"	f
s:IsBuiltin	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:IsBuiltin()$/;"	f
s:IsCommented	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:IsCommented(left, right, line) abort$/;"	f
s:IsCommentedFromStartOfLine	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:IsCommentedFromStartOfLine(left, line) abort$/;"	f
s:IsCommentedNormOrSexy	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:IsCommentedNormOrSexy(lineNum) abort$/;"	f
s:IsCommentedOutermost	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:IsCommentedOutermost(left, right, leftAlt, rightAlt, line) abort$/;"	f
s:IsConflicted	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:IsConflicted() abort$/;"	f
s:IsDelimValid	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:IsDelimValid(delimiter, delIndx, line) abort$/;"	f
s:IsEscaped	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:IsEscaped(str, indx, escChar) abort$/;"	f
s:IsInSexyComment	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:IsInSexyComment(line) abort$/;"	f
s:IsLineVisible	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:IsLineVisible(line) abort$/;"	f
s:IsNumEven	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:IsNumEven(num) abort$/;"	f
s:IsSexyComment	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:IsSexyComment(topline, bottomline) abort$/;"	f
s:IsShellValid	.vim/pack/ide/start/syntastic/syntax_checkers/sh/sh.vim	/^function! s:IsShellValid(buf) " {{{2$/;"	f
s:IsValidFile	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:IsValidFile(fname, ftype) abort$/;"	f
s:JobExecute	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:JobExecute(argv, jopts, stdin, callback, ...) abort$/;"	f
s:JobNvimCallback	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:JobNvimCallback(lines, job, data, type) abort$/;"	f
s:JobNvimExit	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:JobNvimExit(dict, callback, job, data, type) dict abort$/;"	f
s:JobOpts	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:JobOpts(cmd, env) abort$/;"	f
s:JobVimExit	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:JobVimExit(dict, callback, temp, job, status) abort$/;"	f
s:JoinChomp	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:JoinChomp(list) abort$/;"	f
s:JumpToNearbyTag	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:JumpToNearbyTag(direction, request, flags) abort$/;"	f
s:JumpToTag	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:JumpToTag(stay_in_tagbar, ...) abort$/;"	f
s:KeyLoop	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:KeyLoop()$/;"	f
s:KeyMap	.vim/pack/ide/start/nerdtree/lib/nerdtree/key_map.vim	/^let s:KeyMap = {}$/;"	v
s:KeyMap.Add	.vim/pack/ide/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Add(keymap)$/;"	f
s:KeyMap.All	.vim/pack/ide/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.All()$/;"	f
s:KeyMap.BindAll	.vim/pack/ide/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.BindAll()$/;"	f
s:KeyMap.Compare	.vim/pack/ide/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Compare(keyMap1, keyMap2)$/;"	f
s:KeyMap.Create	.vim/pack/ide/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Create(options)$/;"	f
s:KeyMap.FindFor	.vim/pack/ide/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.FindFor(key, scope)$/;"	f
s:KeyMap.Invoke	.vim/pack/ide/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Invoke(key)$/;"	f
s:KeyMap.Remove	.vim/pack/ide/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Remove(key, scope)$/;"	f
s:KeyMap.bind	.vim/pack/ide/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.bind()$/;"	f
s:KeyMap.invoke	.vim/pack/ide/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.invoke(...)$/;"	f
s:Keywordprg	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:Keywordprg() abort$/;"	f
s:LNumUnderline	.vim/colors/tabula.vim	/^  let s:LNumUnderline = g:Tabula_LNumUnderline$/;"	v
s:LNumUnderline	.vim/colors/tabula.vim	/^let s:LNumUnderline = 0$/;"	v
s:LastIndexOfDelim	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:LastIndexOfDelim(delim, str) abort$/;"	f
s:Left	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:Left(...) abort$/;"	f
s:LeftMostIndx	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:LeftMostIndx(countCommentedLines, countEmptyLines, topline, bottomline) abort$/;"	f
s:Line	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^func! s:Line(line) abort$/;"	f
s:LineCompact	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^func! s:LineCompact(match) abort$/;"	f
s:LinesError	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:LinesError(...) abort$/;"	f
s:LoadConfigFile	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^function! s:LoadConfigFile() " {{{2$/;"	f
s:LoadUserTypeDefs	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:LoadUserTypeDefs(...) abort$/;"	f
s:LocateCompactView	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^func! s:LocateCompactView(vlnum) abort$/;"	f
s:LocateNormalView	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^func! s:LocateNormalView(vlnum) abort$/;"	f
s:LogFlushQueue	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:LogFlushQueue(state, dir) abort$/;"	f
s:LogParse	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:LogParse(state, dir, prefix, line) abort$/;"	f
s:M	.vim/colors/vividchalk.vim	/^fun! s:M(a)$/;"	f
s:MAIN_BUF_NAME	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^let s:MAIN_BUF_NAME = "__CtrlSF__"$/;"	v
s:MakeParagraph	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/db.vim	/^func! s:MakeParagraph() abort$/;"	f
s:Map	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:Map(mode, lhs, rhs, ...) abort$/;"	f
s:Map	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! s:Map(mode, lhs, rhs, ...) abort$/;"	f
s:MapKeys	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:MapKeys() abort$/;"	f
s:MapMotion	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:MapMotion(lhs, rhs) abort$/;"	f
s:MapNorms	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:MapNorms()$/;"	f
s:MapOpPlug	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^function! s:MapOpPlug(name, extra, op, invoke) "{{{3$/;"	f
s:MapSpecs	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:MapSpecs()$/;"	f
s:MarkToOpen	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:MarkToOpen()$/;"	f
s:Marklar	.vim/colors/marklar.vim	/^        function! s:Marklar(...)$/;"	f
s:MatchIt	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:MatchIt(items, pat, limit, exc)$/;"	f
s:MatchedItems	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:MatchedItems(items, pat, limit)$/;"	f
s:MavenOutputDirectory	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^function! s:MavenOutputDirectory() " {{{2$/;"	f
s:MenuController	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_controller.vim	/^let s:MenuController = {}$/;"	v
s:MenuController.New	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.New(menuItems)$/;"	f
s:MenuController._allIndexesFor	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
s:MenuController._current	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._current()$/;"	f
s:MenuController._cursorDown	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorDown()$/;"	f
s:MenuController._cursorUp	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorUp()$/;"	f
s:MenuController._echoPrompt	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._echoPrompt()$/;"	f
s:MenuController._handleKeypress	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
s:MenuController._nextIndexFor	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
s:MenuController._restoreOptions	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._restoreOptions()$/;"	f
s:MenuController._saveOptions	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._saveOptions()$/;"	f
s:MenuController._setCmdheight	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._setCmdheight()$/;"	f
s:MenuController.isMinimal	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.isMinimal()$/;"	f
s:MenuController.showMenu	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.showMenu()$/;"	f
s:MenuItem	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_item.vim	/^let s:MenuItem = {}$/;"	v
s:MenuItem.All	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.All()$/;"	f
s:MenuItem.AllEnabled	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
s:MenuItem.Create	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.Create(options)$/;"	f
s:MenuItem.CreateSeparator	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
s:MenuItem.CreateSubmenu	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
s:MenuItem.enabled	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.enabled()$/;"	f
s:MenuItem.execute	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.execute()$/;"	f
s:MenuItem.isSeparator	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSeparator()$/;"	f
s:MenuItem.isSubmenu	.vim/pack/ide/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
s:MergeHead	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:MergeHead(dir) abort$/;"	f
s:MergeSubcommand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:MergeSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:MergetoolSubcommand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:MergetoolSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:MinimizeMaxFoldLevel	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:MinimizeMaxFoldLevel(fileinfo, tags) abort$/;"	f
s:ModifierFlags	.vim/pack/ide/start/airline/autoload/airline/extensions/fugitiveline.vim	/^function! s:ModifierFlags()$/;"	f
s:ModifyFileName	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/class/paragraph.vim	/^func! s:ModifyFileName(filename) abort$/;"	f
s:Mods	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:Mods(mods, ...) abort$/;"	f
s:Modules	.vim/pack/ide/start/syntastic/syntax_checkers/yaml/yamlxs.vim	/^function s:Modules(buf)$/;"	f
s:Move	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:Move(force, rename, destination) abort$/;"	f
s:Multipart	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:Multipart() abort$/;"	f
s:NERDFileNameEscape	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^let s:NERDFileNameEscape="[]#*$%'\\" ?`!&();<>\\\\"$/;"	v
s:NERDTree	.vim/pack/ide/start/nerdtree/lib/nerdtree/nerdtree.vim	/^let s:NERDTree = {}$/;"	v
s:NERDTree.AddPathFilter	.vim/pack/ide/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.AddPathFilter(callback)$/;"	f
s:NERDTree.Close	.vim/pack/ide/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.Close()$/;"	f
s:NERDTree.CursorToBookmarkTable	.vim/pack/ide/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToBookmarkTable()$/;"	f
s:NERDTree.CursorToTreeWin	.vim/pack/ide/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToTreeWin(...)$/;"	f
s:NERDTree.ExistsForBuf	.vim/pack/ide/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForBuf()$/;"	f
s:NERDTree.ExistsForTab	.vim/pack/ide/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForTab()$/;"	f
s:NERDTree.ForCurrentBuf	.vim/pack/ide/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentBuf()$/;"	f
s:NERDTree.ForCurrentTab	.vim/pack/ide/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentTab()$/;"	f
s:NERDTree.GetWinNum	.vim/pack/ide/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.GetWinNum()$/;"	f
s:NERDTree.IsOpen	.vim/pack/ide/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.IsOpen()$/;"	f
s:NERDTree.MustBeOpen	.vim/pack/ide/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.MustBeOpen()$/;"	f
s:NERDTree.New	.vim/pack/ide/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.New(path, type)$/;"	f
s:NERDTree.PathFilters	.vim/pack/ide/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.PathFilters()$/;"	f
s:NERDTree.changeRoot	.vim/pack/ide/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.changeRoot(node)$/;"	f
s:NERDTree.getRoot	.vim/pack/ide/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.getRoot()$/;"	f
s:NERDTree.isTabTree	.vim/pack/ide/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isTabTree()$/;"	f
s:NERDTree.isWinTree	.vim/pack/ide/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isWinTree()$/;"	f
s:NERDTree.previousBuf	.vim/pack/ide/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.previousBuf()$/;"	f
s:NERDTree.render	.vim/pack/ide/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.render()$/;"	f
s:NERDTree.setPreviousBuf	.vim/pack/ide/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.setPreviousBuf(bnum)$/;"	f
s:NavigateUp	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:NavigateUp(count) abort$/;"	f
s:NerdEcho	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:NerdEcho(msg, typeOfMsg) abort$/;"	f
s:Nested	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:Nested() abort$/;"	f
s:NewTags	.vim/pack/ide/start/syntastic/syntax_checkers/html/tidy.vim	/^function! s:NewTags(name) " {{{2$/;"	f
s:NextExpandedHunk	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:NextExpandedHunk(count) abort$/;"	f
s:NextFile	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:NextFile(count) abort$/;"	f
s:NextHunk	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:NextHunk(count) abort$/;"	f
s:NextItem	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:NextItem(count) abort$/;"	f
s:NextSection	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:NextSection(count) abort$/;"	f
s:NextSectionEnd	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:NextSectionEnd(count) abort$/;"	f
s:NextToken	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/lex.vim	/^func! s:NextToken(chars, start) abort$/;"	f
s:NormalView	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^func! s:NormalView() abort$/;"	f
s:NormalViewIncr	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^func! s:NormalViewIncr(base_vlnum) abort$/;"	f
s:NotEnoughBuffers	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:NotEnoughBuffers()$/;"	f
s:Notifier	.vim/pack/ide/start/nerdtree/lib/nerdtree/notifier.vim	/^let s:Notifier = {}$/;"	v
s:Notifier.AddListener	.vim/pack/ide/start/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.AddListener(event, funcname)$/;"	f
s:Notifier.GetListenersForEvent	.vim/pack/ide/start/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersForEvent(name)$/;"	f
s:Notifier.GetListenersMap	.vim/pack/ide/start/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersMap()$/;"	f
s:Notifier.NotifyListeners	.vim/pack/ide/start/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.NotifyListeners(event, path, nerdtree, params)$/;"	f
s:NotifySearch	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:NotifySearch()$/;"	f
s:NullError	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:NullError(cmd) abort$/;"	f
s:NumLinesInBuf	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:NumLinesInBuf() abort$/;"	f
s:NumberOfLeadingTabs	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:NumberOfLeadingTabs(s) abort$/;"	f
s:Open	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! s:Open() abort$/;"	f
s:Open	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:Open()$/;"	f
s:OpenAndDraw	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! s:OpenAndDraw() abort$/;"	f
s:OpenFileInTab	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! s:OpenFileInTab(file, lnum, col, mode) abort$/;"	f
s:OpenFileInWindow	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! s:OpenFileInWindow(file, lnum, col, mode, split) abort$/;"	f
s:OpenFold	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:OpenFold() abort$/;"	f
s:OpenMulti	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:OpenMulti(...)$/;"	f
s:OpenNoMarks	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:OpenNoMarks(md, line)$/;"	f
s:OpenParents	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:OpenParents(...) abort$/;"	f
s:OpenParse	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:OpenParse(string, wants_cmd) abort$/;"	f
s:OpenWindow	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:OpenWindow(flags) abort$/;"	f
s:Opener	.vim/pack/ide/start/nerdtree/lib/nerdtree/opener.vim	/^let s:Opener = {}$/;"	v
s:Opener.New	.vim/pack/ide/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.New(path, opts)$/;"	f
s:Opener._bufInWindows	.vim/pack/ide/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._bufInWindows(bnum)$/;"	f
s:Opener._checkToCloseTree	.vim/pack/ide/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._checkToCloseTree(newtab)$/;"	f
s:Opener._firstUsableWindow	.vim/pack/ide/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._firstUsableWindow()$/;"	f
s:Opener._gotoTargetWin	.vim/pack/ide/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._gotoTargetWin()$/;"	f
s:Opener._isWindowUsable	.vim/pack/ide/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._isWindowUsable(winnumber)$/;"	f
s:Opener._newSplit	.vim/pack/ide/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newSplit()$/;"	f
s:Opener._newVSplit	.vim/pack/ide/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newVSplit()$/;"	f
s:Opener._openDirectory	.vim/pack/ide/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openDirectory(node)$/;"	f
s:Opener._openFile	.vim/pack/ide/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openFile()$/;"	f
s:Opener._previousWindow	.vim/pack/ide/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._previousWindow()$/;"	f
s:Opener._restoreCursorPos	.vim/pack/ide/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._restoreCursorPos()$/;"	f
s:Opener._reuseWindow	.vim/pack/ide/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._reuseWindow()$/;"	f
s:Opener._saveCursorPos	.vim/pack/ide/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._saveCursorPos()$/;"	f
s:Opener.open	.vim/pack/ide/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.open(target)$/;"	f
s:OptionComp	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/comp.vim	/^func! s:OptionComp(arglead, cmdline, cursorpos)$/;"	f
s:Orange	.vim/colors/two2tango.vim	/^let s:Orange		= ['#fcaf3e', '#f57900', '#ce5c00']$/;"	v
s:Owner	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:Owner(path, ...) abort$/;"	f
s:PREVIEW_BUF_NAME	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/preview.vim	/^let s:PREVIEW_BUF_NAME = "__CtrlSFPreview__"$/;"	v
s:ParseArgs	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^function! s:ParseArgs(beg, end, comment_mode, arglist) abort "{{{3$/;"	f
s:ParseOneLine	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/db.vim	/^func! s:ParseOneLine(line) abort$/;"	f
s:ParseOptions	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/opt.vim	/^func! s:ParseOptions(options_str) abort$/;"	f
s:ParseTagline	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:ParseTagline(part1, part2, typeinfo, fileinfo) abort$/;"	f
s:PatchSearchExpr	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:PatchSearchExpr(reverse) abort$/;"	f
s:Path	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^let s:Path = {}$/;"	v
s:Path.AbsolutePathFor	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.AbsolutePathFor(pathStr)$/;"	f
s:Path.CopyingSupported	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.CopyingSupported()$/;"	f
s:Path.Create	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Create(fullpath)$/;"	f
s:Path.JoinPathStrings	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
s:Path.New	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.New(pathStr)$/;"	f
s:Path.Resolve	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Resolve(path)$/;"	f
s:Path.WinToUnixPath	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
s:Path._escChars	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._escChars()$/;"	f
s:Path._ignorePatternMatches	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._ignorePatternMatches(pattern)$/;"	f
s:Path._splitChunks	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._splitChunks(path)$/;"	f
s:Path._str	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._str()$/;"	f
s:Path._strForCd	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForCd()$/;"	f
s:Path._strForEdit	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForEdit()$/;"	f
s:Path._strForGlob	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForGlob()$/;"	f
s:Path._strForUI	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForUI()$/;"	f
s:Path.addDelimiter	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.addDelimiter(line)$/;"	f
s:Path.bookmarkNames	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.bookmarkNames()$/;"	f
s:Path.cacheDisplayString	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.cacheDisplayString() abort$/;"	f
s:Path.changeToDir	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.changeToDir()$/;"	f
s:Path.copy	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copy(dest)$/;"	f
s:Path.copyingWillOverwrite	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
s:Path.createParentDirectories	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.createParentDirectories(path)$/;"	f
s:Path.delete	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.delete()$/;"	f
s:Path.displayString	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.displayString()$/;"	f
s:Path.edit	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.edit()$/;"	f
s:Path.equals	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.equals(path)$/;"	f
s:Path.exists	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.exists()$/;"	f
s:Path.extractDriveLetter	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
s:Path.getDir	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getDir()$/;"	f
s:Path.getLastPathComponent	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
s:Path.getParent	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getParent()$/;"	f
s:Path.getSortKey	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortKey()$/;"	f
s:Path.getSortOrderIndex	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
s:Path.ignore	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.ignore(nerdtree)$/;"	f
s:Path.isAncestor	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isAncestor(child)$/;"	f
s:Path.isHiddenUnder	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isHiddenUnder(path)$/;"	f
s:Path.isUnder	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnder(parent)$/;"	f
s:Path.isUnixHiddenFile	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenFile()$/;"	f
s:Path.isUnixHiddenPath	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenPath()$/;"	f
s:Path.readInfoFromDisk	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
s:Path.refresh	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refresh(nerdtree)$/;"	f
s:Path.refreshFlags	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refreshFlags(nerdtree)$/;"	f
s:Path.rename	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.rename(newPath)$/;"	f
s:Path.str	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.str(...)$/;"	f
s:Path.strTrunk	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.strTrunk()$/;"	f
s:Path.tabnr	.vim/pack/ide/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.tabnr()$/;"	f
s:PathComp	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/comp.vim	/^func! s:PathComp(arglead, cmdline, cursorpos)$/;"	f
s:PathInfo	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:PathInfo(url) abort$/;"	f
s:PlaceDelimitersAndInsBetween	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:PlaceDelimitersAndInsBetween() abort$/;"	f
s:Plum	.vim/colors/two2tango.vim	/^let s:Plum			= ['#ad7fa8', '#75507b', '#5c3566']$/;"	v
s:PopupmenuExists	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^function! s:PopupmenuExists()$/;"	f
s:PrepareEnv	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:PrepareEnv(env, dir) abort$/;"	f
s:PrepareJob	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:PrepareJob(opts) abort$/;"	f
s:PreparePathArgs	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:PreparePathArgs(cmd, dir, literal, explicit) abort$/;"	f
s:PreviewFile	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! s:PreviewFile(file, lnum, col, follow) abort$/;"	f
s:PreviousFile	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:PreviousFile(count) abort$/;"	f
s:PreviousHunk	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:PreviousHunk(count) abort$/;"	f
s:PreviousItem	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:PreviousItem(count) abort$/;"	f
s:PreviousSection	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:PreviousSection(count) abort$/;"	f
s:PreviousSectionEnd	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:PreviousSectionEnd(count) abort$/;"	f
s:PrintFormat	.vim/pack/ide/start/tlib/autoload/tlib/string.vim	/^function! s:PrintFormat(format, string) "{{{3$/;"	f
s:PrintHelp	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:PrintHelp() abort$/;"	f
s:PrintKinds	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:PrintKinds(typeinfo, fileinfo) abort$/;"	f
s:PrintTag	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:PrintTag(tag, depth, output, fileinfo, typeinfo) abort$/;"	f
s:Printf	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/log.vim	/^func! s:Printf(format, argv) abort$/;"	f
s:ProcessFile	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:ProcessFile(fname, ftype) abort$/;"	f
s:ProcessLine	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^function! s:ProcessLine(comment_do, match, checkRx, replace) abort$/;"	f
s:ProcessTag	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:ProcessTag(name, filename, pattern, fields, is_split, typeinfo, fileinfo) abort$/;"	f
s:ProjectionistDetect	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! s:ProjectionistDetect() abort$/;"	f
s:PrtAdd	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:PrtAdd(char)$/;"	f
s:PrtBS	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:PrtBS()$/;"	f
s:PrtClear	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:PrtClear()$/;"	f
s:PrtClearCache	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:PrtClearCache()$/;"	f
s:PrtCurEnd	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:PrtCurEnd()$/;"	f
s:PrtCurLeft	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:PrtCurLeft()$/;"	f
s:PrtCurRight	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:PrtCurRight()$/;"	f
s:PrtCurStart	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:PrtCurStart()$/;"	f
s:PrtDelete	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:PrtDelete()$/;"	f
s:PrtDeleteEnt	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:PrtDeleteEnt()$/;"	f
s:PrtDeleteMRU	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:PrtDeleteMRU()$/;"	f
s:PrtDeleteWord	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:PrtDeleteWord()$/;"	f
s:PrtExit	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:PrtExit()$/;"	f
s:PrtExpandDir	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:PrtExpandDir()$/;"	f
s:PrtFocusMap	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:PrtFocusMap(char)$/;"	f
s:PrtHistory	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:PrtHistory(...)$/;"	f
s:PrtInsert	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:PrtInsert(...)$/;"	f
s:PrtSelectJump	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:PrtSelectJump(char)$/;"	f
s:PrtSelectMove	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:PrtSelectMove(dir)$/;"	f
s:PrtSwitcher	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:PrtSwitcher()$/;"	f
s:PurgeTimestamp	.vim/pack/ide/start/tlib/autoload/tlib/cache.vim	/^function! s:PurgeTimestamp(dir) "{{{3$/;"	f
s:PushSubcommand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:PushSubcommand(...) abort$/;"	f
s:PutValue	.vim/pack/ide/start/tlib/autoload/tlib/cache.vim	/^function! s:PutValue(cfile, value) abort "{{{3$/;"	f
s:QueryLog	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:QueryLog(refspec) abort$/;"	f
s:QuickfixCreate	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:QuickfixCreate(nr, opts) abort$/;"	f
s:QuickfixGet	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:QuickfixGet(nr, ...) abort$/;"	f
s:QuickfixOpen	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:QuickfixOpen(nr, mods) abort$/;"	f
s:QuickfixSet	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:QuickfixSet(nr, ...) abort$/;"	f
s:QuickfixStream	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:QuickfixStream(nr, event, title, cmd, first, mods, callback, ...) abort$/;"	f
s:Quit	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! s:Quit() abort$/;"	f
s:QuitPreHook	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! s:QuitPreHook(fname) abort " {{{2$/;"	f
s:ReadPrepare	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:ReadPrepare(line1, count, range, mods) abort$/;"	f
s:RebaseArgument	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:RebaseArgument() abort$/;"	f
s:RebaseSubcommand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:RebaseSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:RecoverStateAfterLineComment	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:RecoverStateAfterLineComment(state) abort$/;"	f
s:RefreshTabline	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:RefreshTabline()$/;"	f
s:Relative	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:Relative(...) abort$/;"	f
s:ReloadStatus	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:ReloadStatus(...) abort$/;"	f
s:ReloadStatusBuffer	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:ReloadStatusBuffer(...) abort$/;"	f
s:ReloadTabStatus	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:ReloadTabStatus(...) abort$/;"	f
s:ReloadWinStatus	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:ReloadWinStatus(...) abort$/;"	f
s:Remote	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:Remote(dir) abort$/;"	f
s:Remove	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:Remove(after, force) abort$/;"	f
s:RemoveCarriageReturn	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^function! s:RemoveCarriageReturn(line) " {{{2$/;"	f
s:RemoveDelimiters	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:RemoveDelimiters(left, right, line) abort$/;"	f
s:Render	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:Render(lines, pat)$/;"	f
s:RenderContent	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:RenderContent(...) abort$/;"	f
s:RenderKeepView	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:RenderKeepView(...) abort$/;"	f
s:ReopenWindow	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:ReopenWindow(delbufname) abort$/;"	f
s:ReplaceCmd	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:ReplaceCmd(cmd) abort$/;"	f
s:ReplaceDelims	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:ReplaceDelims(toReplace1, toReplace2, replacor1, replacor2, str) abort$/;"	f
s:ReplaceInLine	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^function! s:ReplaceInLine(text, match) abort "{{{3$/;"	f
s:ReplaceLeftMostDelim	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:ReplaceLeftMostDelim(toReplace, replacor, str) abort$/;"	f
s:ReplaceRightMostDelim	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:ReplaceRightMostDelim(toReplace, replacor, str) abort$/;"	f
s:Reset	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^func! s:Reset() abort$/;"	f
s:Reset	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:Reset(args)$/;"	f
s:ResizeNeighborWins	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! s:ResizeNeighborWins() abort$/;"	f
s:Resolve	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:Resolve(path) abort$/;"	f
s:RestoreFrameParams	.vim/pack/ide/start/tlib/autoload/tlib/vim.vim	/^function! s:RestoreFrameParams() "{{{3$/;"	f
s:RestoreSession	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:RestoreSession() abort$/;"	f
s:RevertSubcommand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:RevertSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:RewriteFormatString	.vim/pack/ide/start/tlib/autoload/tlib/string.vim	/^function! s:RewriteFormatString(format, pattern, string) "{{{3$/;"	f
s:Right	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:Right(...) abort$/;"	f
s:RightMostIndx	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:RightMostIndx(countCommentedLines, countEmptyLines, topline, bottomline) abort$/;"	f
s:RunBufDelete	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:RunBufDelete(bufnr) abort$/;"	f
s:RunClose	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:RunClose(state, tmp, job, ...) abort$/;"	f
s:RunCloseIn	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:RunCloseIn(job) abort$/;"	f
s:RunEcho	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:RunEcho(tmp) abort$/;"	f
s:RunEdit	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:RunEdit(state, tmp, job) abort$/;"	f
s:RunExit	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:RunExit(state, tmp, job, exit_status) abort$/;"	f
s:RunFinished	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:RunFinished(state, ...) abort$/;"	f
s:RunReceive	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:RunReceive(state, tmp, type, job, data, ...) abort$/;"	f
s:RunSave	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:RunSave(state) abort$/;"	f
s:RunSend	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:RunSend(job, str) abort$/;"	f
s:RunStateHandlers	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^function! s:RunStateHandlers(world) "{{{3$/;"	f
s:RunTick	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:RunTick(job) abort$/;"	f
s:RunWait	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:RunWait(state, tmp, job, ...) abort$/;"	f
s:SID	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:SID() abort$/;"	f
s:SaveClasspath	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^function! s:SaveClasspath() " {{{2$/;"	f
s:SaveConfig	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^function! s:SaveConfig() " {{{2$/;"	f
s:SaveFile	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/edit.vim	/^func! s:SaveFile(orig, modi) abort$/;"	f
s:SaveFrameParams	.vim/pack/ide/start/tlib/autoload/tlib/vim.vim	/^function! s:SaveFrameParams() "{{{3$/;"	f
s:ScarletRed	.vim/colors/two2tango.vim	/^let s:ScarletRed	= ['#ef2929', '#cc0000', '#a40000']$/;"	v
s:SearchCwordCmd	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^func! s:SearchCwordCmd(type, word_boundary, to_exec)$/;"	f
s:SearchDone	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^func! s:SearchDone() abort$/;"	f
s:SearchPwordCmd	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^func! s:SearchPwordCmd(type, to_exec)$/;"	f
s:SearchStandOut	.vim/colors/tabula.vim	/^  let s:SearchStandOut = g:Tabula_SearchStandOut$/;"	v
s:SearchStandOut	.vim/colors/tabula.vim	/^let s:SearchStandOut=0$/;"	v
s:SearchVwordCmd	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^func! s:SearchVwordCmd(type, to_exec)$/;"	f
s:Selection	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:Selection(arg1, ...) abort$/;"	f
s:SetCompilerType	.vim/pack/ide/start/syntastic/syntax_checkers/fortran/gfortran.vim	/^function! s:SetCompilerType(exe) " {{{2$/;"	f
s:SetDefTxt	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:SetDefTxt()$/;"	f
s:SetDefault	.vim/pack/ide/start/airline/autoload/airline/extensions/vimtex.vim	/^function! s:SetDefault(var, val)$/;"	f
s:SetFlag	.vim/pack/ide/start/tlib/autoload/tlib/arg.vim	/^function! s:SetFlag(def, opts, idx, flag, rest, flagdefs) abort "{{{3$/;"	f
s:SetFoldLevel	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:SetFoldLevel(level, force) abort$/;"	f
s:SetFoldLevelRecursive	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:SetFoldLevelRecursive(fileinfo, tags, level) abort$/;"	f
s:SetOffset	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^function! s:SetOffset(world) "{{{3$/;"	f
s:SetOpt	.vim/pack/ide/start/tlib/autoload/tlib/arg.vim	/^function! s:SetOpt(def, opts, idx, opt) abort "{{{3$/;"	f
s:SetOption	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^function! s:SetOption(name,default)$/;"	f
s:SetScrollBind	.vim/pack/ide/start/tlib/autoload/tlib/file.vim	/^function! s:SetScrollBind(world) abort "{{{3$/;"	f
s:SetStatusLine	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:SetStatusLine() abort$/;"	f
s:SetTimestamp	.vim/pack/ide/start/tlib/autoload/tlib/cache.vim	/^function! s:SetTimestamp(cfile, type) "{{{3$/;"	f
s:SetWD	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:SetWD(args)$/;"	f
s:SetupStateBeforeLineComment	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:SetupStateBeforeLineComment(topLine, bottomLine) abort$/;"	f
s:SexyNested	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:SexyNested() abort$/;"	f
s:ShouldPurge	.vim/pack/ide/start/tlib/autoload/tlib/cache.vim	/^function! s:ShouldPurge(partial_filename) "{{{3$/;"	f
s:ShowInPreviewWin	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:ShowInPreviewWin() abort$/;"	f
s:ShowPrototype	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:ShowPrototype(short) abort$/;"	f
s:ShrinkIfExpanded	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:ShrinkIfExpanded() abort$/;"	f
s:SignId	.vim/pack/ide/start/tlib/autoload/tlib/signs.vim	/^function! s:SignId(item) "{{{3$/;"	f
s:SkyBlue	.vim/colors/two2tango.vim	/^let s:SkyBlue		= ['#729fcf', '#3465a4', '#204a87']$/;"	v
s:Slash	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^  function! s:Slash(path) abort$/;"	f
s:Slash	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^  function! s:Slash(path) abort$/;"	f
s:SolarizedHiTrail	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^function! s:SolarizedHiTrail()$/;"	f
s:SolarizedOptions	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^function! s:SolarizedOptions()$/;"	f
s:SortCompletions	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! s:SortCompletions(a, b) abort "{{{3$/;"	f
s:SpecInputs	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:SpecInputs(str)$/;"	f
s:SplitClasspath	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^function! s:SplitClasspath(classpath) " {{{2$/;"	f
s:SplitExpandChain	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:SplitExpandChain(string, ...) abort$/;"	f
s:SplitPattern	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:SplitPattern(str)$/;"	f
s:SquashArgument	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:SquashArgument(...) abort$/;"	f
s:SshParseConfig	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:SshParseConfig(into, root, file, ...) abort$/;"	f
s:SshParseHost	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:SshParseHost(value) abort$/;"	f
s:SshParseInclude	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:SshParseInclude(into, root, host, value) abort$/;"	f
s:StageApply	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:StageApply(info, reverse, extra) abort$/;"	f
s:StageArgs	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:StageArgs(visual) abort$/;"	f
s:StageDelete	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:StageDelete(lnum1, lnum2, count) abort$/;"	f
s:StageDiff	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:StageDiff(diff) abort$/;"	f
s:StageDiffEdit	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:StageDiffEdit() abort$/;"	f
s:StageIgnore	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:StageIgnore(lnum1, lnum2, count) abort$/;"	f
s:StageInfo	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:StageInfo(...) abort$/;"	f
s:StageInline	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:StageInline(mode, ...) abort$/;"	f
s:StageJump	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:StageJump(offset, section, ...) abort$/;"	f
s:StagePatch	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:StagePatch(lnum1,lnum2) abort$/;"	f
s:StageReveal	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:StageReveal() abort$/;"	f
s:StageSeek	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:StageSeek(info, fallback) abort$/;"	f
s:State	.vim/pack/ide/start/tagbar/autoload/tagbar/state.vim	/^let s:State = {$/;"	v
s:State.New	.vim/pack/ide/start/tagbar/autoload/tagbar/state.vim	/^function! s:State.New() abort dict$/;"	f
s:State.getCurrent	.vim/pack/ide/start/tagbar/autoload/tagbar/state.vim	/^function! s:State.getCurrent(force_current) abort dict$/;"	f
s:State.setCurrentFile	.vim/pack/ide/start/tagbar/autoload/tagbar/state.vim	/^function! s:State.setCurrentFile(fileinfo) abort dict$/;"	f
s:State.setPaused	.vim/pack/ide/start/tagbar/autoload/tagbar/state.vim	/^function! s:State.setPaused() abort dict$/;"	f
s:StatusCfile	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:StatusCfile(...) abort$/;"	f
s:StatusCommand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:StatusCommand(line1, line2, range, count, bang, mods, reg, arg, args, ...) abort$/;"	f
s:StdoutToFile	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:StdoutToFile(out, cmd, ...) abort$/;"	f
s:StopJob	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^func! s:StopJob() abort$/;"	f
s:StopTimer	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^func! s:StopTimer() abort$/;"	f
s:Summary	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^func! s:Summary(procbar) abort$/;"	f
s:SwapOuterMultiPartDelimsForPlaceHolders	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:SwapOuterMultiPartDelimsForPlaceHolders(line) abort$/;"	f
s:SwapOuterPlaceHoldersForMultiPartDelims	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:SwapOuterPlaceHoldersForMultiPartDelims(line) abort$/;"	f
s:SystemError	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:SystemError(cmd, ...) abort$/;"	f
s:SystemList	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:SystemList(cmd) abort$/;"	f
s:TabBuffers	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:TabBuffers()$/;"	f
s:TabSpace	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:TabSpace() abort$/;"	f
s:TabbedCol	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:TabbedCol(line, col) abort$/;"	f
s:TagbarBufName	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:TagbarBufName() abort$/;"	f
s:TempDelete	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:TempDelete(file) abort$/;"	f
s:TempDotMap	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:TempDotMap() abort$/;"	f
s:TempReadPost	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:TempReadPost(file) abort$/;"	f
s:TempReadPre	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:TempReadPre(file) abort$/;"	f
s:TempScript	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:TempScript(...) abort$/;"	f
s:TempState	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:TempState(...) abort$/;"	f
s:TidyEncOptByFenc	.vim/pack/ide/start/syntastic/syntax_checkers/html/tidy.vim	/^function! s:TidyEncOptByFenc() " {{{2$/;"	f
s:TidyEncOptByFenc	.vim/pack/ide/start/syntastic/syntax_checkers/xhtml/tidy.vim	/^function! s:TidyEncOptByFenc()$/;"	f
s:TodoUnderline	.vim/colors/tabula.vim	/^  let s:TodoUnderline = g:Tabula_TodoUnderline$/;"	v
s:TodoUnderline	.vim/colors/tabula.vim	/^let s:TodoUnderline=1$/;"	v
s:TogBG	.vim/pack/ide/start/colors-solarized/autoload/togglebg.vim	/^function! s:TogBG()$/;"	f
s:ToggleAutoclose	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:ToggleAutoclose() abort$/;"	f
s:ToggleByFname	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:ToggleByFname()$/;"	f
s:ToggleCaseInsensitive	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:ToggleCaseInsensitive() abort$/;"	f
s:ToggleFocus	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:ToggleFocus()$/;"	f
s:ToggleFold	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:ToggleFold() abort$/;"	f
s:ToggleHelp	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:ToggleHelp() abort$/;"	f
s:ToggleHideNonPublicTags	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:ToggleHideNonPublicTags() abort$/;"	f
s:ToggleKeyLoop	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:ToggleKeyLoop()$/;"	f
s:ToggleMRURelative	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:ToggleMRURelative()$/;"	f
s:TogglePause	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:TogglePause() abort$/;"	f
s:ToggleRegex	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:ToggleRegex()$/;"	f
s:ToggleSort	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:ToggleSort() abort$/;"	f
s:ToggleTabTreeVCS	.vim/pack/ide/start/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:ToggleTabTreeVCS(name)$/;"	f
s:ToggleType	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:ToggleType(dir)$/;"	f
s:ToggleWindow	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:ToggleWindow(flags) abort$/;"	f
s:ToolItems	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:ToolItems(state, from, to, offsets, text, ...) abort$/;"	f
s:ToolParse	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:ToolParse(state, line) abort$/;"	f
s:ToolStream	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:ToolStream(line1, line2, range, bang, mods, options, args, state) abort$/;"	f
s:ToolToFrom	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:ToolToFrom(str) abort$/;"	f
s:TransformUserTypeDef	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:TransformUserTypeDef(def) abort$/;"	f
s:TranslateRegex	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/pat.vim	/^func! s:TranslateRegex(pattern) abort$/;"	f
s:Tree	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:Tree(...) abort$/;"	f
s:Tree	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^function! s:Tree(path) abort$/;"	f
s:TreeChomp	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:TreeChomp(...) abort$/;"	f
s:TreeDirNode	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let s:TreeDirNode = copy(g:NERDTreeFileNode)$/;"	v
s:TreeDirNode.AbsoluteTreeRoot	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
s:TreeDirNode.GetSelected	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
s:TreeDirNode.New	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.New(path, nerdtree)$/;"	f
s:TreeDirNode._glob	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._glob(pattern, all)$/;"	f
s:TreeDirNode._initChildren	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
s:TreeDirNode._openInNewTab	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._openInNewTab()$/;"	f
s:TreeDirNode.activate	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.activate(...)$/;"	f
s:TreeDirNode.addChild	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
s:TreeDirNode.close	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.close()$/;"	f
s:TreeDirNode.closeChildren	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
s:TreeDirNode.createChild	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
s:TreeDirNode.displayString	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.displayString()$/;"	f
s:TreeDirNode.findNode	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
s:TreeDirNode.getCascade	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascade()$/;"	f
s:TreeDirNode.getCascadeRoot	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascadeRoot()$/;"	f
s:TreeDirNode.getChild	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
s:TreeDirNode.getChildByIndex	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
s:TreeDirNode.getChildCount	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
s:TreeDirNode.getChildIndex	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
s:TreeDirNode.getDirChildren	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getDirChildren()$/;"	f
s:TreeDirNode.getVisibleChildCount	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
s:TreeDirNode.getVisibleChildren	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
s:TreeDirNode.hasVisibleChildren	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
s:TreeDirNode.isCascadable	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.isCascadable()$/;"	f
s:TreeDirNode.open	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.open(...)$/;"	f
s:TreeDirNode.openAlong	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openAlong(...)$/;"	f
s:TreeDirNode.openExplorer	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
s:TreeDirNode.openInNewTab	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
s:TreeDirNode.openRecursively	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
s:TreeDirNode.refresh	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refresh()$/;"	f
s:TreeDirNode.refreshDirFlags	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshDirFlags()$/;"	f
s:TreeDirNode.refreshFlags	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshFlags()$/;"	f
s:TreeDirNode.removeChild	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
s:TreeDirNode.reveal	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.reveal(path, ...)$/;"	f
s:TreeDirNode.sortChildren	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
s:TreeDirNode.toggleOpen	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.toggleOpen(...)$/;"	f
s:TreeDirNode.transplantChild	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
s:TreeFileNode	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^let s:TreeFileNode = {}$/;"	v
s:TreeFileNode.GetRootForTab	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
s:TreeFileNode.GetSelected	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
s:TreeFileNode.New	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.New(path, nerdtree)$/;"	f
s:TreeFileNode._renderToString	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode._renderToString(depth, drawText)$/;"	f
s:TreeFileNode.activate	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.activate(...)$/;"	f
s:TreeFileNode.bookmark	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
s:TreeFileNode.cacheParent	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
s:TreeFileNode.clearBookmarks	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.clearBookmarks()$/;"	f
s:TreeFileNode.copy	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
s:TreeFileNode.delete	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.delete()$/;"	f
s:TreeFileNode.displayString	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.displayString()$/;"	f
s:TreeFileNode.equals	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
s:TreeFileNode.findNode	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
s:TreeFileNode.findSibling	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
s:TreeFileNode.getNerdtree	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.getNerdtree()$/;"	f
s:TreeFileNode.isRoot	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
s:TreeFileNode.isVisible	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
s:TreeFileNode.open	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.open(...)$/;"	f
s:TreeFileNode.openExplorer	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openExplorer()$/;"	f
s:TreeFileNode.openInNewTab	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
s:TreeFileNode.openSplit	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
s:TreeFileNode.openVSplit	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
s:TreeFileNode.putCursorHere	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
s:TreeFileNode.refresh	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refresh()$/;"	f
s:TreeFileNode.refreshFlags	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refreshFlags()$/;"	f
s:TreeFileNode.rename	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
s:TreeFileNode.renderToString	.vim/pack/ide/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
s:TreeInfo	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:TreeInfo(dir, commit) abort$/;"	f
s:TrimPhantomLine	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/edit.vim	/^func! s:TrimPhantomLine(buffer, orig) abort$/;"	f
s:TrimTrailingWhitespace	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:TrimTrailingWhitespace(line) abort$/;"	f
s:UI	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^let s:UI = {}$/;"	v
s:UI.IndentWid	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.IndentWid()$/;"	f
s:UI.MarkupReg	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.MarkupReg()$/;"	f
s:UI.New	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.New(nerdtree)$/;"	f
s:UI.UpDirLine	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.UpDirLine()$/;"	f
s:UI._dumpHelp	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._dumpHelp()$/;"	f
s:UI._indentLevelFor	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._indentLevelFor(line)$/;"	f
s:UI._renderBookmarks	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._renderBookmarks()$/;"	f
s:UI._stripMarkup	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._stripMarkup(line)$/;"	f
s:UI.centerView	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.centerView()$/;"	f
s:UI.getLineNum	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getLineNum(node)$/;"	f
s:UI.getPath	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getPath(ln)$/;"	f
s:UI.getRootLineNum	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getRootLineNum()$/;"	f
s:UI.getShowBookmarks	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowBookmarks()$/;"	f
s:UI.getShowFiles	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowFiles()$/;"	f
s:UI.getShowHelp	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHelp()$/;"	f
s:UI.getShowHidden	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHidden()$/;"	f
s:UI.isIgnoreFilterEnabled	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isIgnoreFilterEnabled()$/;"	f
s:UI.isMinimal	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isMinimal()$/;"	f
s:UI.render	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.render()$/;"	f
s:UI.renderViewSavingPosition	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.renderViewSavingPosition()$/;"	f
s:UI.restoreScreenState	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.restoreScreenState()$/;"	f
s:UI.saveScreenState	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.saveScreenState()$/;"	f
s:UI.setShowHidden	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.setShowHidden(val)$/;"	f
s:UI.toggleHelp	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleHelp()$/;"	f
s:UI.toggleIgnoreFilter	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleIgnoreFilter()$/;"	f
s:UI.toggleShowBookmarks	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowBookmarks()$/;"	f
s:UI.toggleShowFiles	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowFiles()$/;"	f
s:UI.toggleShowHidden	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowHidden()$/;"	f
s:UI.toggleZoom	.vim/pack/ide/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleZoom()$/;"	f
s:UnEsc	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:UnEsc(str, escChar) abort$/;"	f
s:UncommentLineNormal	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:UncommentLineNormal(line) abort$/;"	f
s:UncommentLines	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:UncommentLines(topLine, bottomLine) abort$/;"	f
s:UncommentLinesNormal	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:UncommentLinesNormal(topline, bottomline) abort$/;"	f
s:UncommentLinesSexy	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:UncommentLinesSexy(topline, bottomline) abort$/;"	f
s:UndoAllChanges	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^func! s:UndoAllChanges() abort$/;"	f
s:UndoHighlightLine	.vim/pack/ide/start/tlib/autoload/tlib/buffer.vim	/^function! s:UndoHighlightLine() abort "{{{3$/;"	f
s:Uniq	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:Uniq(list) abort$/;"	f
s:UnreplaceInLine	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^function! s:UnreplaceInLine(text, match) abort "{{{3$/;"	f
s:UntabbedCol	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:UntabbedCol(line, col) abort$/;"	f
s:Update	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:Update(str)$/;"	f
s:UpdateErrors	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! s:UpdateErrors(buf, auto_invoked, checker_names) abort " {{{2$/;"	f
s:UpdateIndex	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:UpdateIndex(dir, info) abort$/;"	f
s:UsableWin	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:UsableWin(nr) abort$/;"	f
s:UserCmd	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:UserCmd(lscmd)$/;"	f
s:UserCommandCwd	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:UserCommandCwd(dir) abort$/;"	f
s:UserCommandList	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:UserCommandList(...) abort$/;"	f
s:Validate	.vim/pack/ide/start/tlib/autoload/tlib/arg.vim	/^function! s:Validate(def, name, value) abort "{{{3$/;"	f
s:ValidateDub	.vim/pack/ide/start/syntastic/syntax_checkers/d/dmd.vim	/^function! s:ValidateDub(checker) " {{{2$/;"	f
s:VerifyConsistent	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/edit.vim	/^func! s:VerifyConsistent(on_disk, on_mem) abort$/;"	f
s:VersionCheck	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:VersionCheck() abort$/;"	f
s:VimEnterHook	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! s:VimEnterHook() abort " {{{2$/;"	f
s:VisualSelection	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^func! s:VisualSelection() abort$/;"	f
s:WinShellEsc	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:WinShellEsc(arg) abort$/;"	f
s:WriteParagraph	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/edit.vim	/^func! s:WriteParagraph(buffer, orig, modi) abort$/;"	f
s:X	.vim/colors/jellybeans.vim	/^fun! s:X(group, fg, bg, attr, lcfg, lcbg)$/;"	f
s:X	.vim/colors/vividchalk.vim	/^fun! s:X(a)$/;"	f
s:YankLine	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:YankLine(...)$/;"	f
s:ZoomWindow	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:ZoomWindow() abort$/;"	f
s:_DEFAULT_CHECKERS	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^let s:_DEFAULT_CHECKERS = {$/;"	v
s:_DEFAULT_FILETYPE_MAP	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^let s:_DEFAULT_FILETYPE_MAP = {$/;"	v
s:_ECLIM_TYPES	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^let s:_ECLIM_TYPES = [$/;"	v
s:_FILE_SHORTCUTS	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^let s:_FILE_SHORTCUTS = {$/;"	v
s:_NOTIFIER_TYPES	.vim/pack/ide/start/syntastic/plugin/syntastic/notifiers.vim	/^let s:_NOTIFIER_TYPES = ['signs', 'balloons', 'highlighting', 'cursor', 'autoloclist']$/;"	v
s:_PERSISTENT_NOTIFIERS	.vim/pack/ide/start/syntastic/plugin/syntastic/notifiers.vim	/^let s:_PERSISTENT_NOTIFIERS = ['signs', 'balloons']$/;"	v
s:_YCM_TYPES	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^let s:_YCM_TYPES = [$/;"	v
s:_add_to_errors	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! s:_add_to_errors(errors, options) abort " {{{2$/;"	f
s:_checkPackage	.vim/pack/ide/start/syntastic/autoload/syntastic/c.vim	/^function! s:_checkPackage(name, ...) abort " {{{2$/;"	f
s:_checkPhp	.vim/pack/ide/start/syntastic/autoload/syntastic/c.vim	/^function! s:_checkPhp() abort " {{{2$/;"	f
s:_checkPython	.vim/pack/ide/start/syntastic/autoload/syntastic/c.vim	/^function! s:_checkPython() abort " {{{2$/;"	f
s:_checkRuby	.vim/pack/ide/start/syntastic/autoload/syntastic/c.vim	/^function! s:_checkRuby() abort " {{{2$/;"	f
s:_check_stack	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^let s:_check_stack = []$/;"	v
s:_compare_checker_names	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^function! s:_compare_checker_names(a, b) abort " {{{2$/;"	f
s:_compare_error_items_by_columns	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! s:_compare_error_items_by_columns(a, b) abort " {{{2$/;"	f
s:_compare_error_items_by_lines	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! s:_compare_error_items_by_lines(a, b) abort " {{{2$/;"	f
s:_decode_JSON	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! s:_decode_JSON(json) abort " {{{2$/;"	f
s:_delete	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^let s:_delete = function(v:version > 704 || (v:version == 704 && has('patch1128')) ? 'delete' : /;"	v
s:_delete_dumb	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! s:_delete_dumb(what, flags) abort " {{{2$/;"	f
s:_disabled_by_eclim	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^function! s:_disabled_by_eclim(filetype) abort " {{{2$/;"	f
s:_disabled_by_ycm	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^function! s:_disabled_by_ycm(filetype) abort " {{{2$/;"	f
s:_explain_skip	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! s:_explain_skip(filetypes) abort " {{{2$/;"	f
s:_find_index	.vim/pack/ide/start/syntastic/plugin/syntastic/cursor.vim	/^function! s:_find_index(column, messages) abort " {{{2$/;"	f
s:_float2str	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^let s:_float2str = function(has('float') ? 's:_float2str_smart' : 's:_float2str_dumb')$/;"	v
s:_float2str_dumb	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! s:_float2str_dumb(val) abort " {{{2$/;"	f
s:_float2str_smart	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! s:_float2str_smart(val) abort " {{{2$/;"	f
s:_format_variable	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^function! s:_format_variable(name) abort " {{{2$/;"	f
s:_fuzz	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^let s:_fuzz = function(exists('*getpid') ? 'getpid' : 's:_fuzz_dumb')$/;"	v
s:_fuzz_dumb	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! s:_fuzz_dumb() abort " {{{2$/;"	f
s:_getPrefix	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:_getPrefix() abort dict$/;"	f
s:_get_cflags	.vim/pack/ide/start/syntastic/autoload/syntastic/c.vim	/^function! s:_get_cflags(ft, ck, opts) abort " {{{2$/;"	f
s:_get_checker_var	.vim/pack/ide/start/syntastic/autoload/syntastic/c.vim	/^function! s:_get_checker_var(scope, filetype, subchecker, name, default) abort " {{{2$/;"	f
s:_get_include_dirs	.vim/pack/ide/start/syntastic/autoload/syntastic/c.vim	/^function! s:_get_include_dirs(filetype) abort " {{{2$/;"	f
s:_getbufvar	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^let s:_getbufvar = function(v:version > 703 || (v:version == 703 && has('patch831')) ? 'getbufva/;"	v
s:_getbufvar_dumb	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! s:_getbufvar_dumb(buf, name, ...) abort " {{{2$/;"	f
s:_handleOldOptions	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^function! s:_handleOldOptions() abort$/;"	f
s:_ignore_file	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! s:_ignore_file(filename) abort " {{{2$/;"	f
s:_init	.vim/pack/ide/start/syntastic/autoload/syntastic/c.vim	/^function! s:_init() abort " {{{2$/;"	f
s:_isAvailableDefault	.vim/pack/ide/start/syntastic/plugin/syntastic/checker.vim	/^function! s:_isAvailableDefault() dict " {{{2$/;"	f
s:_isDebugEnabled	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^let s:_isDebugEnabled = function(exists('*and') ? 's:_isDebugEnabled_smart' : 's:_isDebugEnabled/;"	v
s:_isDebugEnabled_dumb	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^function! s:_isDebugEnabled_dumb(level) abort " {{{2$/;"	f
s:_isDebugEnabled_smart	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^function! s:_isDebugEnabled_smart(level) abort " {{{2$/;"	f
s:_is_modified	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^function! s:_is_modified(name) abort " {{{2$/;"	f
s:_is_quitting	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! s:_is_quitting(buf) abort " {{{2$/;"	f
s:_is_same_index	.vim/pack/ide/start/syntastic/plugin/syntastic/cursor.vim	/^function! s:_is_same_index(line, old_line, column, idx, messages) abort " {{{2$/;"	f
s:_logRedirect	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^function! s:_logRedirect(on) abort " {{{2$/;"	f
s:_log_timestamp	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^let s:_log_timestamp = function(has('float') && exists('*reltimefloat') ? 's:_log_timestamp_smar/;"	v
s:_log_timestamp_dumb	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^function! s:_log_timestamp_dumb() abort " {{{2$/;"	f
s:_log_timestamp_smart	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^function! s:_log_timestamp_smart() abort " {{{2$/;"	f
s:_normalise_filetype	.vim/pack/ide/start/syntastic/plugin/syntastic/registry.vim	/^function! s:_normalise_filetype(ftalias) abort " {{{2$/;"	f
s:_os_name	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! s:_os_name() abort " {{{2$/;"	f
s:_quit_pre	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^let s:_quit_pre = []$/;"	v
s:_registerHandler	.vim/pack/ide/start/syntastic/autoload/syntastic/c.vim	/^function! s:_registerHandler(regex, function, args) abort " {{{2$/;"	f
s:_remove_shadowed_items	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! s:_remove_shadowed_items(errors) abort " {{{2$/;"	f
s:_rmrf	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! s:_rmrf(what) abort " {{{2$/;"	f
s:_running_windows	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^let s:_running_windows = syntastic#util#isRunningWindows()$/;"	v
s:_search_headers	.vim/pack/ide/start/syntastic/autoload/syntastic/c.vim	/^function! s:_search_headers() abort " {{{2$/;"	f
s:_set_screen_column	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! s:_set_screen_column(item) abort " {{{2$/;"	f
s:_skip_file	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^function! s:_skip_file(buf) abort " {{{2$/;"	f
s:_str2float	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^let s:_str2float = function(exists('*str2float') ? 'str2float' : 'str2nr')$/;"	v
s:_translate	.vim/pack/ide/start/syntastic/plugin/syntastic/loclist.vim	/^function! s:_translate(key, val) abort " {{{2$/;"	f
s:_translateElement	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! s:_translateElement(key, term) abort " {{{2$/;"	f
s:_translateFilter	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! s:_translateFilter(filters) abort " {{{2$/;"	f
s:_wid_base	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^let s:_wid_base = 'syntastic_' . s:_fuzz() . '_' . reltimestr(g:_SYNTASTIC_START) . '_'$/;"	v
s:_wid_pool	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^let s:_wid_pool = 0$/;"	v
s:_width	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^let s:_width = function(exists('*strwidth') ? 'strwidth' : 'strlen')$/;"	v
s:accents	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^let s:accents = {}$/;"	v
s:activateAll	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateAll() abort$/;"	f
s:activateBookmark	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateBookmark(bm) abort$/;"	f
s:activateDirNode	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateDirNode(directoryNode, ...) abort$/;"	f
s:activateFileNode	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateFileNode(node) abort$/;"	f
s:active_cwd	.vim/pack/ide/start/ctrlp/autoload/ctrlp/autoignore.vim	/^let s:active_cwd = ''$/;"	v
s:active_cwd_len	.vim/pack/ide/start/ctrlp/autoload/ctrlp/autoignore.vim	/^let s:active_cwd_len = 0$/;"	v
s:active_patterns	.vim/pack/ide/start/ctrlp/autoload/ctrlp/autoignore.vim	/^let s:active_patterns = []$/;"	v
s:active_winnr	.vim/pack/ide/start/airline/plugin/airline.vim	/^let s:active_winnr = -1$/;"	v
s:addChild	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:addChild(tag) abort dict$/;"	f
s:addTag	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:addTag(tag) abort dict$/;"	f
s:add_db	.vim/pack/ide/start/gutentags/autoload/gutentags/gtags_cscope.vim	/^function! s:add_db(db_file) abort$/;"	f
s:add_methods	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:add_methods(namespace, method_names) abort$/;"	f
s:add_section	.vim/pack/ide/start/airline/autoload/airline/extensions/default.vim	/^  function! s:add_section(builder, context, key)$/;"	f
s:add_sign	.vim/pack/ide/start/signify/autoload/sy/sign.vim	/^function! s:add_sign(sy, line, type, ...) abort$/;"	f
s:add_snr	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_tag_recursive	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:add_tag_recursive(parent, taginfo, pathlist) abort$/;"	f
s:added_db_files	.vim/pack/ide/start/gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:added_db_files = {}$/;"	v
s:added_dbs	.vim/pack/ide/start/gutentags/autoload/gutentags/cscope.vim	/^let s:added_dbs = []$/;"	v
s:addr_other	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^let s:addr_other = has('patch-8.1.560') || has('nvim-0.5.0') ? '-addr=other' : ''$/;"	v
s:addr_tabs	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^let s:addr_tabs  = has('patch-7.4.542') ? '-addr=tabs' : ''$/;"	v
s:addr_wins	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^let s:addr_wins  = has('patch-7.4.542') ? '-addr=windows' : ''$/;"	v
s:addtomrufs	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mrufiles.vim	/^fu! s:addtomrufs(fname)$/;"	f
s:airline_a_commandline	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let s:airline_a_commandline = [ '#00005f' , '#00d700' , 17  , 40 ]$/;"	v
s:airline_a_inactive	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let s:airline_a_inactive = [ '#4e4e4e' , '#1c1c1c' , 239 , 234 , '' ]$/;"	v
s:airline_a_insert	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let s:airline_a_insert = [ '#00005f' , '#00dfff' , 17  , 45  ]$/;"	v
s:airline_a_normal	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let s:airline_a_normal   = [ '#00005f' , '#dfff00' , 17  , 190 ]$/;"	v
s:airline_a_visual	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let s:airline_a_visual = [ '#000000' , '#ffaf00' , 232 , 214 ]$/;"	v
s:airline_ale_count	.vim/pack/ide/start/airline/autoload/airline/extensions/ale.vim	/^function! s:airline_ale_count(cnt, symbol)$/;"	f
s:airline_ale_get_line_number	.vim/pack/ide/start/airline/autoload/airline/extensions/ale.vim	/^function! s:airline_ale_get_line_number(cnt, type) abort$/;"	f
s:airline_b_commandline	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let s:airline_b_commandline = [ '#ffffff' , '#444444' , 255 , 238 ]$/;"	v
s:airline_b_inactive	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let s:airline_b_inactive = [ '#4e4e4e' , '#262626' , 239 , 235 , '' ]$/;"	v
s:airline_b_insert	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let s:airline_b_insert = [ '#ffffff' , '#005fff' , 255 , 27  ]$/;"	v
s:airline_b_normal	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let s:airline_b_normal   = [ '#ffffff' , '#444444' , 255 , 238 ]$/;"	v
s:airline_b_visual	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let s:airline_b_visual = [ '#000000' , '#ff5f00' , 232 , 202 ]$/;"	v
s:airline_c_commandline	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let s:airline_c_commandline = [ '#9cffd3' , '#202020' , 85  , 234 ]$/;"	v
s:airline_c_inactive	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let s:airline_c_inactive = [ '#4e4e4e' , '#303030' , 239 , 236 , '' ]$/;"	v
s:airline_c_insert	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let s:airline_c_insert = [ '#ffffff' , '#000080' , 15  , 17  ]$/;"	v
s:airline_c_normal	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let s:airline_c_normal   = [ '#9cffd3' , '#202020' , 85  , 234 ]$/;"	v
s:airline_c_visual	.vim/pack/ide/start/airline/autoload/airline/themes/dark.vim	/^let s:airline_c_visual = [ '#ffffff' , '#5f0000' , 15  , 52  ]$/;"	v
s:airline_extensions	.vim/pack/ide/start/airline/plugin/airline.vim	/^function! s:airline_extensions()$/;"	f
s:airline_initialized	.vim/pack/ide/start/airline/plugin/airline.vim	/^let s:airline_initialized = 0$/;"	v
s:airline_languageclient_count	.vim/pack/ide/start/airline/autoload/airline/extensions/languageclient.vim	/^function! s:airline_languageclient_count(cnt, symbol)$/;"	f
s:airline_languageclient_get_line_number	.vim/pack/ide/start/airline/autoload/airline/extensions/languageclient.vim	/^function! s:airline_languageclient_get_line_number(type) abort$/;"	f
s:airline_lsp_count	.vim/pack/ide/start/airline/autoload/airline/extensions/lsp.vim	/^function! s:airline_lsp_count(cnt, symbol) abort$/;"	f
s:airline_lsp_get_line_number	.vim/pack/ide/start/airline/autoload/airline/extensions/lsp.vim	/^function! s:airline_lsp_get_line_number(cnt, type) abort$/;"	f
s:airline_nvimlsp_count	.vim/pack/ide/start/airline/autoload/airline/extensions/nvimlsp.vim	/^function! s:airline_nvimlsp_count(cnt, symbol) abort$/;"	f
s:airline_refresh	.vim/pack/ide/start/airline/plugin/airline.vim	/^function! s:airline_refresh(...)$/;"	f
s:airline_tagbar_last_lookup_time	.vim/pack/ide/start/airline/autoload/airline/extensions/tagbar.vim	/^let s:airline_tagbar_last_lookup_time = 0$/;"	v
s:airline_tagbar_last_lookup_val	.vim/pack/ide/start/airline/autoload/airline/extensions/tagbar.vim	/^let s:airline_tagbar_last_lookup_val = ''$/;"	v
s:airline_theme	.vim/pack/ide/start/airline/plugin/airline.vim	/^function! s:airline_theme(...)$/;"	f
s:airline_toggle	.vim/pack/ide/start/airline/plugin/airline.vim	/^function! s:airline_toggle()$/;"	f
s:ale_refresh	.vim/pack/ide/start/airline/autoload/airline/extensions/ale.vim	/^function! s:ale_refresh()$/;"	f
s:apply_opts	.vim/colors/marklar.vim	/^        function! s:apply_opts()$/;"	f
s:argmaps	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:argmaps(md, i)$/;"	f
s:args_after	.vim/pack/ide/start/syntastic/syntax_checkers/css/stylelint.vim	/^let s:args_after = {$/;"	v
s:ars	.vim/pack/ide/start/ctrlp/autoload/ctrlp/dir.vim	/^let s:ars = ['s:maxdepth', 's:maxfiles', 's:compare_lim', 's:glob', 's:caching']$/;"	v
s:async_glob_abort	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:async_glob_abort()$/;"	f
s:async_glob_on_exit	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:async_glob_on_exit(...)$/;"	f
s:async_glob_on_stdout	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:async_glob_on_stdout(job, data, ...)$/;"	f
s:async_glob_update_progress	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:async_glob_update_progress(timer)$/;"	f
s:at	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:at(str)$/;"	f
s:autocmd_handler	.vim/pack/ide/start/airline/autoload/airline/extensions/po.vim	/^function! s:autocmd_handler()$/;"	f
s:autocmds	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:autocmds()$/;"	f
s:autocommands_done	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:autocommands_done = 0$/;"	v
s:b	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:b           = ""$/;"	v
s:b	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:b           = ",bold"$/;"	v
s:back	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^        let s:back    = s:base03$/;"	v
s:back	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:back        = "NONE"$/;"	v
s:back	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:back        = s:back$/;"	v
s:back	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:back        = s:base02$/;"	v
s:back	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:back        = s:base03$/;"	v
s:backend_args_map	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/backend.vim	/^let s:backend_args_map = {$/;"	v
s:backend_error_log_file	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/backend.vim	/^let s:backend_error_log_file = tempname()$/;"	v
s:background	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^let s:background  = &background$/;"	v
s:backup	.vim/pack/ide/opt/seoul256/colors/seoul256-light.vim	/^      let s:backup = g:seoul256_background$/;"	v
s:bad_git_dir	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^let s:bad_git_dir = '\/$\\|^fugitive:'$/;"	v
s:bang_edits	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:bang_edits = {'split': 'Git', 'vsplit': 'vertical Git', 'tabedit': 'tab Git', 'pedit': 'Gi/;"	v
s:bar	.vim/pack/ide/start/tlib/spec/tlib/var.vim	/^let s:bar = 4$/;"	v
s:bar	.vim/pack/ide/start/tlib/test/tlib.vim	/^let s:bar = 4$/;"	v
s:base	.vim/pack/ide/start/tlib/autoload/tlib/signs.vim	/^let s:base = 2327$/;"	v
s:base0	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base0       = "#808080"$/;"	v
s:base0	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base0       = "#839496"$/;"	v
s:base0	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base0       = "12"$/;"	v
s:base0	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base0       = "244"$/;"	v
s:base0	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base0       = "LightBlue"     " 4*$/;"	v
s:base0	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base0       = s:base1$/;"	v
s:base0	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base0       = s:temp00$/;"	v
s:base00	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base00      = "#585858"$/;"	v
s:base00	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base00      = "#657b83"$/;"	v
s:base00	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base00      = "11"$/;"	v
s:base00	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base00      = "240"$/;"	v
s:base00	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base00      = "LightYellow"   " 3*$/;"	v
s:base00	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base00      = s:base0$/;"	v
s:base01	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base01      = "#4e4e4e"$/;"	v
s:base01	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base01      = "#586e75"$/;"	v
s:base01	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base01      = "10"$/;"	v
s:base01	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base01      = "239"$/;"	v
s:base01	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base01      = "LightGreen"    " 2*$/;"	v
s:base01	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base01      = s:base00$/;"	v
s:base01	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base01      = s:base1$/;"	v
s:base02	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base02      = "#073642"$/;"	v
s:base02	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base02      = "#262626"$/;"	v
s:base02	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base02      = "0"$/;"	v
s:base02	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base02      = "235"$/;"	v
s:base02	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base02      = "Black"         " 0$/;"	v
s:base02	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base02      = s:base2$/;"	v
s:base03	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base03      = "#002b36"$/;"	v
s:base03	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base03      = "#1c1c1c"$/;"	v
s:base03	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base03      = "234"$/;"	v
s:base03	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base03      = "8"$/;"	v
s:base03	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base03      = "DarkGray"      " 0*$/;"	v
s:base03	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base03      = s:base3$/;"	v
s:base1	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base1       = "#8a8a8a"$/;"	v
s:base1	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base1       = "#93a1a1"$/;"	v
s:base1	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base1       = "14"$/;"	v
s:base1	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base1       = "245"$/;"	v
s:base1	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base1       = "LightCyan"     " 6*$/;"	v
s:base1	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base1       = s:base2$/;"	v
s:base1	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base1       = s:temp01$/;"	v
s:base2	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base2       = "#d7d7af"$/;"	v
s:base2	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base2       = "#eee8d5"$/;"	v
s:base2	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base2       = "187"$/;"	v
s:base2	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base2       = "7"$/;"	v
s:base2	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base2       = "LightGray"     " 7$/;"	v
s:base2	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base2       = s:base3$/;"	v
s:base2	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base2       = s:temp02$/;"	v
s:base3	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base3       = "#fdf6e3"$/;"	v
s:base3	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base3       = "#ffffd7"$/;"	v
s:base3	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base3       = "15"$/;"	v
s:base3	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base3       = "230"$/;"	v
s:base3	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base3       = "White"         " 7*$/;"	v
s:base3	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:base3       = s:temp03$/;"	v
s:base_path	.vim/pack/ide/start/syntastic/syntax_checkers/python/python.vim	/^let s:base_path = expand('<sfile>:p:h', 1) . syntastic#util#Slash()$/;"	v
s:basic16	.vim/pack/ide/start/airline/autoload/airline/msdos.vim	/^let s:basic16 = [$/;"	v
s:bb	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:bb          = ""$/;"	v
s:bb	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:bb          = ",bold"$/;"	v
s:beep	.vim/pack/ide/start/surround/plugin/surround.vim	/^function! s:beep()$/;"	f
s:beige	.vim/colors/twilight.vim	/^let s:beige = '#ceb67f'$/;"	v
s:bins	.vim/pack/ide/start/ctrlp/autoload/ctrlp/buffertag.vim	/^let s:bins = [$/;"	v
s:black	.vim/colors/astronaut.vim	/^ let s:black   = "black"$/;"	v
s:blank	.vim/pack/ide/opt/goyo/autoload/goyo.vim	/^function! s:blank(repel)$/;"	f
s:blobdirs	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^  let s:blobdirs = {}$/;"	v
s:blue	.vim/colors/astronaut.vim	/^ let s:blue    = "blue"$/;"	v
s:blue	.vim/colors/astronaut.vim	/^ let s:blue    = "darkblue"$/;"	v
s:blue	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:blue        = "#0087ff"$/;"	v
s:blue	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:blue        = "#268bd2"$/;"	v
s:blue	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:blue        = "33"$/;"	v
s:blue	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:blue        = "4"$/;"	v
s:blue	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:blue        = "DarkBlue"      " 4$/;"	v
s:bmru	.vim/pack/ide/start/tlib/autoload/tlib/buffer.vim	/^let s:bmru = []$/;"	v
s:bold	.vim/colors/astronaut.vim	/^ let s:bold=""$/;"	v
s:bold	.vim/colors/astronaut.vim	/^ let s:bold=",bold"$/;"	v
s:bold_opt	.vim/colors/marklar.vim	/^    let s:bold_opt = 0$/;"	v
s:bright	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:bright      = "* term=bold cterm=bold"$/;"	v
s:buf_min_count	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/autoshow.vim	/^let s:buf_min_count = get(g:, 'airline#extensions#tabline#buffer_min_count', 0)$/;"	v
s:buffer	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^let s:buffer = []$/;"	v
s:buffer	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/db.vim	/^let s:buffer = []$/;"	v
s:buffer_prototype	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:buffer_prototype = {}$/;"	v
s:buffer_repo	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:buffer_repo() dict abort$/;"	f
s:buffer_seqno	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:buffer_seqno = 0$/;"	v
s:buffer_type	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:buffer_type(...) dict abort$/;"	f
s:buffunc	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:buffunc(e)$/;"	f
s:bufnr_width	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^let s:bufnr_width = 3$/;"	v
s:bufnrfilpath	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:bufnrfilpath(line)$/;"	f
s:bufparts	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:bufparts(bufnr)$/;"	f
s:buftab	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:buftab(bufnr, md)$/;"	f
s:bufwins	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:bufwins(bufnr)$/;"	f
s:build_command	.vim/pack/ide/start/airline/autoload/airline/extensions/cursormode.vim	/^function! s:build_command(color)$/;"	f
s:build_sections	.vim/pack/ide/start/airline/autoload/airline/extensions/default.vim	/^function! s:build_sections(builder, context, keys)$/;"	f
s:builder	.vim/pack/ide/start/airline/t/builder.vim	/^    let s:builder = airline#builder#new({'active': 0})$/;"	v
s:builder	.vim/pack/ide/start/airline/t/builder.vim	/^    let s:builder = airline#builder#new({'active': 1})$/;"	v
s:builder	.vim/pack/ide/start/airline/t/extensions_default.vim	/^    let s:builder = airline#builder#new({'active': 1})$/;"	v
s:buildpat	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:buildpat(lst)$/;"	f
s:byfname	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:byfname()$/;"	f
s:c	.vim/pack/ide/start/addon-mw-utils/autoload/cached_file_contents.vim	/^let s:c['cache_dir'] = get(s:c, 'cache_dir', expand('$HOME').'\/.vim-cache')$/;"	v
s:c	.vim/pack/ide/start/addon-mw-utils/autoload/cached_file_contents.vim	/^let s:c['scanned_files'] = get(s:c, 'scanned_files', {})$/;"	v
s:c	.vim/pack/ide/start/addon-mw-utils/autoload/glob.vim	/^let s:c['glob_cache'] = get(s:c, 'glob_cache', {})$/;"	v
s:c	.vim/pack/ide/start/addon-mw-utils/autoload/glob.vim	/^let s:c['regex_ignore_directory'] = '\\<\\%([_.]darcs\\|\\.git\\|.svn\\|.hg\\|.cvs\\|.bzr\\)\\>'$/;"	v
s:c	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:c               = ",undercurl"$/;"	v
s:cache	.vim/pack/ide/start/tlib/autoload/tlib/cache.vim	/^let s:cache = {}$/;"	v
s:cache_project_root	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! s:cache_project_root(path) abort$/;"	f
s:cachefile	.vim/pack/ide/start/ctrlp/autoload/ctrlp/bookmarkdir.vim	/^fu! s:cachefile()$/;"	f
s:callback_nvim_exit	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:callback_nvim_exit(_job_id, exitval, _event) dict abort$/;"	f
s:callback_nvim_stdout	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:callback_nvim_stdout(_job_id, data, _event) dict abort$/;"	f
s:callback_vim_close	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:callback_vim_close(channel) dict abort$/;"	f
s:callback_vim_stdout	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:callback_vim_stdout(_job_id, data) dict abort$/;"	f
s:caller_win	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^let s:caller_win = {$/;"	v
s:can_diffoff	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:can_diffoff(buf) abort$/;"	f
s:cancelled	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^let s:cancelled = 0$/;"	v
s:ccex	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^let s:ccex = s:pref.'clear_cache_on_exit'$/;"	v
s:cfile	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:cfile() abort$/;"	f
s:chCwd	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chCwd(node) abort$/;"	f
s:chRoot	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chRoot(node) abort$/;"	f
s:changed_wildignore	.vim/pack/ide/start/ctrlp/autoload/ctrlp/autoignore.vim	/^let s:changed_wildignore = 0$/;"	v
s:changelist	.vim/pack/ide/start/ctrlp/autoload/ctrlp/changes.vim	/^fu! s:changelist(bufnr)$/;"	f
s:changesurround	.vim/pack/ide/start/surround/plugin/surround.vim	/^function! s:changesurround(...) " {{{1$/;"	f
s:check_defined	.vim/pack/ide/start/airline/autoload/airline/init.vim	/^function! s:check_defined(variable, default)$/;"	f
s:check_defined_section	.vim/pack/ide/start/airline/autoload/airline/extensions.vim	/^function! s:check_defined_section(name)$/;"	f
s:check_diff_accurev	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:check_diff_accurev(exitval, diff) abort$/;"	f
s:check_diff_bzr	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:check_diff_bzr(exitval, diff) abort$/;"	f
s:check_diff_cvs	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:check_diff_cvs(exitval, diff) abort$/;"	f
s:check_diff_darcs	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:check_diff_darcs(exitval, diff) abort$/;"	f
s:check_diff_diff	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:check_diff_diff(exitval, diff) abort$/;"	f
s:check_diff_fossil	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:check_diff_fossil(exitval, diff) abort$/;"	f
s:check_diff_git	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:check_diff_git(exitval, diff) abort$/;"	f
s:check_diff_hg	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:check_diff_hg(exitval, diff) abort$/;"	f
s:check_diff_perforce	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:check_diff_perforce(exitval, diff) abort$/;"	f
s:check_diff_rcs	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:check_diff_rcs(exitval, diff) abort$/;"	f
s:check_diff_svn	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:check_diff_svn(exitval, diff) abort$/;"	f
s:check_diff_tfs	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:check_diff_tfs(exitval, diff) abort$/;"	f
s:check_diff_yadm	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:check_diff_yadm(exitval, diff) abort$/;"	f
s:check_file	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/escript.vim	/^let s:check_file = syntastic#util#shescape(expand('<sfile>:p:h', 1) . syntastic#util#Slash() . '/;"	v
s:check_mixed_indent	.vim/pack/ide/start/airline/autoload/airline/extensions/whitespace.vim	/^function! s:check_mixed_indent()$/;"	f
s:check_mixed_indent_file	.vim/pack/ide/start/airline/autoload/airline/extensions/whitespace.vim	/^function! s:check_mixed_indent_file()$/;"	f
s:checkargs	.vim/colors/calmar256-dark.vim	/^function! s:checkargs(arg)$/;"	f
s:checkargs	.vim/colors/calmar256-light.vim	/^function! s:checkargs(arg)$/;"	f
s:checkbuf	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:checkbuf()$/;"	f
s:checked_ctags	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:checked_ctags       = 0$/;"	v
s:checked_ctags_types	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:checked_ctags_types = 0$/;"	v
s:checkwith	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^  function! s:checkwith(left, right, line, col) abort$/;"	f
s:chknearby	.vim/pack/ide/start/ctrlp/autoload/ctrlp/buffertag.vim	/^fu! s:chknearby(pat)$/;"	f
s:choices	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:choices(str, choices, func, args)$/;"	f
s:choose	.vim/colors/vividchalk.vim	/^function! s:choose(mediocre,good)$/;"	f
s:chop	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mrufiles.vim	/^fu! s:chop(mrufs)$/;"	f
s:clean_jobs	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^let s:clean_jobs     = {}$/;"	v
s:clear	.vim/pack/ide/start/airline/t/init.vim	/^function! s:clear()$/;"	f
s:clearOldFolds	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:clearOldFolds() abort dict$/;"	f
s:closeChildren	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeChildren(node) abort$/;"	f
s:closeCurrentDir	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeCurrentDir(node) abort$/;"	f
s:closeFold	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:closeFold() abort dict$/;"	f
s:closeFold	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:closeFold() abort dict$/;"	f
s:closeKindFold	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:closeKindFold(kind) abort dict$/;"	f
s:closeTreeWindow	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeTreeWindow() abort$/;"	f
s:closematch	.vim/pack/ide/start/surround/plugin/surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
s:cmap	.vim/colors/calmar256-dark.vim	/^    let s:cmap =   [ $/;"	v
s:cmap	.vim/colors/calmar256-light.vim	/^    let s:cmap =   [ $/;"	v
s:cmd1	.vim/pack/ide/start/tlib/autoload/tlib/vcs.vim	/^            let s:cmd1 = printf(g:tlib#vcs#check, s:cmd)$/;"	v
s:coc_git_enabled	.vim/pack/ide/start/airline/autoload/airline/extensions/hunks.vim	/^function! s:coc_git_enabled() abort$/;"	f
s:col	.vim/colors/calmar256-dark.vim	/^            let s:col[i] = "NONE"$/;"	v
s:col	.vim/colors/calmar256-light.vim	/^            let s:col[i] = "NONE"$/;"	v
s:color	.vim/colors/jellybeans.vim	/^fun! s:color(r, g, b)$/;"	f
s:color_template	.vim/pack/ide/start/airline/autoload/airline/extensions/ctrlp.vim	/^let s:color_template = get(g:, 'airline#extensions#ctrlp#color_template', 'insert')$/;"	v
s:color_template	.vim/pack/ide/start/airline/autoload/airline/extensions/promptline.vim	/^let s:color_template = get(g:, 'airline#extensions#promptline#color_template', 'normal')$/;"	v
s:color_template	.vim/pack/ide/start/airline/autoload/airline/extensions/tmuxline.vim	/^let s:color_template = get(g:, 'airline#extensions#tmuxline#color_template', 'normal')$/;"	v
s:colors256	.vim/colors/calmar256-dark.vim	/^let s:colors256 = [$/;"	v
s:colors256	.vim/colors/calmar256-light.vim	/^let s:colors256 = [$/;"	v
s:colors_name	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^let s:colors_name = get(g:, 'colors_name', '')$/;"	v
s:colorscheme_list	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^let s:colorscheme_list=[$/;"	v
s:colorvim7	.vim/colors/calmar256-dark.vim	/^let s:colorvim7 = [$/;"	v
s:colorvim7	.vim/colors/calmar256-light.vim	/^let s:colorvim7 = [$/;"	v
s:column_display	.vim/pack/ide/start/airline/autoload/airline/extensions/csv.vim	/^let s:column_display = get(g:, 'airline#extensions#csv#column_display', 'Number')$/;"	v
s:commit_mode	.vim/pack/ide/start/airline/autoload/airline/extensions/vimagit.vim	/^let s:commit_mode = {'ST': 'STAGING', 'CC': 'COMMIT', 'CA': 'AMEND'}$/;"	v
s:commondirs	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:commondirs = {}$/;"	v
s:compare_by_kind	.vim/pack/ide/start/tagbar/autoload/tagbar/sorting.vim	/^function! s:compare_by_kind(tag1, tag2) abort$/;"	f
s:compare_by_line	.vim/pack/ide/start/tagbar/autoload/tagbar/sorting.vim	/^function! s:compare_by_line(tag1, tag2) abort$/;"	f
s:compare_typeinfo	.vim/pack/ide/start/tagbar/autoload/tagbar/sorting.vim	/^let s:compare_typeinfo = {}$/;"	v
s:comparent	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:comparent(...)$/;"	f
s:compfnlen	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:compfnlen(...)$/;"	f
s:compmatlen	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:compmatlen(...)$/;"	f
s:compmreb	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:compmreb(...)$/;"	f
s:compmref	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:compmref(...)$/;"	f
s:comptime	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:comptime(...)$/;"	f
s:compval	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:compval(...)$/;"	f
s:compval	.vim/pack/ide/start/ctrlp/autoload/ctrlp/undo.vim	/^fu! s:compval(...)$/;"	f
s:config	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:config = {}$/;"	v
s:config_Get	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:config_Get(name, ...) dict abort$/;"	f
s:config_GetAll	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:config_GetAll(name) dict abort$/;"	f
s:config_GetRegexp	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:config_GetRegexp(pattern) dict abort$/;"	f
s:config_fugitive_branch	.vim/pack/ide/start/airline/autoload/airline/extensions/branch.vim	/^function! s:config_fugitive_branch() abort$/;"	f
s:config_gina_branch	.vim/pack/ide/start/airline/autoload/airline/extensions/branch.vim	/^function! s:config_gina_branch() abort$/;"	f
s:config_prototype	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:config_prototype = {}$/;"	v
s:conflict_marker	.vim/pack/ide/start/airline/autoload/airline/extensions/whitespace.vim	/^function! s:conflict_marker()$/;"	f
s:const	.vim/pack/ide/opt/goyo/autoload/goyo.vim	/^function! s:const(val, min, max)$/;"	f
s:consumed	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^let s:consumed = 0$/;"	v
s:contexts	.vim/pack/ide/start/airline/autoload/airline.vim	/^let s:contexts = {}$/;"	v
s:core_funcrefs	.vim/pack/ide/start/airline/autoload/airline.vim	/^let s:core_funcrefs = [$/;"	v
s:coretype_names	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^let s:coretype_names = {$/;"	v
s:coretypes	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^let s:coretypes = map(copy(g:ctrlp_types), '[s:coretype_names[v:val], v:val]')$/;"	v
s:cpath	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:cpath(path, ...) abort$/;"	f
s:cpo_save	.vim/pack/ide/opt/goyo/autoload/goyo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpoptions	.vim/pack/ide/start/signify/plugin/signify.vim	/^let s:cpoptions = &cpoptions$/;"	v
s:create	.vim/pack/ide/start/airline/autoload/airline/section.vim	/^function! s:create(parts, append)$/;"	f
s:createKinddict	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:createKinddict() abort dict$/;"	f
s:create_pseudotag	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:create_pseudotag(name, parent, kind, typeinfo, fileinfo) abort$/;"	f
s:ctags_is_uctags	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:ctags_is_uctags     = 0$/;"	v
s:ctrlspace	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^let s:ctrlspace = get(g:, 'CtrlSpaceLoaded', 0)$/;"	v
s:cur_file	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^let s:cur_file = ''$/;"	v
s:current_bufnr	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_bufnr = -1$/;"	v
s:current_bufnr	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_bufnr = -1$/;"	v
s:current_bufnr	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:current_bufnr = -1$/;"	v
s:current_bufnr	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:current_bufnr = -1$/;"	v
s:current_file	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/db.vim	/^let s:current_file = ''$/;"	v
s:current_mode	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^let s:current_mode = ''$/;"	v
s:current_modified	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_modified = 0$/;"	v
s:current_modified	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_modified = 0$/;"	v
s:current_modified	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:current_modified = 0$/;"	v
s:current_modified	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:current_modified = 0$/;"	v
s:current_query	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf.vim	/^let s:current_query = ''$/;"	v
s:current_tabcnt	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^let s:current_tabcnt = -1$/;"	v
s:current_tabline	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_tabline = ''$/;"	v
s:current_tabline	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_tabline = ''$/;"	v
s:current_tabline	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:current_tabline = ''$/;"	v
s:current_tabnr	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_tabnr = -1$/;"	v
s:current_tabnr	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:current_tabnr = -1$/;"	v
s:current_tabnr	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:current_tabnr = -1$/;"	v
s:current_visible_buffers	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_visible_buffers = []$/;"	v
s:curtype	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:curtype()$/;"	f
s:customOpenBookmark	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenBookmark(node) abort$/;"	f
s:customOpenDir	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenDir(node) abort$/;"	f
s:customOpenFile	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenFile(node) abort$/;"	f
s:custom_bg	.vim/pack/ide/opt/seoul256/colors/seoul256-light.vim	/^let s:custom_bg = get(g:, 'seoul256_light_background', get(g:, 'seoul256_background', 253))$/;"	v
s:cyan	.vim/colors/astronaut.vim	/^ let s:cyan    = "cyan"$/;"	v
s:cyan	.vim/colors/astronaut.vim	/^ let s:cyan    = "darkcyan"$/;"	v
s:cyan	.vim/colors/twilight.vim	/^let s:cyan = '#74dad9'$/;"	v
s:cyan	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:cyan        = "#00afaf"$/;"	v
s:cyan	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:cyan        = "#2aa198"$/;"	v
s:cyan	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:cyan        = "37"$/;"	v
s:cyan	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:cyan        = "6"$/;"	v
s:cyan	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:cyan        = "DarkCyan"      " 6$/;"	v
s:cygwin	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^let s:cygwin = {}$/;"	v
s:dark_bg	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^  let s:dark_bg  = 237$/;"	v
s:dark_bg	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^  let s:dark_bg  = get(s:, 'seoul256_background', 237)$/;"	v
s:dark_bg_2	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^let s:dark_bg_2 = s:dark_bg > 233 ? s:dark_bg - 2 : 16$/;"	v
s:dark_fg	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^let s:dark_fg = 252$/;"	v
s:dark_grey_blue	.vim/colors/twilight.vim	/^let s:dark_grey_blue = '#34383c'$/;"	v
s:darkgrey	.vim/colors/twilight.vim	/^let s:darkgrey = '#1a1a1a'$/;"	v
s:debug_enabled	.vim/pack/ide/start/tagbar/autoload/tagbar/debug.vim	/^let s:debug_enabled = 0$/;"	v
s:debug_file	.vim/pack/ide/start/tagbar/autoload/tagbar/debug.vim	/^let s:debug_file = ''$/;"	v
s:decimal_group	.vim/pack/ide/start/airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^  let s:decimal_group = ''$/;"	v
s:decimal_group	.vim/pack/ide/start/airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^  let s:decimal_group = ','$/;"	v
s:decimal_group	.vim/pack/ide/start/airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^  let s:decimal_group = '.'$/;"	v
s:decimal_group	.vim/pack/ide/start/airline/autoload/airline/extensions/wordcount/formatters/readingtime.vim	/^  let s:decimal_group = ''$/;"	v
s:decimal_group	.vim/pack/ide/start/airline/autoload/airline/extensions/wordcount/formatters/readingtime.vim	/^  let s:decimal_group = ','$/;"	v
s:decimal_group	.vim/pack/ide/start/airline/autoload/airline/extensions/wordcount/formatters/readingtime.vim	/^  let s:decimal_group = '.'$/;"	v
s:default	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/opt.vim	/^let s:default = {$/;"	v
s:default_checks	.vim/pack/ide/start/airline/autoload/airline/extensions/whitespace.vim	/^let s:default_checks = ['indent', 'trailing', 'mixed-indent-file', 'conflicts']$/;"	v
s:default_comment_string	.vim/pack/ide/start/tcomment/autoload/tcomment/vimoptions.vim	/^let s:default_comment_string = s:DefaultValue('commentstring')$/;"	v
s:default_comments	.vim/pack/ide/start/tcomment/autoload/tcomment/vimoptions.vim	/^let s:default_comments       = s:DefaultValue('comments')$/;"	v
s:default_context	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/opt.vim	/^let s:default_context = { 'conf': '', 'ctx': {} }$/;"	v
s:default_includes	.vim/pack/ide/start/syntastic/autoload/syntastic/c.vim	/^let s:default_includes = [$/;"	v
s:default_mapping	.vim/pack/ide/opt/ctrlsf/plugin/ctrlsf.vim	/^let s:default_mapping = {$/;"	v
s:default_vcs_cmds	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^let s:default_vcs_cmds = {$/;"	v
s:default_vcs_cmds_diffmode	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^let s:default_vcs_cmds_diffmode = {$/;"	v
s:defaults_list	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^let s:defaults_list=[$/;"	v
s:define_cache_file	.vim/pack/ide/start/addon-mw-utils/autoload/cached_file_contents.vim	/^let s:define_cache_file = "let this_dir = s:c['cache_dir'].'\/cached-file-contents' | let cache_/;"	v
s:definitions	.vim/pack/ide/start/tcomment/autoload/tcomment/type.vim	/^let s:definitions = {}$/;"	v
s:delayed_update_files	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:delayed_update_files = []$/;"	v
s:delbuf	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:delbuf()$/;"	f
s:delbufcond	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:delbufcond(bufnr)$/;"	f
s:delent	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:delent(rfunc)$/;"	f
s:deleteBookmark	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:deleteBookmark(bookmark) abort$/;"	f
s:delete_highlight	.vim/pack/ide/start/signify/autoload/sy/sign.vim	/^let s:delete_highlight = ['', 'SignifyLineDelete']$/;"	v
s:delimiterMap	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^let s:delimiterMap = {$/;"	v
s:denite_ver	.vim/pack/ide/start/airline/autoload/airline/extensions/denite.vim	/^let s:denite_ver = (exists('*denite#get_status_mode') ? 2 : 3)$/;"	v
s:devnull	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^let s:devnull  = has('win32') || has ('win64') ? 'NUL' : '\/dev\/null'$/;"	v
s:diagnostics	.vim/pack/ide/start/airline/autoload/airline/extensions/languageclient.vim	/^let s:diagnostics = {}$/;"	v
s:diagnostics_for_buffer	.vim/pack/ide/start/airline/autoload/airline/extensions/languageclient.vim	/^function! s:diagnostics_for_buffer()$/;"	f
s:dict2list	.vim/pack/ide/start/ctrlp/autoload/ctrlp/undo.vim	/^fu! s:dict2list(dict)$/;"	f
s:dictindex	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:dictindex(dict, expr)$/;"	f
s:did_check_exe	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^let s:did_check_exe = 0$/;"	v
s:diff_hunk	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:diff_hunk(_sy, vcs, diff) abort$/;"	f
s:diff_restore	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:diff_restore() abort$/;"	f
s:diff_window_count	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:diff_window_count() abort$/;"	f
s:diffoff	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:diffoff() abort$/;"	f
s:diffoff_all	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:diffoff_all(dir) abort$/;"	f
s:diffthis	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:diffthis() abort$/;"	f
s:difftool	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^let s:difftool = sy#util#escape(get(g:, 'signify_difftool', 'diff'))$/;"	v
s:dirArrows	.vim/pack/ide/start/nerdtree/syntax/nerdtree.vim	/^    let s:dirArrows = escape(g:NERDTreeDirArrowCollapsible, '~]\\-').escape(g:NERDTreeDirArrowEx/;"	v
s:dir_for_worktree	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^let s:dir_for_worktree = {}$/;"	v
s:dir_stack	.vim/pack/ide/start/tlib/autoload/tlib/dir.vim	/^let s:dir_stack = []$/;"	v
s:dircompl	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:dircompl(be, sd)$/;"	f
s:dircounts	.vim/pack/ide/start/ctrlp/autoload/ctrlp/dir.vim	/^let s:dircounts = {}$/;"	v
s:disable_colors	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:disable_colors = []$/;"	v
s:dismrk	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:dismrk()$/;"	f
s:displayHelp	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:displayHelp() abort$/;"	f
s:display_git_branch	.vim/pack/ide/start/airline/autoload/airline/extensions/branch.vim	/^function! s:display_git_branch()$/;"	f
s:display_hg_branch	.vim/pack/ide/start/airline/autoload/airline/extensions/branch.vim	/^function! s:display_hg_branch()$/;"	f
s:do_delayed_update	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:do_delayed_update() abort$/;"	f
s:dohighlight	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:dohighlight()$/;"	f
s:done	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^let s:done = -1$/;"	v
s:dosigns	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:dosigns()$/;"	f
s:dosurround	.vim/pack/ide/start/surround/plugin/surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
s:drawn_lines	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/win.vim	/^let s:drawn_lines = 0$/;"	v
s:edit_jobs	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^  let s:edit_jobs = {}$/;"	v
s:elapsed	.vim/pack/ide/start/ctrlp/autoload/ctrlp/undo.vim	/^fu! s:elapsed(nr)$/;"	f
s:enabled	.vim/pack/ide/start/airline/autoload/airline/extensions/localsearch.vim	/^let s:enabled = get(g:, 'airline#extensions#localsearch#enabled', 1)$/;"	v
s:enabled	.vim/pack/ide/start/airline/autoload/airline/extensions/whitespace.vim	/^let s:enabled = get(g:, 'airline#extensions#whitespace#enabled', 1)$/;"	v
s:error_symbol	.vim/pack/ide/start/airline/autoload/airline/extensions/coc.vim	/^let s:error_symbol = get(g:, 'airline#extensions#coc#error_symbol', 'E:')$/;"	v
s:error_symbol	.vim/pack/ide/start/airline/autoload/airline/extensions/languageclient.vim	/^let s:error_symbol = get(g:, 'airline#extensions#languageclient#error_symbol', 'E:')$/;"	v
s:error_symbol	.vim/pack/ide/start/airline/autoload/airline/extensions/neomake.vim	/^let s:error_symbol = get(g:, 'airline#extensions#neomake#error_symbol', 'E:')$/;"	v
s:error_symbol	.vim/pack/ide/start/airline/autoload/airline/extensions/syntastic.vim	/^let s:error_symbol = get(g:, 'airline#extensions#syntastic#error_symbol', 'E:')$/;"	v
s:error_symbol	.vim/pack/ide/start/airline/autoload/airline/extensions/ycm.vim	/^let s:error_symbol = get(g:, 'airline#extensions#ycm#error_symbol', 'E:')$/;"	v
s:esctagscmd	.vim/pack/ide/start/ctrlp/autoload/ctrlp/buffertag.vim	/^fu! s:esctagscmd(bin, args, ...)$/;"	f
s:evaluate_tabline	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:evaluate_tabline(tabline)$/;"	f
s:excl	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mrufiles.vim	/^fu! s:excl(fn)$/;"	f
s:exec_paths	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:exec_paths = {}$/;"	v
s:exec_separator	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  def s:exec_separator(dict: dict<any>, from_arg: string, to_arg: string, inverse: bool, suffix:/;"	f
s:exec_separator	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  function! s:exec_separator(dict, from, to, inverse, suffix) abort$/;"	f
s:execextvar	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:execextvar(key)$/;"	f
s:exectags	.vim/pack/ide/start/ctrlp/autoload/ctrlp/buffertag.vim	/^fu! s:exectags(cmd)$/;"	f
s:exectagsonfile	.vim/pack/ide/start/ctrlp/autoload/ctrlp/buffertag.vim	/^fu! s:exectagsonfile(fname, ftype)$/;"	f
s:executable	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:executable(binary) abort$/;"	f
s:executables	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:executables = {}$/;"	v
s:executables	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^let s:executables = {}$/;"	v
s:expand	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:expand = '\\%(\\(' . s:var . '\\)\\(' . s:flag . '*\\)\\(:S\\)\\=\\)'$/;"	v
s:expand_bufnr	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:expand_bufnr = -1$/;"	v
s:ext	.vim/pack/ide/start/airline/autoload/airline/extensions.vim	/^let s:ext = {}$/;"	v
s:ext	.vim/pack/ide/start/airline/autoload/airline/extensions.vim	/^let s:ext._theme_funcrefs = []$/;"	v
s:ext.add_inactive_statusline_func	.vim/pack/ide/start/airline/autoload/airline/extensions.vim	/^function! s:ext.add_inactive_statusline_func(name) dict$/;"	f
s:ext.add_statusline_func	.vim/pack/ide/start/airline/autoload/airline/extensions.vim	/^function! s:ext.add_statusline_func(name) dict$/;"	f
s:ext.add_statusline_funcref	.vim/pack/ide/start/airline/autoload/airline/extensions.vim	/^function! s:ext.add_statusline_funcref(function) dict$/;"	f
s:ext.add_theme_func	.vim/pack/ide/start/airline/autoload/airline/extensions.vim	/^function! s:ext.add_theme_func(name) dict$/;"	f
s:external_sign_present	.vim/pack/ide/start/signify/autoload/sy/sign.vim	/^function! s:external_sign_present(sy, line) abort$/;"	f
s:extract_current_hunk	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:extract_current_hunk(diff) abort$/;"	f
s:extractafter	.vim/pack/ide/start/surround/plugin/surround.vim	/^function! s:extractafter(str)$/;"	f
s:extractbefore	.vim/pack/ide/start/surround/plugin/surround.vim	/^function! s:extractbefore(str)$/;"	f
s:fg_pdef	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^let s:fg_pdef = s:fg_violet$/;"	v
s:fg_phead	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^let s:fg_phead = s:fg_orange$/;"	v
s:fg_ptable	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^let s:fg_ptable = s:fg_blue$/;"	v
s:ficounts	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^let s:ficounts = {}$/;"	v
s:file_commit_pattern	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:file_commit_pattern = s:file_pattern . '\\|^\\%(\\l\\{3,\\} \\)\\=[0-9a-f]\\{4,\\} '$/;"	v
s:file_pattern	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:file_pattern = '^[A-Z?] .\\|^diff --'$/;"	v
s:filecounts	.vim/pack/ide/start/ctrlp/autoload/ctrlp/rtscript.vim	/^let s:filecounts = {}$/;"	v
s:filereadable	.vim/pack/ide/start/tlib/autoload/tlib/file.vim	/^let s:filereadable = {}$/;"	v
s:fileset	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/db.vim	/^let s:fileset = []$/;"	v
s:filetype_overrides	.vim/pack/ide/start/airline/autoload/airline/extensions.vim	/^  let s:filetype_overrides['nerdtree'] = [ get(g:, 'NERDTreeStatusline', 'NERD'), '' ]$/;"	v
s:filetype_overrides	.vim/pack/ide/start/airline/autoload/airline/extensions.vim	/^  let s:filetype_overrides['nerdtree'] = ['NERDTree', '']$/;"	v
s:filetype_overrides	.vim/pack/ide/start/airline/autoload/airline/extensions.vim	/^let s:filetype_overrides = {$/;"	v
s:filetype_regex_overrides	.vim/pack/ide/start/airline/autoload/airline/extensions.vim	/^let s:filetype_regex_overrides = {}$/;"	v
s:filter	.vim/pack/ide/start/ctrlp/autoload/ctrlp/tag.vim	/^fu! s:filter(tags)$/;"	f
s:findAndRevealPath	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:findAndRevealPath(pathStr) abort$/;"	f
s:findcommon	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:findcommon(items, seed)$/;"	f
s:findcount	.vim/pack/ide/start/ctrlp/autoload/ctrlp/tag.vim	/^fu! s:findcount(str, tgaddr)$/;"	f
s:findroot	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:findroot(curr, mark, depth, type)$/;"	f
s:first_completion	.vim/pack/ide/start/tcomment/autoload/tcomment/complete.vim	/^let s:first_completion = 0$/;"	v
s:first_sign_id	.vim/pack/ide/start/syntastic/plugin/syntastic/signs.vim	/^let s:first_sign_id = 5000$/;"	v
s:fixindent	.vim/pack/ide/start/surround/plugin/surround.vim	/^function! s:fixindent(str,spc)$/;"	f
s:flag	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:flag = '\\%(:[p8~.htre]\\|:g\\=s\\(.\\).\\{-\\}\\1.\\{-\\}\\1\\)'$/;"	v
s:flags	.vim/pack/ide/start/airline/autoload/airline/extensions/tagbar.vim	/^let s:flags = get(g:, 'airline#extensions#tagbar#flags', '')$/;"	v
s:flatten	.vim/pack/ide/start/ctrlp/autoload/ctrlp/undo.vim	/^fu! s:flatten(tree, cur)$/;"	f
s:fnamecollapse	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/formatters/short_path.vim	/^let s:fnamecollapse = get(g:, 'airline#extensions#tabline#fnamecollapse', 1)$/;"	v
s:fnameescape	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:fnameescape(file) abort$/;"	f
s:fnameescape	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:fnameescape = " \\t\\n*?[{`$\\\\%#'\\"|!<"$/;"	v
s:fnesc	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:fnesc(...)$/;"	f
s:focusgained_ignore_time	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^let s:focusgained_ignore_time = 0$/;"	v
s:format	.vim/pack/ide/start/ctrlp/autoload/ctrlp/undo.vim	/^fu! s:format(...)$/;"	f
s:format	.vim/pack/ide/start/tlib/autoload/tlib/progressbar.vim	/^let s:format = []$/;"	v
s:format_name	.vim/pack/ide/start/airline/autoload/airline/extensions/branch.vim	/^  function! s:format_name(name)$/;"	f
s:format_wordcount	.vim/pack/ide/start/airline/autoload/airline/extensions/wordcount.vim	/^      function! s:format_wordcount(_)$/;"	f
s:format_wordcount	.vim/pack/ide/start/airline/autoload/airline/extensions/wordcount.vim	/^function! s:format_wordcount(wordcount)$/;"	f
s:formatline	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:formatline(str)$/;"	f
s:formatline2	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:formatline2(ct, key, str)$/;"	f
s:formatter	.vim/pack/ide/start/airline/autoload/airline/extensions/wordcount.vim	/^      let s:formatter = 'default'$/;"	v
s:formatter	.vim/pack/ide/start/airline/autoload/airline/extensions/wordcount.vim	/^let s:formatter = get(g:, 'airline#extensions#wordcount#formatter', 'default')$/;"	v
s:formatul	.vim/pack/ide/start/ctrlp/autoload/ctrlp/undo.vim	/^fu! s:formatul(...)$/;"	f
s:fpats	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^let s:fpats = {$/;"	v
s:fullscreen	.vim/pack/ide/start/tlib/autoload/tlib/vim.vim	/^let s:fullscreen = 0$/;"	v
s:function	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:function(name) abort$/;"	f
s:generate_wildignore_options	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^function! s:generate_wildignore_options() abort$/;"	f
s:get	.vim/pack/ide/start/tagbar/autoload/tagbar/state.vim	/^function! s:get() abort$/;"	f
s:getChildren	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getChildren() dict abort$/;"	f
s:getChildrenByName	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getChildrenByName(tagname) dict abort$/;"	f
s:getClosedParentTline	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getClosedParentTline() abort dict$/;"	f
s:getDataType	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getDataType() abort dict$/;"	f
s:getDataType	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:getDataType() abort dict$/;"	f
s:getKind	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:getKind(kind) abort dict$/;"	f
s:getPrototype	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
s:getPrototype	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
s:getPrototype	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
s:getTags	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:getTags() dict abort$/;"	f
s:getTagsByName	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:getTagsByName(tagname) dict abort$/;"	f
s:get_accented_line	.vim/pack/ide/start/airline/autoload/airline/builder.vim	/^function! s:get_accented_line(self, group, contents)$/;"	f
s:get_airline_themes	.vim/pack/ide/start/airline/plugin/airline.vim	/^function! s:get_airline_themes(a, l, p)$/;"	f
s:get_array	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  def s:get_array(guifg: string, guibg: string, ctermfg: string, ctermbg: string, opts: list<str/;"	f
s:get_array	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  function! s:get_array(guifg, guibg, ctermfg, ctermbg, opts) abort$/;"	f
s:get_base	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:get_base(bufnr, vcs) abort$/;"	f
s:get_base_cmd	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:get_base_cmd(bufnr, vcs, vcs_cmds) abort$/;"	f
s:get_color	.vim/pack/ide/opt/goyo/autoload/goyo.vim	/^function! s:get_color(group, attr)$/;"	f
s:get_color_map	.vim/pack/ide/start/airline/autoload/airline/extensions/cursormode.vim	/^function! s:get_color_map()$/;"	f
s:get_counts	.vim/pack/ide/start/airline/autoload/airline/extensions/neomake.vim	/^function! s:get_counts()$/;"	f
s:get_ctags_executable	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^function! s:get_ctags_executable(proj_dir) abort$/;"	f
s:get_diagnostics	.vim/pack/ide/start/airline/autoload/airline/extensions/languageclient.vim	/^function! s:get_diagnostics()$/;"	f
s:get_hunks_changes	.vim/pack/ide/start/airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_changes() abort$/;"	f
s:get_hunks_coc	.vim/pack/ide/start/airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_coc() abort$/;"	f
s:get_hunks_empty	.vim/pack/ide/start/airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_empty() abort$/;"	f
s:get_hunks_gitgutter	.vim/pack/ide/start/airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_gitgutter() abort$/;"	f
s:get_hunks_signify	.vim/pack/ide/start/airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_signify() abort$/;"	f
s:get_levels	.vim/pack/ide/start/signify/autoload/sy/fold.vim	/^function! s:get_levels(lines) abort$/;"	f
s:get_lines	.vim/pack/ide/start/signify/autoload/sy/fold.vim	/^function! s:get_lines() abort$/;"	f
s:get_map_str	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:get_map_str(map) abort$/;"	f
s:get_mode	.vim/pack/ide/start/airline/autoload/airline/extensions/cursormode.vim	/^function! s:get_mode()$/;"	f
s:get_number	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:get_number(index)$/;"	f
s:get_path	.vim/pack/ide/start/signify/autoload/sy.vim	/^function! s:get_path(bufnr)$/;"	f
s:get_project_patterns	.vim/pack/ide/start/ctrlp/autoload/ctrlp/autoignore.vim	/^function! s:get_project_patterns(root_dir) abort$/;"	f
s:get_section	.vim/pack/ide/start/airline/autoload/airline/extensions/default.vim	/^function! s:get_section(winnr, key, ...)$/;"	f
s:get_separator_change	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:get_separator_change(new_group, old_group, end_group, sep_size, alt_sep_size)$/;"	f
s:get_separator_change_with_end	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:get_separator_change_with_end(new_group, old_group, new_end_group, old_end_group, se/;"	f
s:get_seperator	.vim/pack/ide/start/airline/autoload/airline/builder.vim	/^function! s:get_seperator(self, prev_group, group, side)$/;"	f
s:get_syn	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  def s:get_syn(group: string, what: string, mode: string): string$/;"	f
s:get_syn	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  function! s:get_syn(group, what, mode) abort$/;"	f
s:get_transitioned_seperator	.vim/pack/ide/start/airline/autoload/airline/builder.vim	/^function! s:get_transitioned_seperator(self, prev_group, group, side)$/;"	f
s:get_vcs_path	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:get_vcs_path(bufnr, vcs) abort$/;"	f
s:get_wordcount	.vim/pack/ide/start/airline/autoload/airline/extensions/wordcount.vim	/^  function! s:get_wordcount(visual_mode_active)$/;"	f
s:getbookmarks	.vim/pack/ide/start/ctrlp/autoload/ctrlp/bookmarkdir.vim	/^fu! s:getbookmarks()$/;"	f
s:getchar	.vim/pack/ide/start/surround/plugin/surround.vim	/^function! s:getchar()$/;"	f
s:getenv	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:getenv()$/;"	f
s:getextvar	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:getextvar(key)$/;"	f
s:gethistdata	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:gethistdata()$/;"	f
s:gethistloc	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:gethistloc()$/;"	f
s:getinput	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:getinput(...)$/;"	f
s:getinput	.vim/pack/ide/start/ctrlp/autoload/ctrlp/bookmarkdir.vim	/^fu! s:getinput(str, ...)$/;"	f
s:getnewmix	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mixed.vim	/^fu! s:getnewmix(cwd, clim)$/;"	f
s:getparent	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:getparent(item)$/;"	f
s:getregs	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:getregs()$/;"	f
s:gettime	.vim/pack/ide/start/tagbar/autoload/tagbar/debug.vim	/^    function! s:gettime() abort$/;"	f
s:getundo	.vim/pack/ide/start/ctrlp/autoload/ctrlp/undo.vim	/^fu! s:getundo()$/;"	f
s:git_versions	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:git_versions = {}$/;"	v
s:glbpath	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:glbpath(...)$/;"	f
s:glbs	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^let s:glbs = { 'magic': 1, 'to': 1, 'tm': 0, 'sb': 1, 'hls': 0, 'im': 0,$/;"	v
s:glob_cache	.vim/pack/ide/start/addon-mw-utils/autoload/glob.vim	/^let s:glob_cache = s:c['glob_cache']$/;"	v
s:globdirs	.vim/pack/ide/start/ctrlp/autoload/ctrlp/dir.vim	/^fu! s:globdirs(dirs, depth)$/;"	f
s:globsubs	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:globsubs = {$/;"	v
s:glsl_extensions	.vim/pack/ide/start/syntastic/syntax_checkers/glsl/cgc.vim	/^let s:glsl_extensions = {$/;"	v
s:goto_markedwin	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:goto_markedwin(...) abort$/;"	f
s:goto_tagbar	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:goto_tagbar(...) abort$/;"	f
s:goto_win	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:goto_win(winnr, ...) abort$/;"	f
s:goyo_off	.vim/pack/ide/opt/goyo/autoload/goyo.vim	/^function! s:goyo_off()$/;"	f
s:goyo_on	.vim/pack/ide/opt/goyo/autoload/goyo.vim	/^function! s:goyo_on(dim)$/;"	f
s:green	.vim/colors/astronaut.vim	/^ let s:green   = "darkgreen"$/;"	v
s:green	.vim/colors/astronaut.vim	/^ let s:green   = "green"$/;"	v
s:green	.vim/colors/twilight.vim	/^let s:green = '#a2a96f'$/;"	v
s:green	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:green       = "#5f8700"$/;"	v
s:green	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:green       = "#719e07" "experimental$/;"	v
s:green	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:green       = "2"$/;"	v
s:green	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:green       = "64"$/;"	v
s:green	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:green       = "DarkGreen"     " 2$/;"	v
s:grep_combine_flags	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:grep_combine_flags = '[aiIrhHEGPFnlLzocpWq]\\{-\\}'$/;"	v
s:grey	.vim/colors/twilight.vim	/^let s:grey = '#303030'$/;"	v
s:grey_blue	.vim/colors/twilight.vim	/^let s:grey_blue = '#8a9597'$/;"	v
s:grey_color	.vim/colors/jellybeans.vim	/^fun! s:grey_color(n)$/;"	f
s:grey_level	.vim/colors/jellybeans.vim	/^fun! s:grey_level(n)$/;"	f
s:grey_number	.vim/colors/jellybeans.vim	/^fun! s:grey_number(x)$/;"	f
s:group_not_done	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  def s:group_not_done(list: list<string>, name: string): bool$/;"	f
s:group_not_done	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  function! s:group_not_done(list, name) abort$/;"	f
s:gsub	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
s:gui	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^let s:gui = has('gui_running')$/;"	v
s:gui2cui	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  def s:gui2cui(rgb: string, fallback: string): string$/;"	f
s:gui2cui	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  function! s:gui2cui(rgb, fallback) abort$/;"	f
s:guisetcolor	.vim/colors/calmar256-dark.vim	/^function! s:guisetcolor(colarg)$/;"	f
s:guisetcolor	.vim/colors/calmar256-light.vim	/^function! s:guisetcolor(colarg)$/;"	f
s:handleLeftClick	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleLeftClick() abort$/;"	f
s:handleMiddleMouse	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleMiddleMouse() abort$/;"	f
s:handle_diff	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:handle_diff(options, exitval) abort$/;"	f
s:has_conceal	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^let s:has_conceal = has('conceal')$/;"	v
s:has_highlighting	.vim/pack/ide/start/syntastic/plugin/syntastic/highlighting.vim	/^let s:has_highlighting = v:version > 701 || (v:version == 701 && has('patch040'))$/;"	v
s:has_maven	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^let s:has_maven = 0$/;"	v
s:has_strcharpart	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^let s:has_strcharpart = exists('*strcharpart')$/;"	v
s:has_strchars	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^let s:has_strchars = exists('*strchars')$/;"	v
s:hash_colors	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:hash_colors = {}$/;"	v
s:head_cache	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:head_cache = {}$/;"	v
s:head_format	.vim/pack/ide/start/airline/autoload/airline/extensions/branch.vim	/^let s:head_format = get(g:, 'airline#extensions#branch#format', 0)$/;"	v
s:headntail	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:headntail(str)$/;"	f
s:hi	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^function! s:hi(item, fg, bg)$/;"	f
s:hibg	.vim/colors/vividchalk.vim	/^function! s:hibg(group,guibg,first,second)$/;"	f
s:hide_linenr	.vim/pack/ide/opt/goyo/autoload/goyo.vim	/^function! s:hide_linenr()$/;"	f
s:hide_statusline	.vim/pack/ide/opt/goyo/autoload/goyo.vim	/^function! s:hide_statusline()$/;"	f
s:hifg	.vim/colors/vividchalk.vim	/^function! s:hifg(group,guifg,first,second,...)$/;"	f
s:highlight	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:highlight(pat, grp)$/;"	f
s:highlight_groups	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:highlight_groups = ['hid', 0, '', 'sel', 'mod_unsel', 0, 'mod_unsel', 'mod']$/;"	v
s:highlight_groups	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:highlight_groups = ['hid', 0, '', 'sel', 'mod_unsel', 0, 'mod_unsel', 'mod']$/;"	v
s:hl_group_exists	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  def s:hl_group_exists(group: string): bool$/;"	f
s:hl_group_exists	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^  function! s:hl_group_exists(group) abort$/;"	f
s:hl_groups	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^let s:hl_groups = {}$/;"	v
s:hlgrps	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^let s:hlgrps = {$/;"	v
s:hunk_symbols	.vim/pack/ide/start/airline/autoload/airline/extensions/hunks.vim	/^let s:hunk_symbols = get(g:, 'airline#extensions#hunks#hunk_symbols', ['+', '~', '-'])$/;"	v
s:i	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:i           = ""$/;"	v
s:i	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:i           = ",italic"$/;"	v
s:iTerm_escape_template	.vim/pack/ide/start/airline/autoload/airline/extensions/cursormode.vim	/^let s:iTerm_escape_template = '\\033]Pl%s\\033\\\\'$/;"	v
s:ics	.vim/pack/ide/start/tagbar/syntax/tagbar.vim	/^let s:ics = escape(join(g:tagbar_iconchars, ''), ']^\\-')$/;"	v
s:id	.vim/pack/ide/start/ctrlp/autoload/ctrlp/bookmarkdir.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	.vim/pack/ide/start/ctrlp/autoload/ctrlp/buffertag.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	.vim/pack/ide/start/ctrlp/autoload/ctrlp/changes.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	.vim/pack/ide/start/ctrlp/autoload/ctrlp/dir.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	.vim/pack/ide/start/ctrlp/autoload/ctrlp/line.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mixed.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	.vim/pack/ide/start/ctrlp/autoload/ctrlp/quickfix.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	.vim/pack/ide/start/ctrlp/autoload/ctrlp/rtscript.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	.vim/pack/ide/start/ctrlp/autoload/ctrlp/tag.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	.vim/pack/ide/start/ctrlp/autoload/ctrlp/undo.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	.vim/pack/ide/start/tlib/autoload/tlib/progressbar.vim	/^let s:id = 0$/;"	v
s:id_counter	.vim/pack/ide/start/tlib/autoload/tlib/Object.vim	/^let s:id_counter = 0$/;"	v
s:ids	.vim/pack/ide/start/tlib/autoload/tlib/progressbar.vim	/^let s:ids = []$/;"	v
s:ifilter	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:ifilter(list, str)$/;"	f
s:ignore	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:ignore()$/;"	f
s:ignore_opt	.vim/colors/marklar.vim	/^    let s:ignore_opt = 1$/;"	v
s:ignore_time	.vim/pack/ide/start/airline/autoload/airline/extensions/lsp.vim	/^let s:ignore_time = 0$/;"	v
s:imports	.vim/pack/ide/start/syntastic/syntax_checkers/sass/sass.vim	/^    let s:imports = '--compass'$/;"	v
s:imports	.vim/pack/ide/start/syntastic/syntax_checkers/sass/sass.vim	/^let s:imports = ''$/;"	v
s:indexes	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:indexes = {}$/;"	v
s:init	.vim/pack/ide/start/airline/autoload/airline/extensions/tagbar.vim	/^let s:init=0$/;"	v
s:init	.vim/pack/ide/start/airline/plugin/airline.vim	/^function! s:init()$/;"	f
s:init	.vim/pack/ide/start/tcomment/autoload/tcomment/type.vim	/^let s:init = 0$/;"	v
s:initCustomOpenArgs	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:initCustomOpenArgs() abort$/;"	f
s:initFoldState	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:initFoldState(known_files) abort dict$/;"	f
s:init_buffer	.vim/pack/ide/start/airline/autoload/airline/extensions/branch.vim	/^function! s:init_buffer()$/;"	f
s:init_done	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:init_done = 0$/;"	v
s:init_pad	.vim/pack/ide/opt/goyo/autoload/goyo.vim	/^function! s:init_pad(command)$/;"	f
s:init_var	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^function! s:init_var(var, value) abort$/;"	f
s:initialize_buffer_job	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:initialize_buffer_job(bufnr, vcs) abort$/;"	f
s:initialize_job	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:initialize_job(bufnr, vcs) abort$/;"	f
s:inputPrompt	.vim/pack/ide/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:inputPrompt(action)$/;"	f
s:inputreplacement	.vim/pack/ide/start/surround/plugin/surround.vim	/^function! s:inputreplacement()$/;"	f
s:inputtarget	.vim/pack/ide/start/surround/plugin/surround.vim	/^function! s:inputtarget()$/;"	f
s:insert	.vim/pack/ide/start/surround/plugin/surround.vim	/^function! s:insert(...) " {{{1$/;"	f
s:insertcache	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:insertcache(str)$/;"	f
s:insertstr	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:insertstr()$/;"	f
s:invoke_funcrefs	.vim/pack/ide/start/airline/autoload/airline.vim	/^function! s:invoke_funcrefs(context, funcrefs)$/;"	f
s:isFoldable	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isFoldable() abort dict$/;"	f
s:isFoldable	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isFoldable() abort dict$/;"	f
s:isFolded	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isFolded() abort dict$/;"	f
s:isFolded	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isFolded() abort dict$/;"	f
s:isKindheader	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isKindheader() abort dict$/;"	f
s:isKindheader	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isKindheader() abort dict$/;"	f
s:isNormalTag	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isNormalTag() abort dict$/;"	f
s:isNormalTag	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:isNormalTag() abort dict$/;"	f
s:isPseudoTag	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isPseudoTag() abort dict$/;"	f
s:isPseudoTag	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:isPseudoTag() abort dict$/;"	f
s:isSplitTag	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isSplitTag() abort dict$/;"	f
s:isSplitTag	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! s:isSplitTag() abort dict$/;"	f
s:is_AppleTerminal	.vim/pack/ide/start/airline/autoload/airline/extensions/cursormode.vim	/^let s:is_AppleTerminal = exists('$TERM_PROGRAM') && $TERM_PROGRAM =~# 'Apple_Terminal'$/;"	v
s:is_branch_empty	.vim/pack/ide/start/airline/autoload/airline/extensions/hunks.vim	/^function! s:is_branch_empty() abort$/;"	f
s:is_cur_line_in_hunk	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:is_cur_line_in_hunk(hunkline) abort$/;"	f
s:is_excluded_window	.vim/pack/ide/start/airline/autoload/airline/extensions.vim	/^function! s:is_excluded_window()$/;"	f
s:is_good	.vim/pack/ide/start/airline/autoload/airline/extensions/cursormode.vim	/^let s:is_good = !has('gui_running') && !s:is_win && !s:is_AppleTerminal$/;"	v
s:is_iTerm	.vim/pack/ide/start/airline/autoload/airline/extensions/cursormode.vim	/^let s:is_iTerm = exists('$TERM_PROGRAM') && $TERM_PROGRAM =~# 'iTerm.app'$/;"	v
s:is_maximized	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:is_maximized    = 0$/;"	v
s:is_win	.vim/pack/ide/start/airline/autoload/airline/extensions/cursormode.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win32term	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^let s:is_win32term = (has('win32') || has('win64')) &&$/;"	v
s:isabs	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:isabs(path)$/;"	f
s:iscmdwin	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:iscmdwin()$/;"	f
s:ispathitem	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:ispathitem()$/;"	f
s:isterminal	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:isterminal(buf)$/;"	f
s:italic	.vim/colors/astronaut.vim	/^ let s:italic= ""$/;"	v
s:italic	.vim/colors/astronaut.vim	/^ let s:italic= ",italic"$/;"	v
s:item_pattern	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:item_pattern = s:file_commit_pattern . '\\|^@@'$/;"	v
s:job_id	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^let s:job_id = -1$/;"	v
s:jumpToChild	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToChild(node, last) abort$/;"	f
s:jumpToFirstChild	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToFirstChild(node) abort$/;"	f
s:jumpToLastChild	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToLastChild(node) abort$/;"	f
s:jumpToNextSibling	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToNextSibling(node) abort$/;"	f
s:jumpToParent	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToParent(node) abort$/;"	f
s:jumpToPrevSibling	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToPrevSibling(node) abort$/;"	f
s:jumpToRoot	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToRoot() abort$/;"	f
s:jumpToSibling	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToSibling(node, forward) abort$/;"	f
s:jump_to_tab	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:jump_to_tab(offset)$/;"	f
s:keyMaps	.vim/pack/ide/start/nerdtree/lib/nerdtree/key_map.vim	/^let s:keyMaps = {}$/;"	v
s:known_files	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^let s:known_files = []$/;"	v
s:known_files	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:known_files = {$/;"	v
s:known_files.get	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:known_files.get(fname) abort dict$/;"	f
s:known_files.has	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:known_files.has(fname) abort dict$/;"	f
s:known_files.put	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:known_files.put(fileinfo, ...) abort dict$/;"	f
s:known_files.rm	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:known_files.rm(fname) abort dict$/;"	f
s:known_projects	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^let s:known_projects = {}$/;"	v
s:kprange	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^let s:kprange = {$/;"	v
s:languageclient_refresh	.vim/pack/ide/start/airline/autoload/airline/extensions/languageclient.vim	/^function! s:languageclient_refresh()$/;"	f
s:lash	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:lash(...)$/;"	f
s:lash	.vim/pack/ide/start/ctrlp/autoload/ctrlp/utils.vim	/^fu! s:lash(...)$/;"	f
s:last_alt_bufnr	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:last_alt_bufnr = -1$/;"	v
s:last_highlight_tline	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:last_highlight_tline = 0$/;"	v
s:last_mode	.vim/pack/ide/start/airline/autoload/airline/extensions/cursormode.vim	/^let s:last_mode = ''$/;"	v
s:last_time	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:last_time = reltime()$/;"	v
s:last_times	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^  let s:last_times = {}$/;"	v
s:last_wildignores	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^let s:last_wildignores = ''$/;"	v
s:laststatus	.vim/pack/ide/start/tlib/autoload/tlib/progressbar.vim	/^let s:laststatus = []$/;"	v
s:lastvisual	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:lastvisual()$/;"	f
s:layout	.vim/pack/ide/start/airline/autoload/airline/extensions/default.vim	/^let s:layout = get(g:, 'airline#extensions#default#layout', [$/;"	v
s:lazycat_list	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^let s:lazycat_list=[$/;"	v
s:leavepre	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:leavepre()$/;"	f
s:legacy_airline_ale_get_line_number	.vim/pack/ide/start/airline/autoload/airline/extensions/ale.vim	/^function! s:legacy_airline_ale_get_line_number(cnt, type) abort$/;"	f
s:lenSpaceStr	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^let s:lenSpaceStr = strlen(s:spaceStr)$/;"	v
s:light	.vim/pack/ide/opt/seoul256/colors/seoul256-light.vim	/^let s:light     = s:custom_bg >= 252 && s:custom_bg <= 256$/;"	v
s:light_bg	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^  let s:light_bg = 253$/;"	v
s:light_bg	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^  let s:light_bg = get(s:, 'seoul256_background', 253)$/;"	v
s:light_bg_1	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^let s:light_bg_1 = min([s:light_bg + 1, 256])$/;"	v
s:light_bg_2	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^let s:light_bg_2 = min([s:light_bg + 2, 256])$/;"	v
s:light_fg	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^let s:light_fg = 239$/;"	v
s:light_grey_blue	.vim/colors/twilight.vim	/^let s:light_grey_blue = '#a0a8b0'$/;"	v
s:light_orange	.vim/colors/twilight.vim	/^let s:light_orange = '#ebc471'$/;"	v
s:light_var_found	.vim/pack/ide/opt/seoul256/colors/seoul256-light.vim	/^let s:light_var_found = exists('g:seoul256_light_background')$/;"	v
s:lightgreen	.vim/colors/twilight.vim	/^let s:lightgreen = '#c2c98f'$/;"	v
s:lightgrey	.vim/colors/twilight.vim	/^let s:lightgrey = '#605958'$/;"	v
s:linechars	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:linechars(pattern) abort$/;"	f
s:lineout	.vim/pack/ide/start/ctrlp/autoload/ctrlp/quickfix.vim	/^fu! s:lineout(dict)$/;"	f
s:load_project_patterns	.vim/pack/ide/start/ctrlp/autoload/ctrlp/autoignore.vim	/^function! s:load_project_patterns(root_dir) abort$/;"	f
s:loaded	.vim/pack/ide/start/airline/autoload/airline/init.vim	/^let s:loaded = 0$/;"	v
s:loaded_ext	.vim/pack/ide/start/airline/autoload/airline/extensions.vim	/^let s:loaded_ext = []$/;"	v
s:log	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:log(m)$/;"	f
s:log_diff_context	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:log_diff_context = '{"filename": fugitive#Find(v:val . from, a:dir), "lnum": get(offsets, /;"	v
s:low_color	.vim/colors/jellybeans.vim	/^	let s:low_color = 0$/;"	v
s:low_color	.vim/colors/jellybeans.vim	/^	let s:low_color = 1$/;"	v
s:lsCmd	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:lsCmd()$/;"	f
s:lsp_progress	.vim/pack/ide/start/airline/autoload/airline/extensions/lsp.vim	/^let s:lsp_progress = []$/;"	v
s:magenta	.vim/colors/astronaut.vim	/^ let s:magenta = "darkmagenta"$/;"	v
s:magenta	.vim/colors/astronaut.vim	/^ let s:magenta = "magenta"$/;"	v
s:magenta	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:magenta     = "#af005f"$/;"	v
s:magenta	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:magenta     = "#d33682"$/;"	v
s:magenta	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:magenta     = "125"$/;"	v
s:magenta	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:magenta     = "5"$/;"	v
s:magenta	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:magenta     = "DarkMagenta"   " 5$/;"	v
s:main	.vim/colors/marklar.vim	/^    function! s:main()$/;"	f
s:manual_update_tags	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! s:manual_update_tags(bang) abort$/;"	f
s:map_keys	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:map_keys()$/;"	f
s:mapkeys	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/xtabline.vim	/^        fun! s:mapkeys(keys, plug)$/;"	f
s:maps_nop	.vim/pack/ide/opt/goyo/autoload/goyo.vim	/^function! s:maps_nop()$/;"	f
s:maps_resize	.vim/pack/ide/opt/goyo/autoload/goyo.vim	/^function! s:maps_resize()$/;"	f
s:mark_window	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:mark_window() abort$/;"	f
s:master	.vim/pack/ide/opt/seoul256/colors/seoul256-light.vim	/^let s:master    = expand('<sfile>:p:h').'\/seoul256.vim'$/;"	v
s:match_window_opts	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:match_window_opts()$/;"	f
s:matchbuf	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:matchbuf(item, pat)$/;"	f
s:matchfname	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:matchfname(item, pat)$/;"	f
s:matchlens	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:matchlens(str, pat, ...)$/;"	f
s:matchlist	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/db.vim	/^let s:matchlist = []$/;"	v
s:matchtabe	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:matchtabe(item, pat)$/;"	f
s:matchtabs	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:matchtabs(item, pat)$/;"	f
s:max	.vim/pack/ide/start/ctrlp/autoload/ctrlp/dir.vim	/^fu! s:max(len, max)$/;"	f
s:max	.vim/pack/ide/start/tlib/autoload/tlib/progressbar.vim	/^let s:max = []$/;"	v
s:max_lnum	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/db.vim	/^let s:max_lnum = 0$/;"	v
s:maxf	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:maxf(len)$/;"	f
s:maybe_map_scope	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:maybe_map_scope(scopestr) abort$/;"	f
s:merge_heads	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:merge_heads = ['MERGE_HEAD', 'REBASE_HEAD', 'CHERRY_PICK_HEAD', 'REVERT_HEAD']$/;"	v
s:mergelists	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mrufiles.vim	/^fu! s:mergelists()$/;"	f
s:mfunc	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:mfunc()$/;"	f
s:mid_grey_blue	.vim/colors/twilight.vim	/^let s:mid_grey_blue = '#64686c'$/;"	v
s:mixedsort	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:mixedsort(...)$/;"	f
s:mixedsort2	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:mixedsort2(ct, ...)$/;"	f
s:mmode	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:mmode()$/;"	f
s:modemap	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^let s:modemap = g:SyntasticModeMap.Instance()$/;"	v
s:modevar	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:modevar()$/;"	f
s:modify	.vim/pack/ide/start/ctrlp/autoload/ctrlp/bookmarkdir.vim	/^fu! s:modify(entry, type)$/;"	f
s:molokai_original	.vim/colors/molokai.vim	/^    let s:molokai_original = 0$/;"	v
s:molokai_original	.vim/colors/molokai.vim	/^    let s:molokai_original = g:molokai_original$/;"	v
s:moria_fontface	.vim/colors/moria.vim	/^    let s:moria_fontface = "plain"$/;"	v
s:moria_fontface	.vim/colors/moria.vim	/^    let s:moria_fontface = g:moria_fontface$/;"	v
s:moria_monochrome	.vim/colors/moria.vim	/^    let s:moria_monochrome = 0$/;"	v
s:moria_monochrome	.vim/colors/moria.vim	/^    let s:moria_monochrome = g:moria_monochrome$/;"	v
s:moria_style	.vim/colors/moria.vim	/^    let s:moria_style = &background $/;"	v
s:moria_style	.vim/colors/moria.vim	/^    let s:moria_style = &background$/;"	v
s:moria_style	.vim/colors/moria.vim	/^    let s:moria_style = g:moria_style$/;"	v
s:mq_jobs	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^let s:mq_jobs        = {}$/;"	v
s:mruf_map_string	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mrufiles.vim	/^let s:mruf_map_string = '!stridx(v:val, cwd) ? strpart(v:val, idx) : v:val'$/;"	v
s:msg	.vim/pack/ide/start/ctrlp/autoload/ctrlp/bookmarkdir.vim	/^fu! s:msg(name, cwd)$/;"	f
s:mtype	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:mtype()$/;"	f
s:multipliers	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:multipliers(...)$/;"	f
s:n	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:n               = "NONE"$/;"	v
s:names	.vim/pack/ide/start/airline/autoload/airline/extensions/branch.vim	/^let s:names = {'0': 'index', '1': 'orig', '2':'fetch', '3':'merge'}$/;"	v
s:narrowable	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:narrowable()$/;"	f
s:native_filenames	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^let s:native_filenames = {}$/;"	v
s:nearby_disabled	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:nearby_disabled = 0$/;"	v
s:neoterm_id	.vim/pack/ide/start/airline/autoload/airline/extensions/term.vim	/^function! s:neoterm_id(bufnr) abort$/;"	f
s:new_airline_ale_get_line_number	.vim/pack/ide/start/airline/autoload/airline/extensions/ale.vim	/^function! s:new_airline_ale_get_line_number(cnt, type) abort$/;"	f
s:new_window	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:new_window      = 1$/;"	v
s:newcache	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mixed.vim	/^fu! s:newcache(cwd)$/;"	f
s:next_file	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/db.vim	/^let s:next_file = ''$/;"	v
s:next_sign_id	.vim/pack/ide/start/syntastic/plugin/syntastic/signs.vim	/^let s:next_sign_id = s:first_sign_id$/;"	v
s:nocache	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:nocache(...)$/;"	f
s:nocache	.vim/pack/ide/start/ctrlp/autoload/ctrlp/dir.vim	/^fu! s:nocache()$/;"	f
s:nocache	.vim/pack/ide/start/ctrlp/autoload/ctrlp/rtscript.vim	/^fu! s:nocache()$/;"	f
s:node_file	.vim/pack/ide/start/syntastic/syntax_checkers/less/lessc.vim	/^let s:node_file = 'node ' . syntastic#util#shescape(expand('<sfile>:p:h', 1) . syntastic#util#Sl/;"	v
s:nomodeline	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has("patch438"))) ? '<nomodeline>' :/;"	v
s:non_zero_only	.vim/pack/ide/start/airline/autoload/airline/extensions/hunks.vim	/^let s:non_zero_only = get(g:, 'airline#extensions#hunks#non_zero_only', 0)$/;"	v
s:none	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:none            = "NONE"$/;"	v
s:nosort	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:nosort()$/;"	f
s:nosplit	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:nosplit()$/;"	f
s:notifiers	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^let s:notifiers = g:SyntasticNotifiers.Instance()$/;"	v
s:nowait	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:nowait = v:version >= 704 ? '<nowait>' : ''$/;"	v
s:nowait	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^let s:nowait = v:version >= 704 ? '<nowait>' : ''$/;"	v
s:null_comment_string	.vim/pack/ide/start/tcomment/autoload/tcomment/vimoptions.vim	/^let s:null_comment_string    = '%s'$/;"	v
s:number_map	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:number_map = &encoding == 'utf-8'$/;"	v
s:number_map	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:number_map = {$/;"	v
s:nvim_job_exit_wrapper	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_exit_wrapper(real_cb, job, exit_code, event_type) abort$/;"	f
s:nvim_job_out_wrapper	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_out_wrapper(real_cb, job, lines, event_type) abort$/;"	f
s:nvim_mq_job_handler	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^  function! s:nvim_mq_job_handler(job_id, data, event) dict$/;"	f
s:nvim_output_handler	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^  function! s:nvim_output_handler(job_id, data, event) dict$/;"	f
s:nvim_po_job_handler	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^  function! s:nvim_po_job_handler(job_id, data, event) dict$/;"	f
s:nvim_untracked_job_handler	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^  function! s:nvim_untracked_job_handler(job_id, data, event) dict$/;"	f
s:ob	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:ob              = ""$/;"	v
s:offset	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:offset(lines, height)$/;"	f
s:offset	.vim/pack/ide/start/signify/autoload/sy/util.vim	/^function! s:offset() abort$/;"	f
s:old_cpo	.vim/pack/ide/start/nerdtree/plugin/NERD_tree.vim	/^let s:old_cpo = &cpoptions$/;"	v
s:on_colorscheme_changed	.vim/pack/ide/start/airline/plugin/airline.vim	/^function! s:on_colorscheme_changed()$/;"	f
s:on_cursor_moved	.vim/pack/ide/start/airline/plugin/airline.vim	/^function! s:on_cursor_moved()$/;"	f
s:on_exit_clean	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^function! s:on_exit_clean(...) dict abort$/;"	f
s:on_exit_mq	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^  function! s:on_exit_mq(channel) dict abort$/;"	f
s:on_exit_po	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^  function! s:on_exit_po(channel) dict abort$/;"	f
s:on_exit_untracked	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^  function! s:on_exit_untracked(channel) dict abort$/;"	f
s:on_focus_gained	.vim/pack/ide/start/airline/plugin/airline.vim	/^function! s:on_focus_gained()$/;"	f
s:on_stdout	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^  function! s:on_stdout(channel, msg) dict abort$/;"	f
s:on_window_changed	.vim/pack/ide/start/airline/plugin/airline.vim	/^function! s:on_window_changed(event)$/;"	f
s:one_time_notices_issued	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^let s:one_time_notices_issued = []$/;"	v
s:openExplorer	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openExplorer(node) abort$/;"	f
s:openFold	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:openFold() abort dict$/;"	f
s:openFold	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:openFold() abort dict$/;"	f
s:openHSplit	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplit(target) abort$/;"	f
s:openHSplitBookmark	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplitBookmark(bm) abort$/;"	f
s:openInNewTab	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTab(target) abort$/;"	f
s:openInNewTabSilent	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTabSilent(target) abort$/;"	f
s:openKindFold	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:openKindFold(kind) abort dict$/;"	f
s:openNodeRecursively	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openNodeRecursively(node) abort$/;"	f
s:openParents	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:openParents() abort dict$/;"	f
s:openVSplit	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplit(target) abort$/;"	f
s:openVSplitBookmark	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplitBookmark(bm) abort$/;"	f
s:openfile	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:openfile(cmd, fid, tail, chkmod, ...)$/;"	f
s:opfunc	.vim/pack/ide/start/surround/plugin/surround.vim	/^function! s:opfunc(type, ...) abort " {{{1$/;"	f
s:opfunc2	.vim/pack/ide/start/surround/plugin/surround.vim	/^function! s:opfunc2(...) abort$/;"	f
s:opt_x	.vim/pack/ide/start/syntastic/syntax_checkers/c/avrgcc.vim	/^let s:opt_x = { 'c': 'c', 'cpp': 'c++' }$/;"	v
s:option_list	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/opt.vim	/^let s:option_list = {$/;"	v
s:options	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/opt.vim	/^let s:options = {}$/;"	v
s:options_list	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^let s:options_list=[$/;"	v
s:opts	.vim/colors/marklar.vim	/^        let s:opts = {'bold': 0, 'ignore': 1}$/;"	v
s:opts	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:opts(...)$/;"	f
s:orange	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:orange      = "#cb4b16"$/;"	v
s:orange	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:orange      = "#d75f00"$/;"	v
s:orange	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:orange      = "166"$/;"	v
s:orange	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:orange      = "9"$/;"	v
s:orange	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:orange      = "LightRed"      " 1*$/;"	v
s:ou	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:ou              = ""$/;"	v
s:ou	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:ou          = ",underline"$/;"	v
s:parse_arg	.vim/pack/ide/opt/goyo/autoload/goyo.vim	/^function! s:parse_arg(arg)$/;"	f
s:parseline	.vim/pack/ide/start/ctrlp/autoload/ctrlp/buffertag.vim	/^fu! s:parseline(line)$/;"	f
s:parts	.vim/pack/ide/start/airline/autoload/airline/parts.vim	/^let s:parts = {}$/;"	v
s:parts	.vim/pack/ide/start/ctrlp/autoload/ctrlp/bookmarkdir.vim	/^fu! s:parts(str)$/;"	f
s:path_subcommands	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:path_subcommands = {}$/;"	v
s:pathshorten	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:pathshorten(str)$/;"	f
s:pattern	.vim/pack/ide/start/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=#\\([^-+# ]\\)\\@='$/;"	v
s:pattern	.vim/pack/ide/start/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=+\\([^-+# ]\\)\\@='$/;"	v
s:pattern	.vim/pack/ide/start/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=-\\([^-+# ]\\)\\@='$/;"	v
s:pattern	.vim/pack/ide/start/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . '][-+# ]\\?\\)\\@<=[^*(]\\+\\(\\*\\?\\(([^)]\\+)\\)\\? /;"	v
s:pattern	.vim/pack/ide/start/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(^[' . s:ics . '] \\?\\)\\@3<=[^-+: ]\\+[^:]\\+$'$/;"	v
s:pattern	.vim/pack/ide/start/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\S\\@<![' . s:ics . ']\\([-+# ]\\?\\)\\@='$/;"	v
s:paused	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:paused = 0$/;"	v
s:po_jobs	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^let s:po_jobs        = {}$/;"	v
s:po_output	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^function! s:po_output(buf, file)$/;"	f
s:popup_window	.vim/pack/ide/start/signify/autoload/sy/util.vim	/^let s:popup_window = 0$/;"	v
s:pre_ln	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/db.vim	/^let s:pre_ln = -1$/;"	v
s:prepare_env	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:prepare_env = {$/;"	v
s:prev_wildignore	.vim/pack/ide/start/ctrlp/autoload/ctrlp/autoignore.vim	/^let s:prev_wildignore = ''$/;"	v
s:previewBookmark	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewBookmark(bookmark) abort$/;"	f
s:previewNodeCurrent	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeCurrent(node) abort$/;"	f
s:previewNodeHSplit	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplit(node) abort$/;"	f
s:previewNodeHSplitBookmark	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplitBookmark(bookmark) abort$/;"	f
s:previewNodeVSplit	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplit(node) abort$/;"	f
s:previewNodeVSplitBookmark	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplitBookmark(bookmark) abort$/;"	f
s:print_opts	.vim/colors/marklar.vim	/^        function! s:print_opts(...)$/;"	f
s:procbar_dots	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^let s:procbar_dots = 0$/;"	v
s:process	.vim/pack/ide/start/ctrlp/autoload/ctrlp/bookmarkdir.vim	/^fu! s:process(entries, type)$/;"	f
s:process	.vim/pack/ide/start/ctrlp/autoload/ctrlp/buffertag.vim	/^fu! s:process(fname, ftype)$/;"	f
s:process	.vim/pack/ide/start/ctrlp/autoload/ctrlp/changes.vim	/^fu! s:process(clines, ...)$/;"	f
s:process	.vim/pack/ide/start/surround/plugin/surround.vim	/^function! s:process(string)$/;"	f
s:process_options_file	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^function! s:process_options_file(proj_dir, path) abort$/;"	f
s:proj_cache	.vim/pack/ide/start/ctrlp/autoload/ctrlp/autoignore.vim	/^let s:proj_cache = {}$/;"	v
s:promptToDelBuffer	.vim/pack/ide/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
s:prompt_snapshot_file	.vim/pack/ide/start/airline/autoload/airline/extensions/promptline.vim	/^let s:prompt_snapshot_file = get(g:, 'airline#extensions#promptline#snapshot_file', '')$/;"	v
s:prototype	.vim/pack/ide/start/airline/autoload/airline/builder.vim	/^let s:prototype = {}$/;"	v
s:prototype	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/builder.vim	/^let s:prototype = {}$/;"	v
s:prototype	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/builder.vim	/^let s:prototype.overflow_group = 'airline_tab'$/;"	v
s:prototype	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnf.vim	/^let s:prototype = tlib#Object#New({'_class': ['Filter_cnf'], 'name': 'cnf'}) "{{{2$/;"	v
s:prototype	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnf.vim	/^let s:prototype.highlight = g:tlib#input#higroup$/;"	v
s:prototype	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnfd.vim	/^let s:prototype = tlib#Filter_cnf#New({'_class': ['Filter_cnfd'], 'name': 'cnfd'}) "{{{2$/;"	v
s:prototype	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnfd.vim	/^let s:prototype.highlight = g:tlib#input#higroup$/;"	v
s:prototype	.vim/pack/ide/start/tlib/autoload/tlib/Filter_fuzzy.vim	/^let s:prototype = tlib#Filter_cnf#New({'_class': ['Filter_fuzzy'], 'name': 'fuzzy'}) "{{{2$/;"	v
s:prototype	.vim/pack/ide/start/tlib/autoload/tlib/Filter_fuzzy.vim	/^let s:prototype.highlight = g:tlib#input#higroup$/;"	v
s:prototype	.vim/pack/ide/start/tlib/autoload/tlib/Filter_glob.vim	/^let s:prototype = tlib#Filter_cnf#New({'_class': ['Filter_glob'], 'name': 'glob'}) "{{{2$/;"	v
s:prototype	.vim/pack/ide/start/tlib/autoload/tlib/Filter_glob.vim	/^let s:prototype.highlight = g:tlib#input#higroup$/;"	v
s:prototype	.vim/pack/ide/start/tlib/autoload/tlib/Object.vim	/^let s:prototype  = {'_class': ['object'], '_super': [], '_id': 0} "{{{2$/;"	v
s:prototype	.vim/pack/ide/start/tlib/autoload/tlib/Test.vim	/^let s:prototype = tlib#Object#New({'_class': ['Test']}) "{{{2$/;"	v
s:prototype	.vim/pack/ide/start/tlib/autoload/tlib/TestChild.vim	/^let s:prototype = tlib#Test#New({'_class': ['TestChild']}) "{{{2$/;"	v
s:prototype	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^let s:prototype = tlib#Object#New({$/;"	v
s:prototype.AssessName	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.AssessName(world, name) dict "{{{3$/;"	f
s:prototype.BuildTableList	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.BuildTableList() dict abort "{{{3$/;"	f
s:prototype.CleanFilter	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
s:prototype.CleanFilter	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnfd.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
s:prototype.CleanFilter	.vim/pack/ide/start/tlib/autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
s:prototype.CleanFilter	.vim/pack/ide/start/tlib/autoload/tlib/Filter_glob.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
s:prototype.CleanFilter	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.CleanFilter(filter) dict abort "{{{3$/;"	f
s:prototype.ClearAllMarks	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.ClearAllMarks() dict abort "{{{3$/;"	f
s:prototype.CloseScratch	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.CloseScratch(...) dict abort "{{{3$/;"	f
s:prototype.CurrentItem	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.CurrentItem() dict abort "{{{3$/;"	f
s:prototype.DisplayFilter	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.DisplayFilter(filter) dict "{{{3$/;"	f
s:prototype.DisplayFilter	.vim/pack/ide/start/tlib/autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.DisplayFilter(filter) dict "{{{3$/;"	f
s:prototype.DisplayFilter	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.DisplayFilter() dict abort "{{{3$/;"	f
s:prototype.DisplayFormat	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.DisplayFormat(list) dict abort "{{{3$/;"	f
s:prototype.DisplayHelp	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.DisplayHelp() dict abort "{{{3$/;"	f
s:prototype.DisplayList	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.DisplayList(...) dict abort "{{{3$/;"	f
s:prototype.DisplayListMark	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.DisplayListMark(x, y, mark) dict abort "{{{3$/;"	f
s:prototype.Dummy	.vim/pack/ide/start/tlib/autoload/tlib/Test.vim	/^function! s:prototype.Dummy() dict "{{{3$/;"	f
s:prototype.Dummy	.vim/pack/ide/start/tlib/autoload/tlib/TestChild.vim	/^function! s:prototype.Dummy() dict "{{{3$/;"	f
s:prototype.Extend	.vim/pack/ide/start/tlib/autoload/tlib/Object.vim	/^function! s:prototype.Extend(dictionary) dict "{{{3$/;"	f
s:prototype.FilterIsEmpty	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.FilterIsEmpty() dict abort "{{{3$/;"	f
s:prototype.FilterRxPrefix	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.FilterRxPrefix() dict "{{{3$/;"	f
s:prototype.FilterRxPrefix	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.FilterRxPrefix() dict abort "{{{3$/;"	f
s:prototype.FollowCursor	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.FollowCursor() dict abort "{{{3$/;"	f
s:prototype.FormatArgs	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.FormatArgs(format_string, arg) dict abort "{{{3$/;"	f
s:prototype.FormatBaseFromData	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.FormatBaseFromData() abort dict "{{{3$/;"	f
s:prototype.FormatFilename	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^    function! s:prototype.FormatFilename(file) dict abort "{{{3$/;"	f
s:prototype.FormatName	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.FormatName(cache, format, value) dict abort "{{{3$/;"	f
s:prototype.GetBaseIdx	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.GetBaseIdx(idx) dict abort "{{{3$/;"	f
s:prototype.GetBaseIdx0	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.GetBaseIdx0(idx) dict abort "{{{3$/;"	f
s:prototype.GetBaseItem	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.GetBaseItem(idx) dict abort "{{{3$/;"	f
s:prototype.GetItem	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.GetItem(idx) dict abort "{{{3$/;"	f
s:prototype.GetLineIdx	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.GetLineIdx(lnum) dict abort "{{{3$/;"	f
s:prototype.GetListIdx	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.GetListIdx(baseidx) dict abort "{{{3$/;"	f
s:prototype.GetResize	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.GetResize(size) dict abort "{{{3$/;"	f
s:prototype.GetRx	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.GetRx(filter) dict abort "{{{3$/;"	f
s:prototype.GetRx0	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.GetRx0(...) dict abort "{{{3$/;"	f
s:prototype.GetSelectedItems	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.GetSelectedItems(current) dict abort "{{{3$/;"	f
s:prototype.Help	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.Help(world) dict "{{{3$/;"	f
s:prototype.Help	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnfd.vim	/^function! s:prototype.Help(world) dict "{{{3$/;"	f
s:prototype.Help	.vim/pack/ide/start/tlib/autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.Help(world) dict "{{{3$/;"	f
s:prototype.Help	.vim/pack/ide/start/tlib/autoload/tlib/Filter_glob.vim	/^function! s:prototype.Help(world) dict "{{{3$/;"	f
s:prototype.Highlight_filename	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^    function! s:prototype.Highlight_filename() dict abort "{{{3$/;"	f
s:prototype.Inherit	.vim/pack/ide/start/tlib/autoload/tlib/Object.vim	/^function! s:prototype.Inherit(object) dict "{{{3$/;"	f
s:prototype.Init	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.Init(world) dict "{{{3$/;"	f
s:prototype.Init	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnfd.vim	/^function! s:prototype.Init(world) dict "{{{3$/;"	f
s:prototype.Init	.vim/pack/ide/start/tlib/autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.Init(world) dict "{{{3$/;"	f
s:prototype.InitFormatName	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^    function! s:prototype.InitFormatName() dict abort "{{{3 $/;"	f
s:prototype.InitHelp	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.InitHelp() dict abort "{{{3$/;"	f
s:prototype.Initialize	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.Initialize() dict abort "{{{3$/;"	f
s:prototype.IsA	.vim/pack/ide/start/tlib/autoload/tlib/Object.vim	/^function! s:prototype.IsA(class) dict "{{{3$/;"	f
s:prototype.IsRelated	.vim/pack/ide/start/tlib/autoload/tlib/Object.vim	/^function! s:prototype.IsRelated(object) dict "{{{3$/;"	f
s:prototype.IsValidFilter	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.IsValidFilter() dict abort "{{{3$/;"	f
s:prototype.Leave	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.Leave() dict abort "{{{3$/;"	f
s:prototype.MarkCurrent	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.MarkCurrent(y) dict abort "{{{3$/;"	f
s:prototype.Match	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.Match(world, text) dict "{{{3$/;"	f
s:prototype.MatchBaseIdx	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.MatchBaseIdx(idx) dict abort "{{{3$/;"	f
s:prototype.New	.vim/pack/ide/start/tlib/autoload/tlib/Object.vim	/^function! s:prototype.New(...) dict "{{{3$/;"	f
s:prototype.PopFilter	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.PopFilter() dict abort "{{{3$/;"	f
s:prototype.Pretty	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.Pretty(filter) dict "{{{3$/;"	f
s:prototype.PrintLines	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.PrintLines() dict abort "{{{3$/;"	f
s:prototype.PushFrontFilter	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/;"	f
s:prototype.PushFrontFilter	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnfd.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/;"	f
s:prototype.PushFrontFilter	.vim/pack/ide/start/tlib/autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/;"	f
s:prototype.PushFrontFilter	.vim/pack/ide/start/tlib/autoload/tlib/Filter_glob.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/;"	f
s:prototype.PushFrontFilter	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.PushFrontFilter(char) dict abort "{{{3$/;"	f
s:prototype.PushHelp	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.PushHelp(...) dict abort "{{{3$/;"	f
s:prototype.Query	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.Query() dict abort "{{{3$/;"	f
s:prototype.ReduceFilter	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.ReduceFilter() dict abort "{{{3$/;"	f
s:prototype.ReduceFrontFilter	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.ReduceFrontFilter(world) dict "{{{3$/;"	f
s:prototype.ReduceFrontFilter	.vim/pack/ide/start/tlib/autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.ReduceFrontFilter(world) dict "{{{3$/;"	f
s:prototype.Reset	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.Reset(...) dict abort "{{{3$/;"	f
s:prototype.ResetSelected	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.ResetSelected() dict abort "{{{3$/;"	f
s:prototype.Resize	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.Resize(hsize, vsize) dict abort "{{{3$/;"	f
s:prototype.RespondTo	.vim/pack/ide/start/tlib/autoload/tlib/Object.vim	/^function! s:prototype.RespondTo(name) dict "{{{3$/;"	f
s:prototype.RestoreOrigin	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.RestoreOrigin(...) dict abort "{{{3$/;"	f
s:prototype.RestoreWindow	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.RestoreWindow(...) dict abort "{{{3$/;"	f
s:prototype.Retrieve	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.Retrieve(anyway) dict abort "{{{3$/;"	f
s:prototype.ScrollToOffset	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.ScrollToOffset() dict abort "{{{3$/;"	f
s:prototype.SelectItem	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.SelectItem(mode, index) dict abort "{{{3$/;"	f
s:prototype.SelectItemsByNames	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.SelectItemsByNames(mode, items) dict abort "{{{3$/;"	f
s:prototype.SetBaseItem	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.SetBaseItem(idx, item) dict abort "{{{3$/;"	f
s:prototype.SetFilter	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.SetFilter() dict abort "{{{3$/;"	f
s:prototype.SetFrontFilter	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/;"	f
s:prototype.SetFrontFilter	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnfd.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/;"	f
s:prototype.SetFrontFilter	.vim/pack/ide/start/tlib/autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/;"	f
s:prototype.SetFrontFilter	.vim/pack/ide/start/tlib/autoload/tlib/Filter_glob.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/;"	f
s:prototype.SetFrontFilter	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.SetFrontFilter(pattern) dict abort "{{{3$/;"	f
s:prototype.SetInitialFilter	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.SetInitialFilter(filter) dict abort "{{{3$/;"	f
s:prototype.SetMatchMode	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.SetMatchMode(match_mode) dict abort "{{{3$/;"	f
s:prototype.SetOffset	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.SetOffset() dict abort "{{{3$/;"	f
s:prototype.SetOrigin	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.SetOrigin(...) dict abort "{{{3$/;"	f
s:prototype.SetPrefIdx	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.SetPrefIdx() dict abort "{{{3$/;"	f
s:prototype.SetStatusline	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.SetStatusline(query) dict abort "{{{3$/;"	f
s:prototype.Set_display_format	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.Set_display_format(value) dict abort "{{{3$/;"	f
s:prototype.Set_highlight_filename	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.Set_highlight_filename() dict abort "{{{3$/;"	f
s:prototype.Super	.vim/pack/ide/start/tlib/autoload/tlib/Object.vim	/^function! s:prototype.Super(method, arglist) dict "{{{3$/;"	f
s:prototype.Suspend	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.Suspend() dict abort "{{{3$/;"	f
s:prototype.SwitchWindow	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.SwitchWindow(where) dict abort "{{{3$/;"	f
s:prototype.UseFilenameIndicators	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^    function! s:prototype.UseFilenameIndicators() dict abort "{{{3$/;"	f
s:prototype.UseInputListScratch	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.UseInputListScratch() dict abort "{{{3$/;"	f
s:prototype.UseScratch	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! s:prototype.UseScratch() dict abort "{{{3$/;"	f
s:prototype.add_raw	.vim/pack/ide/start/airline/autoload/airline/builder.vim	/^function! s:prototype.add_raw(text) dict$/;"	f
s:prototype.add_section	.vim/pack/ide/start/airline/autoload/airline/builder.vim	/^function! s:prototype.add_section(group, contents) dict$/;"	f
s:prototype.add_section_spaced	.vim/pack/ide/start/airline/autoload/airline/builder.vim	/^function! s:prototype.add_section_spaced(group, contents) dict$/;"	f
s:prototype.build	.vim/pack/ide/start/airline/autoload/airline/builder.vim	/^function! s:prototype.build() dict$/;"	f
s:prototype.build	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:prototype.build() dict$/;"	f
s:prototype.get_position	.vim/pack/ide/start/airline/autoload/airline/builder.vim	/^function! s:prototype.get_position() dict$/;"	f
s:prototype.insert_raw	.vim/pack/ide/start/airline/autoload/airline/builder.vim	/^function! s:prototype.insert_raw(text, position) dict$/;"	f
s:prototype.insert_section	.vim/pack/ide/start/airline/autoload/airline/builder.vim	/^function! s:prototype.insert_section(group, contents, position) dict$/;"	f
s:prototype.insert_titles	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:prototype.insert_titles(current, first, last) dict$/;"	f
s:prototype.split	.vim/pack/ide/start/airline/autoload/airline/builder.vim	/^function! s:prototype.split(...) dict$/;"	f
s:prototype.try_insert_title	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:prototype.try_insert_title(index, group, pos, sep_size, force) dict$/;"	f
s:pwin_by_tagbar	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:pwin_by_tagbar = 0$/;"	v
s:pylint_new	.vim/pack/ide/start/syntastic/syntax_checkers/python/pylint.vim	/^let s:pylint_new = -1$/;"	v
s:quiet_warnings	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^            let s:quiet_warnings = [s:quiet_warnings]$/;"	v
s:quiet_warnings	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^        let s:quiet_warnings = get(g:syntastic_quiet_messages, 'type', [])$/;"	v
s:r	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:r               = ",reverse"$/;"	v
s:rand	.vim/pack/ide/start/airline/plugin/airline.vim	/^function! s:rand(max) abort$/;"	f
s:random_theme	.vim/pack/ide/start/airline/plugin/airline.vim	/^function! s:random_theme() abort$/;"	f
s:rebase_abbrevs	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:rebase_abbrevs = {$/;"	v
s:record	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mrufiles.vim	/^fu! s:record(bufnr)$/;"	f
s:record_diagnostics	.vim/pack/ide/start/airline/autoload/airline/extensions/languageclient.vim	/^function! s:record_diagnostics(state)$/;"	f
s:red	.vim/colors/astronaut.vim	/^ let s:red     = "darkred"$/;"	v
s:red	.vim/colors/astronaut.vim	/^ let s:red     = "red"$/;"	v
s:red	.vim/colors/twilight.vim	/^let s:red = '#d08356'$/;"	v
s:red	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:red         = "#af0000"$/;"	v
s:red	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:red         = "#dc322f"$/;"	v
s:red	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:red         = "1"$/;"	v
s:red	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:red         = "124"$/;"	v
s:red	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:red         = "DarkRed"       " 1$/;"	v
s:redraw	.vim/pack/ide/start/surround/plugin/surround.vim	/^function! s:redraw()$/;"	f
s:ref_header	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:ref_header = '\\%(Merge\\|Rebase\\|Upstream\\|Pull\\|Push\\)'$/;"	v
s:reformat	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mrufiles.vim	/^fu! s:reformat(mrufs, ...)$/;"	f
s:refreshCurrent	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshCurrent(node) abort$/;"	f
s:refreshRoot	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshRoot() abort$/;"	f
s:regexfilter	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:regexfilter(str)$/;"	f
s:regisfilter	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:regisfilter(reg)$/;"	f
s:register	.vim/pack/ide/start/tlib/autoload/tlib/signs.vim	/^let s:register = {}$/;"	v
s:registry	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^let s:registry = g:SyntasticRegistry.Instance()$/;"	v
s:reindent	.vim/pack/ide/start/surround/plugin/surround.vim	/^function! s:reindent() " {{{1$/;"	f
s:relsz	.vim/pack/ide/opt/goyo/autoload/goyo.vim	/^function! s:relsz(expr, limit)$/;"	f
s:remarksigns	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:remarksigns()$/;"	f
s:remote_headers	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:remote_headers = {}$/;"	v
s:removeChild	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:removeChild(tag) dict abort$/;"	f
s:removeTag	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:removeTag(tag) dict abort$/;"	f
s:renameBuffer	.vim/pack/ide/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:renameBuffer(bufNum, newNodeName, isDirectory)$/;"	f
s:rendered_match	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^let s:rendered_match = 0$/;"	v
s:rendered_par	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/view.vim	/^let s:rendered_par = 0$/;"	v
s:replace	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:replace(cmd, pat, sub)$/;"	f
s:repo_bare	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:repo_bare() dict abort$/;"	f
s:repo_config	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:repo_config(name) dict abort$/;"	f
s:repo_dir	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:repo_dir(...) dict abort$/;"	f
s:repo_find	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:repo_find(object) dict abort$/;"	f
s:repo_git_chomp	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:repo_git_chomp(...) dict abort$/;"	f
s:repo_git_chomp_in_tree	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:repo_git_chomp_in_tree(...) dict abort$/;"	f
s:repo_git_command	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:repo_git_command(...) dict abort$/;"	f
s:repo_head	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:repo_head(...) dict abort$/;"	f
s:repo_prototype	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:repo_prototype = {}$/;"	v
s:repo_rev_parse	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:repo_rev_parse(rev) dict abort$/;"	f
s:repo_superglob	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:repo_superglob(base) dict abort$/;"	f
s:repo_translate	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:repo_translate(rev) dict abort$/;"	f
s:repo_tree	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:repo_tree(...) dict abort$/;"	f
s:repo_user	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:repo_user() dict abort$/;"	f
s:repos	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:repos = {}$/;"	v
s:reset	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:reset() abort dict$/;"	f
s:reset_untracked_cache	.vim/pack/ide/start/airline/autoload/airline/extensions/branch.vim	/^function! s:reset_untracked_cache(shellcmdpost)$/;"	f
s:resize_pads	.vim/pack/ide/opt/goyo/autoload/goyo.vim	/^function! s:resize_pads()$/;"	f
s:restoreframecmd	.vim/pack/ide/start/tlib/autoload/tlib/vim.vim	/^let s:restoreframecmd = ''$/;"	v
s:resultset	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/db.vim	/^let s:resultset = []$/;"	v
s:resume_queue	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^  let s:resume_queue = []$/;"	v
s:reuseWin	.vim/pack/ide/start/nerdtree/autoload/nerdtree.vim	/^function! s:reuseWin(dir) abort$/;"	f
s:rgb	.vim/colors/jellybeans.vim	/^fun! s:rgb(rgb)$/;"	f
s:rgb_color	.vim/colors/jellybeans.vim	/^fun! s:rgb_color(x, y, z)$/;"	f
s:rgb_level	.vim/colors/jellybeans.vim	/^fun! s:rgb_level(n)$/;"	f
s:rgb_map	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^        let s:rgb_map =$/;"	v
s:rgb_number	.vim/colors/jellybeans.vim	/^fun! s:rgb_number(x)$/;"	f
s:rootNERDTreePath	.vim/pack/ide/start/nerdtree/autoload/nerdtree.vim	/^let s:rootNERDTreePath = resolve(expand('<sfile>:p:h:h'))$/;"	v
s:rst2pseudoxml	.vim/pack/ide/start/syntastic/syntax_checkers/rst/rst2pseudoxml.vim	/^let s:rst2pseudoxml = (executable('rst2pseudoxml.py') && !syntastic#util#isRunningWindows()) ? '/;"	v
s:run	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:run(vcs)$/;"	f
s:run_jobs	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:run_jobs = (exists('*job_start') || exists('*jobstart')) && exists('*bufwinid')$/;"	v
s:run_system	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:run_system(cmd, version) abort$/;"	f
s:runner_exe	.vim/pack/ide/start/gutentags/autoload/gutentags/cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:runner_exe	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^let s:runner_exe = '"' . gutentags#get_plat_file('update_tags') . '"'$/;"	v
s:s	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:s               = ",standout"$/;"	v
s:safe_printf	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:safe_printf(format, ...)$/;"	f
s:samerootsyml	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:samerootsyml(each, isfile, cwd)$/;"	f
s:samples	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/profile.vim	/^let s:samples = []$/;"	v
s:sanstail	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:sanstail(str)$/;"	f
s:sass_cache_location	.vim/pack/ide/start/syntastic/syntax_checkers/sass/sass.vim	/^let s:sass_cache_location = syntastic#util#tmpdir()$/;"	v
s:save_cpo	.vim/colors/calmar256-dark.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/colors/calmar256-light.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/airline/plugin/airline.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/autoload/syntastic/c.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/autoload/syntastic/postprocess.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/actionscript/mxmlc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/ada/gcc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/ansible/ansible_lint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/apiblueprint/drafter.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/applescript/osacompile.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/asciidoc/asciidoc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/asl/iasl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/asm/gcc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/bemhtml/bemhtmllint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/bro/bro.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/c/avrgcc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/c/checkpatch.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/c/clang_check.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/c/clang_tidy.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/c/cppcheck.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/c/cppclean.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/c/flawfinder.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/c/gcc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/c/make.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/c/oclint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/c/pc_lint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/c/sparse.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/c/splint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/cabal/cabal.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/chef/foodcritic.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/cmake/cmakelint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/co/coco.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/cobol/cobc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/coffee/coffee.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/coffee/coffee_jshint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/coffee/coffeelint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/coq/coqtop.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/cpp/cpplint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/cpp/gcc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/cpp/verapp.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/cs/mcs.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/css/csslint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/css/prettycss.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/css/stylelint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/cucumber/cucumber.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/cuda/nvcc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/d/dmd.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/d/dscanner.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/dart/dartanalyzer.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/docbk/igor.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/dockerfile/dockerfile_lint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/dockerfile/hadolint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/dustjs/swiffer.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/elixir/elixir.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/escript.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/syntaxerl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/eruby/ruby.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/fortran/gfortran.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/glsl/cgc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/go/go.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/go/gofmt.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/go/golangci_lint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/go/golint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/go/gometalinter.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/go/gotype.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/go/govet.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/haml/haml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/haml/haml_lint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/handlebars/handlebars.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/haskell/hdevtools.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/haskell/hlint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/haskell/scan.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/haxe/haxe.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/hss/hss.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/html/htmlhint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/html/jshint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/html/tidy.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/html/validator.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/html/w3.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/java/checkstyle.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/closurecompiler.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/eslint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/flow.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/gjslint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/jscs.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/jshint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/jsl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/jslint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/jsxhint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/lynt.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/mixedindentlint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/standard.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/javascript/tern_lint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/json/jsonlint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/json/jsonval.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/less/lessc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/less/recess.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/lex/flex.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/limbo/limbo.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/lisp/clisp.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/llvm/llvm.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/lua/luac.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/lua/luacheck.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/markdown/mdl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/markdown/remark_lint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/matlab/mlint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/mercury/mmc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/nasm/nasm.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/nix/nix.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/nroff/mandoc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/objc/gcc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/objcpp/gcc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/perl/perl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/perl/perlcritic.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/php/php.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/php/phpcs.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/php/phplint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/php/phpmd.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/php/phpstan.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/po/dennis.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/po/msgfmt.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/pod/podchecker.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/pug/pug_lint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/puppet/puppet.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/puppet/puppetlint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/python/bandit.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/python/flake8.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/python/frosted.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/python/mypy.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/python/prospector.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/python/py3kwarn.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/python/pycodestyle.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/python/pydocstyle.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/python/pyflakes.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/python/pylama.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/python/pylint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/python/python.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/qml/qmllint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/r/lint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/r/lintr.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/r/svtools.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/racket/code-ayatollah.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/racket/racket.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/raku/raku.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/rnc/rnv.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/rst/rst2pseudoxml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/rst/rstcheck.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/rst/sphinx.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/flog.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/jruby.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/macruby.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/mri.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/reek.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/rubocop.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/rubylint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/ruby/sorbet.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/sass/sass.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/sass/sass_lint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/sass/sassc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/scala/fsc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/scala/scalac.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/scala/scalastyle.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/scss/scss_lint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/sh/bashate.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/sh/checkbashisms.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/sh/sh.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/sh/shellcheck.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/sh/shfmt.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/slim/slim_lint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/slim/slimrb.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/sml/smlnj.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/solidity/solc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/solidity/solhint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/solidity/solium.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/spec/rpmlint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/sql/sqlint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/sql/tsqllint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/stylus/stylint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/tcl/nagelfar.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/tex/chktex.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/tex/lacheck.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/texinfo/makeinfo.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/text/atdtool.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/text/language_check.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/text/proselint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/text/textlint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/turtle/rapper.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/turtle/ttl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/twig/twigcs.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/twig/twiglint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/typescript/tslint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/verilog/iverilog.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/verilog/verilator.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/vhdl/ghdl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/vhdl/vcom.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/vim/vimlint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/vim/vint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/vue/pug_lint_vue.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/xhtml/tidy.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/xml/plutil.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/xml/xmllint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/xquery/basex.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/yacc/bison.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/yaml/jsyaml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/yaml/yamllint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/yaml/yamlxs.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/yang/pyang.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/yara/yara.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/z80/z80syntaxchecker.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/zpt/zptlint.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/syntastic/syntax_checkers/zsh/zsh.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/tcomment/plugin/tcomment.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/tlib/autoload/tlib/map.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/tlib/autoload/tlib/normal.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/tlib/autoload/tlib/notify.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/tlib/autoload/tlib/paragraph.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/tlib/autoload/tlib/signs.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/tlib/autoload/tlib/textobjects.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/tlib/macros/tlib.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/tlib/plugin/02tlib.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/tlib/spec/tlib/arg.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/tlib/spec/tlib/dictionary.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/tlib/spec/tlib/eval.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/tlib/spec/tlib/file.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/tlib/spec/tlib/input.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/tlib/spec/tlib/list.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/tlib/spec/tlib/rx.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/tlib/spec/tlib/string.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/tlib/spec/tlib/url.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/pack/ide/start/tlib/spec/tlib/var.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugin/bufkill.vim	/^let s:save_cpo = &cpo$/;"	v
s:savebookmark	.vim/pack/ide/start/ctrlp/autoload/ctrlp/bookmarkdir.vim	/^fu! s:savebookmark(name, cwd)$/;"	f
s:savetofile	.vim/pack/ide/start/ctrlp/autoload/ctrlp/mrufiles.vim	/^fu! s:savetofile(mrufs)$/;"	f
s:scanned_files	.vim/pack/ide/start/addon-mw-utils/autoload/cached_file_contents.vim	/^let s:scanned_files = s:c['scanned_files']$/;"	v
s:schemas	.vim/pack/ide/start/tlib/autoload/tlib/type.vim	/^let s:schemas = {}$/;"	v
s:script_path	.vim/pack/ide/start/airline/autoload/airline/extensions.vim	/^let s:script_path = tolower(resolve(expand('<sfile>:p:h')))$/;"	v
s:scriptfile	.vim/pack/ide/start/tlib/spec/tlib/hash.vim	/^    let s:scriptfile = matchstr(s:script, '^\\s*\\d\\+:\\s\\+\\zs.*$')$/;"	v
s:scriptlines	.vim/pack/ide/start/tlib/spec/tlib/hash.vim	/^        let s:scriptlines = readfile(s:scriptfile)$/;"	v
s:search_term	.vim/pack/ide/start/airline/autoload/airline/extensions/searchcount.vim	/^function! s:search_term()$/;"	f
s:searchfor	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^  function! s:searchfor(str, line, col, direction, ...) abort$/;"	f
s:section_a	.vim/pack/ide/start/airline/autoload/airline/extensions/term.vim	/^let s:section_a = airline#section#create_left(['terminal', 'tmode'])$/;"	v
s:section_commit_pattern	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:section_commit_pattern = s:section_pattern . '\\|^commit '$/;"	v
s:section_is_empty	.vim/pack/ide/start/airline/autoload/airline/builder.vim	/^function! s:section_is_empty(self, content)$/;"	f
s:section_pattern	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:section_pattern = '^[A-Z][a-z][^:]*$'$/;"	v
s:section_truncate_width	.vim/pack/ide/start/airline/autoload/airline/extensions/default.vim	/^let s:section_truncate_width = get(g:, 'airline#extensions#default#section_truncate_width', {$/;"	v
s:section_use_groups	.vim/pack/ide/start/airline/autoload/airline/extensions/default.vim	/^let s:section_use_groups     = get(g:, 'airline#extensions#default#section_use_groupitems', 1)$/;"	v
s:section_z	.vim/pack/ide/start/airline/autoload/airline/extensions/term.vim	/^let s:section_z = airline#section#create(['linenr', 'maxlinenr'])$/;"	v
s:sections	.vim/pack/ide/start/airline/autoload/airline.vim	/^let s:sections = ['a','b','c','gutter','x','y','z', 'error', 'warning']$/;"	v
s:sections	.vim/pack/ide/start/airline/t/init.vim	/^let s:sections = ['a', 'b', 'c', 'gutter', 'x', 'y', 'z', 'warning']$/;"	v
s:select_tab	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:select_tab(buf_index)$/;"	f
s:seoul256_background	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^  let s:seoul256_background = g:seoul256_background$/;"	v
s:separators	.vim/pack/ide/start/airline/autoload/airline/highlighter.vim	/^let s:separators = {}$/;"	v
s:setFolded	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:setFolded(folded) abort dict$/;"	f
s:set_clean_jobs_variable	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^function! s:set_clean_jobs_variable(vcs, file, id)$/;"	f
s:set_clean_variables	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^function! s:set_clean_variables(file, vcs, val)$/;"	f
s:set_color	.vim/pack/ide/opt/goyo/autoload/goyo.vim	/^function! s:set_color(group, attr, color)$/;"	f
s:set_cursor_color_for	.vim/pack/ide/start/airline/autoload/airline/extensions/cursormode.vim	/^function! s:set_cursor_color_for(mode)$/;"	f
s:setbufline	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/buf.vim	/^func! s:setbufline(buf_name, lnum, content) abort$/;"	f
s:setentries	.vim/pack/ide/start/ctrlp/autoload/ctrlp/bookmarkdir.vim	/^fu! s:setentries()$/;"	f
s:setlines_post	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:setlines_post()$/;"	f
s:setlines_pre	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:setlines_pre(...)$/;"	f
s:settype	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:settype(type)$/;"	f
s:setup_done	.vim/pack/ide/start/syntastic/plugin/syntastic/highlighting.vim	/^let s:setup_done = 0$/;"	v
s:setup_done	.vim/pack/ide/start/syntastic/plugin/syntastic/signs.vim	/^let s:setup_done = 0$/;"	v
s:setup_keymaps	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^function! s:setup_keymaps() abort$/;"	f
s:setup_options	.vim/pack/ide/start/tagbar/plugin/tagbar.vim	/^function! s:setup_options() abort$/;"	f
s:setup_pad	.vim/pack/ide/opt/goyo/autoload/goyo.vim	/^function! s:setup_pad(bufnr, vert, size, repel)$/;"	f
s:setupblank	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:setupblank()$/;"	f
s:severity_error	.vim/pack/ide/start/airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_error = 1$/;"	v
s:severity_hint	.vim/pack/ide/start/airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_hint = 4$/;"	v
s:severity_info	.vim/pack/ide/start/airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_info = 3$/;"	v
s:severity_warning	.vim/pack/ide/start/airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_warning = 2$/;"	v
s:sh_autocmd_handler	.vim/pack/ide/start/airline/autoload/airline/extensions/branch.vim	/^function! s:sh_autocmd_handler()$/;"	f
s:sh_autocmd_handler	.vim/pack/ide/start/airline/autoload/airline/extensions/fugitiveline.vim	/^function! s:sh_autocmd_handler()$/;"	f
s:sha1size	.vim/pack/ide/start/airline/autoload/airline/extensions/branch.vim	/^let s:sha1size = get(g:, 'airline#extensions#branch#sha1_len', 7)$/;"	v
s:shellesc	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:shellesc(arg) abort$/;"	f
s:short_help	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:short_help      = 1$/;"	v
s:shortest	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:shortest(lens)$/;"	f
s:showMenu	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:showMenu(node) abort$/;"	f
s:show_buffers	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/autoshow.vim	/^let s:show_buffers = get(g:, 'airline#extensions#tabline#show_buffers', 1)$/;"	v
s:show_line_numbers	.vim/pack/ide/start/airline/autoload/airline/extensions/languageclient.vim	/^let s:show_line_numbers = get(g:, 'airline#extensions#languageclient#show_line_numbers', 1)$/;"	v
s:show_message	.vim/pack/ide/start/airline/autoload/airline/extensions/whitespace.vim	/^let s:show_message = get(g:, 'airline#extensions#whitespace#show_message', 1)$/;"	v
s:show_tabline	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/autoshow.vim	/^function! s:show_tabline(min_count, total_count)$/;"	f
s:sienna_style	.vim/colors/sienna.vim	/^    let s:sienna_style = 'light'$/;"	v
s:sienna_style	.vim/colors/sienna.vim	/^    let s:sienna_style = g:sienna_style$/;"	v
s:sign_add	.vim/pack/ide/start/signify/autoload/sy/highlight.vim	/^let s:sign_add               = get(g:, 'signify_sign_add',               '+')$/;"	v
s:sign_change	.vim/pack/ide/start/signify/autoload/sy/highlight.vim	/^let s:sign_change            = get(g:, 'signify_sign_change',            '!')$/;"	v
s:sign_change_delete	.vim/pack/ide/start/signify/autoload/sy/highlight.vim	/^  let s:sign_change_delete = '!-'$/;"	v
s:sign_change_delete	.vim/pack/ide/start/signify/autoload/sy/highlight.vim	/^let s:sign_change_delete     = get(g:, 'signify_sign_change_delete', s:sign_change . s:sign_dele/;"	v
s:sign_delete	.vim/pack/ide/start/signify/autoload/sy/sign.vim	/^let s:sign_delete = get(g:, 'signify_sign_delete', '_')$/;"	v
s:sign_delete_first_line	.vim/pack/ide/start/signify/autoload/sy/highlight.vim	/^let s:sign_delete_first_line = get(g:, 'signify_sign_delete_first_line', '‾')$/;"	v
s:sign_priority	.vim/pack/ide/start/signify/autoload/sy/sign.vim	/^  let s:sign_priority = ''$/;"	v
s:sign_priority	.vim/pack/ide/start/signify/autoload/sy/sign.vim	/^  let s:sign_priority = printf('priority=%d', get(g:, 'signify_priority', 10))$/;"	v
s:sign_show_count	.vim/pack/ide/start/signify/autoload/sy/highlight.vim	/^let s:sign_show_count = get(g:, 'signify_sign_show_count', 1)$/;"	v
s:sign_show_count	.vim/pack/ide/start/signify/autoload/sy/sign.vim	/^let s:sign_show_count  = get(g:, 'signify_sign_show_count', 1)$/;"	v
s:singular_types	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:singular_types = {$/;"	v
s:skip	.vim/pack/ide/start/signify/autoload/sy.vim	/^function! s:skip(bufnr, path)$/;"	f
s:skip_check_ft	.vim/pack/ide/start/airline/autoload/airline/extensions/whitespace.vim	/^let s:skip_check_ft = {'make': ['indent', 'mixed-indent-file'],$/;"	v
s:skip_symbol	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/formatters/unique_tail_improved.vim	/^let s:skip_symbol = '…'$/;"	v
s:solarized_termtrans_default	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:solarized_termtrans_default = 0$/;"	v
s:solarized_termtrans_default	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:solarized_termtrans_default = 1$/;"	v
s:sortTags	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:sortTags(compare_typeinfo) abort dict$/;"	f
s:sp_back	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:sp_back      = ""$/;"	v
s:sp_base0	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:sp_base0     = ""$/;"	v
s:sp_base00	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:sp_base00    = ""$/;"	v
s:sp_base01	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:sp_base01    = ""$/;"	v
s:sp_base02	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:sp_base02    = ""$/;"	v
s:sp_base03	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:sp_base03    = ""$/;"	v
s:sp_base1	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:sp_base1     = ""$/;"	v
s:sp_base2	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:sp_base2     = ""$/;"	v
s:sp_base3	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:sp_base3     = ""$/;"	v
s:sp_blue	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:sp_blue      = ""$/;"	v
s:sp_cyan	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:sp_cyan      = ""$/;"	v
s:sp_green	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:sp_green     = ""$/;"	v
s:sp_magenta	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:sp_magenta   = ""$/;"	v
s:sp_none	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:sp_none      = ""$/;"	v
s:sp_orange	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:sp_orange    = ""$/;"	v
s:sp_red	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:sp_red       = ""$/;"	v
s:sp_violet	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:sp_violet    = ""$/;"	v
s:sp_yellow	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:sp_yellow    = ""$/;"	v
s:spaceStr	.vim/pack/ide/start/nerdcommenter/autoload/nerdcommenter.vim	/^let s:spaceStr = ' '$/;"	v
s:spc	.vim/pack/ide/start/airline/autoload/airline/extensions/dirvish.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/pack/ide/start/airline/autoload/airline/extensions/example.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/pack/ide/start/airline/autoload/airline/extensions/localsearch.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/pack/ide/start/airline/autoload/airline/extensions/obsession.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/pack/ide/start/airline/autoload/airline/extensions/poetv.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/pack/ide/start/airline/autoload/airline/extensions/tagbar.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/pack/ide/start/airline/autoload/airline/extensions/term.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/pack/ide/start/airline/autoload/airline/extensions/vimtex.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/pack/ide/start/airline/autoload/airline/extensions/virtualenv.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/pack/ide/start/airline/autoload/airline/extensions/windowswap.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/pack/ide/start/airline/autoload/airline/extensions/ycm.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/pack/ide/start/airline/autoload/airline/section.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/pack/ide/start/airline/autoload/airline/util.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:sphinx_cache_location	.vim/pack/ide/start/syntastic/syntax_checkers/rst/sphinx.vim	/^let s:sphinx_cache_location = syntastic#util#tmpdir()$/;"	v
s:start_render	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^let s:start_render = 0$/;"	v
s:start_ts	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^let s:start_ts = -1$/;"	v
s:state	.vim/pack/ide/start/tlib/samples/tlib/input/tlib_input_list.vim	/^let s:state = {$/;"	v
s:statusline	.vim/pack/ide/start/tlib/autoload/tlib/progressbar.vim	/^let s:statusline = []$/;"	v
s:statusline_in_use	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:statusline_in_use = 0$/;"	v
s:stop_job_if_exists	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:stop_job_if_exists()$/;"	f
s:stop_timer_if_exists	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:stop_timer_if_exists()$/;"	f
s:str	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:str(longsig, full) abort dict$/;"	f
s:strfmt	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:strfmt() abort dict$/;"	f
s:strfmt	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:strfmt() abort dict$/;"	f
s:strip_context	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:strip_context(context)$/;"	f
s:strwidth	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^	fu! s:strwidth(str)$/;"	f
s:style	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^    let s:style = &background$/;"	v
s:style	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^    let s:style = 'dark'$/;"	v
s:style	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^    let s:style = 'light'$/;"	v
s:style_idx	.vim/pack/ide/opt/seoul256/colors/seoul256.vim	/^let s:style_idx = s:style == 'light'$/;"	v
s:sub	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
s:subcommands_before_2_5	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:subcommands_before_2_5 = [$/;"	v
s:sublist	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:sublist(l, s, e)$/;"	f
s:sublist7071	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:sublist7071(l, s, e)$/;"	f
s:symbol	.vim/pack/ide/start/airline/autoload/airline/extensions/whitespace.vim	/^let s:symbol = get(g:, 'airline#extensions#whitespace#symbol', g:airline_symbols.whitespace)$/;"	v
s:syntax	.vim/pack/ide/start/ctrlp/autoload/ctrlp/bookmarkdir.vim	/^fu! s:syntax()$/;"	f
s:syntax	.vim/pack/ide/start/ctrlp/autoload/ctrlp/buffertag.vim	/^fu! s:syntax()$/;"	f
s:syntax	.vim/pack/ide/start/ctrlp/autoload/ctrlp/changes.vim	/^fu! s:syntax()$/;"	f
s:syntax	.vim/pack/ide/start/ctrlp/autoload/ctrlp/line.vim	/^fu! s:syntax()$/;"	f
s:syntax	.vim/pack/ide/start/ctrlp/autoload/ctrlp/quickfix.vim	/^fu! s:syntax()$/;"	f
s:syntax	.vim/pack/ide/start/ctrlp/autoload/ctrlp/tag.vim	/^fu! s:syntax()$/;"	f
s:syntax	.vim/pack/ide/start/ctrlp/autoload/ctrlp/undo.vim	/^fu! s:syntax()$/;"	f
s:system_in_dir	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:system_in_dir(cmd) abort$/;"	f
s:t_none	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:t_none          = "NONE"$/;"	v
s:tab_min_count	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/autoshow.vim	/^let s:tab_min_count = get(g:, 'airline#extensions#tabline#tab_min_count', 0)$/;"	v
s:tabline_evaluated_length	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:tabline_evaluated_length(tabline)$/;"	f
s:taboo	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^let s:taboo = get(g:, 'airline#extensions#taboo#enabled', 1) && get(g:, 'loaded_taboo', 0)$/;"	v
s:tabws	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^let s:tabws = get(g:, 'tabws_loaded', 0)$/;"	v
s:tail	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:tail()$/;"	f
s:temp00	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:temp00      = s:base00$/;"	v
s:temp01	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:temp01      = s:base01$/;"	v
s:temp02	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:temp02      = s:base02$/;"	v
s:temp03	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:temp03      = s:base03$/;"	v
s:temp_files	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^  let s:temp_files = {}$/;"	v
s:temp_scripts	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^  let s:temp_scripts = {}$/;"	v
s:terminal_italic	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^            let s:terminal_italic=1$/;"	v
s:terminal_italic	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:terminal_italic=0 " terminals will be guilty until proven compatible$/;"	v
s:terminal_italic	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:terminal_italic=1 " TODO: could refactor to not require this at all$/;"	v
s:termname	.vim/pack/ide/start/airline/autoload/airline/extensions/term.vim	/^function! s:termname(bufnr) abort$/;"	f
s:terms_italic	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^let s:terms_italic=[$/;"	v
s:terms_noitalic	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^let s:terms_noitalic=[$/;"	v
s:text	.vim/pack/ide/start/ctrlp/autoload/ctrlp/undo.vim	/^let s:text = map(['second', 'seconds', 'minutes', 'hours', 'days', 'weeks',$/;"	v
s:textdialog	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:textdialog(str)$/;"	f
s:throw	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:throw(string) abort$/;"	f
s:timer	.vim/pack/ide/start/airline/autoload/airline/extensions/lsp.vim	/^let s:timer = 0$/;"	v
s:timer_id	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/async.vim	/^let s:timer_id = -1$/;"	v
s:timestamp	.vim/pack/ide/start/tlib/autoload/tlib/progressbar.vim	/^let s:timestamp = -1$/;"	v
s:timestamps	.vim/pack/ide/start/tlib/autoload/tlib/cache.vim	/^let s:timestamps = {}$/;"	v
s:tmuxline_snapshot_file	.vim/pack/ide/start/airline/autoload/airline/extensions/tmuxline.vim	/^let s:tmuxline_snapshot_file = get(g:, 'airline#extensions#tmuxline#snapshot_file', '')$/;"	v
s:toggleFold	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:toggleFold(fileinfo) abort dict$/;"	f
s:toggleIgnoreFilter	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleIgnoreFilter() abort$/;"	f
s:toggleShowBookmarks	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowBookmarks() abort$/;"	f
s:toggleShowFiles	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowFiles() abort$/;"	f
s:toggleShowHidden	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowHidden() abort$/;"	f
s:toggleZoom	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleZoom() abort$/;"	f
s:toggle_off	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  def s:toggle_off(): void$/;"	f
s:toggle_off	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  function! s:toggle_off()$/;"	f
s:toggle_on	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  def s:toggle_on(): void$/;"	f
s:toggle_on	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  function! s:toggle_on()$/;"	f
s:trace	.vim/pack/ide/start/ctrlp/autoload/ctrlp/autoignore.vim	/^function! s:trace(message) abort$/;"	f
s:tranquilize	.vim/pack/ide/opt/goyo/autoload/goyo.vim	/^function! s:tranquilize()$/;"	f
s:tree_up_dir_line	.vim/pack/ide/start/nerdtree/syntax/nerdtree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:trees	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:trees = {}$/;"	v
s:type_init_done	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:type_init_done    = 0$/;"	v
s:type_map	.vim/pack/ide/start/syntastic/syntax_checkers/fortran/gfortran.vim	/^let s:type_map = {}$/;"	v
s:types	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^let s:types = ['fil', 'buf', 'mru']$/;"	v
s:types	.vim/pack/ide/start/ctrlp/autoload/ctrlp/buffertag.vim	/^let s:types = {$/;"	v
s:u	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:u           = ""$/;"	v
s:u	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:u           = ",underline"$/;"	v
s:ulbg	.vim/colors/astronaut.vim	/^  let s:ulbg     = "ctermbg=darkmagenta guibg=magenta4"$/;"	v
s:ulbg	.vim/colors/astronaut.vim	/^  let s:ulbg     = "ctermbg=magenta guibg=magenta"$/;"	v
s:ulbg	.vim/colors/astronaut.vim	/^ let s:ulbg     = ""$/;"	v
s:underline	.vim/colors/astronaut.vim	/^ let s:underline= ",underline"$/;"	v
s:underline	.vim/colors/astronaut.vim	/^ let s:underline= "none"$/;"	v
s:undo_hunk	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:undo_hunk(sy, vcs, diff) abort$/;"	f
s:unix_redir	.vim/pack/ide/start/gutentags/autoload/gutentags/cscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unmarksigns	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:unmarksigns()$/;"	f
s:untracked_jobs	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^let s:untracked_jobs = {}$/;"	v
s:untracked_output	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^function! s:untracked_output(dict, buf)$/;"	f
s:upDirCurrentRootClosed	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootClosed() abort$/;"	f
s:upDirCurrentRootOpen	.vim/pack/ide/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootOpen() abort$/;"	f
s:update_branch	.vim/pack/ide/start/airline/autoload/airline/extensions/branch.vim	/^function! s:update_branch()$/;"	f
s:update_git_branch	.vim/pack/ide/start/airline/autoload/airline/extensions/branch.vim	/^function! s:update_git_branch()$/;"	f
s:update_hg_branch	.vim/pack/ide/start/airline/autoload/airline/extensions/branch.vim	/^function! s:update_hg_branch()$/;"	f
s:update_in_progress	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^    let s:update_in_progress[module] = []$/;"	v
s:update_in_progress	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^let s:update_in_progress = {}$/;"	v
s:update_queue	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^    let s:update_queue[module] = []$/;"	v
s:update_queue	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^let s:update_queue = {}$/;"	v
s:update_tabline	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  def s:update_tabline(forceit: number): void$/;"	f
s:update_tabline	.vim/pack/ide/start/airline/autoload/airline/extensions/tabline.vim	/^  function! s:update_tabline(forceit)$/;"	f
s:update_tags	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! s:update_tags(bufno, module, write_mode, queue_mode) abort$/;"	f
s:update_untracked	.vim/pack/ide/start/airline/autoload/airline/extensions/branch.vim	/^function! s:update_untracked()$/;"	f
s:update_wordcount	.vim/pack/ide/start/airline/autoload/airline/extensions/wordcount.vim	/^function! s:update_wordcount(force_update)$/;"	f
s:usrign	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:usrign(item, type)$/;"	f
s:vacantdict	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:vacantdict(dict)$/;"	f
s:valid_dir	.vim/pack/ide/start/airline/autoload/airline/async.vim	/^function! s:valid_dir(dir)$/;"	f
s:validfile	.vim/pack/ide/start/ctrlp/autoload/ctrlp/buffertag.vim	/^fu! s:validfile(fname, ftype)$/;"	f
s:value	.vim/pack/ide/start/tlib/autoload/tlib/progressbar.vim	/^let s:value = []$/;"	v
s:var	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:var = '\\%(<\\%(cword\\|cWORD\\|cexpr\\|cfile\\|sfile\\|slnum\\|afile\\|abuf\\|amatch' . (/;"	v
s:var_found	.vim/pack/ide/opt/seoul256/colors/seoul256-light.vim	/^let s:var_found = exists('g:seoul256_background')$/;"	v
s:vcs_cache	.vim/pack/ide/start/tlib/autoload/tlib/vcs.vim	/^let s:vcs_cache = {}$/;"	v
s:vcs_config	.vim/pack/ide/start/airline/autoload/airline/extensions/branch.vim	/^let s:vcs_config = {$/;"	v
s:vcs_dict	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^let s:vcs_dict = map(copy(g:signify_vcs_cmds), 'split(v:val)[0]')$/;"	v
s:vcs_list	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^    let s:vcs_list = filter(copy(g:signify_skip.vcs.allow), 'executable(s:vcs_dict[v:val])')$/;"	v
s:vcs_list	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^    let s:vcs_list = keys(filter(s:vcs_dict, 'executable(v:val)'))$/;"	v
s:vcs_list	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^  let s:vcs_list = keys(filter(s:vcs_dict, 'executable(v:val)'))$/;"	v
s:vcs_marker	.vim/pack/ide/opt/ctrlsf/autoload/ctrlsf/fs.vim	/^let s:vcs_marker = ['.git', '.svn', '.bzr', '_darcs']$/;"	v
s:vim_quitting	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:vim_quitting = 0$/;"	v
s:vimlintOutput	.vim/pack/ide/start/syntastic/syntax_checkers/vim/vimlint.vim	/^function! s:vimlintOutput(filename, pos, ev, eid, mes, obj) " {{{2$/;"	f
s:violet	.vim/colors/twilight.vim	/^let s:violet = '#a999ac'$/;"	v
s:violet	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:violet      = "#5f5faf"$/;"	v
s:violet	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:violet      = "#6c71c4"$/;"	v
s:violet	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:violet      = "13"$/;"	v
s:violet	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:violet      = "61"$/;"	v
s:violet	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:violet      = "LightMagenta"  " 5*$/;"	v
s:visibility_symbols	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^    let s:visibility_symbols = g:tagbar_visibility_symbols$/;"	v
s:visibility_symbols	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^let s:visibility_symbols = {$/;"	v
s:vmode	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:vmode       = "cterm"$/;"	v
s:vmode	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:vmode       = "gui"$/;"	v
s:walker	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:walker(m, p, d)$/;"	f
s:warning	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! s:warning(msg) abort$/;"	f
s:warning_definetype	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^let s:warning_definetype = 0$/;"	v
s:warning_symbol	.vim/pack/ide/start/airline/autoload/airline/extensions/coc.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#coc#warning_symbol', 'W:')$/;"	v
s:warning_symbol	.vim/pack/ide/start/airline/autoload/airline/extensions/languageclient.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#languageclient#warning_symbol', 'W:')$/;"	v
s:warning_symbol	.vim/pack/ide/start/airline/autoload/airline/extensions/neomake.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#neomake#warning_symbol', 'W:')$/;"	v
s:warning_symbol	.vim/pack/ide/start/airline/autoload/airline/extensions/syntastic.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#syntastic#warning_symbol', 'W:')$/;"	v
s:warning_symbol	.vim/pack/ide/start/airline/autoload/airline/extensions/ycm.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#ycm#warning_symbol', 'W:')$/;"	v
s:warnings	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:warnings = {$/;"	v
s:white	.vim/colors/astronaut.vim	/^ let s:white   = "white"$/;"	v
s:white	.vim/colors/twilight.vim	/^let s:white = '#fffedc'$/;"	v
s:width	.vim/pack/ide/start/tlib/autoload/tlib/progressbar.vim	/^let s:width = []$/;"	v
s:wig_cond	.vim/pack/ide/start/ctrlp/autoload/ctrlp/utils.vim	/^let s:wig_cond = v:version > 702 || ( v:version == 702 && has('patch051') )$/;"	v
s:wildignores_options_path	.vim/pack/ide/start/gutentags/autoload/gutentags/ctags.vim	/^let s:wildignores_options_path = ''$/;"	v
s:win_id	.vim/pack/ide/start/tlib/autoload/tlib/win.vim	/^    let s:win_id = 0$/;"	v
s:window_expanded	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:window_expanded   = 0$/;"	v
s:window_pos	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:window_pos = {$/;"	v
s:winrestcmd	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^let s:winrestcmd      = ''$/;"	v
s:winshell	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^function! s:winshell() abort$/;"	f
s:wordcount_cache	.vim/pack/ide/start/airline/autoload/airline/extensions/wordcount.vim	/^let s:wordcount_cache = 0  " cache wordcount for performance when force_update=0$/;"	v
s:worktree_error	.vim/pack/ide/start/fugitive/autoload/fugitive.vim	/^let s:worktree_error = "core.worktree is required when using an external Git dir"$/;"	v
s:worktree_for_dir	.vim/pack/ide/start/fugitive/plugin/fugitive.vim	/^let s:worktree_for_dir = {}$/;"	v
s:wrap	.vim/pack/ide/start/surround/plugin/surround.vim	/^function! s:wrap(string,char,type,removed,special)$/;"	f
s:wrap_accent	.vim/pack/ide/start/airline/autoload/airline/section.vim	/^function! s:wrap_accent(part, value)$/;"	f
s:wrap_cmd	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:wrap_cmd(bufnr, vcs, cmd) abort$/;"	f
s:wrapreg	.vim/pack/ide/start/surround/plugin/surround.vim	/^function! s:wrapreg(reg,char,removed,special)$/;"	f
s:write_buffer	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! s:write_buffer(bufnr, file)$/;"	f
s:write_triggered_update_tags	.vim/pack/ide/start/gutentags/autoload/gutentags.vim	/^function! s:write_triggered_update_tags(bufno) abort$/;"	f
s:writecache	.vim/pack/ide/start/ctrlp/autoload/ctrlp.vim	/^fu! s:writecache(cafile)$/;"	f
s:writecache	.vim/pack/ide/start/ctrlp/autoload/ctrlp/bookmarkdir.vim	/^fu! s:writecache(lines)$/;"	f
s:ws_refresh	.vim/pack/ide/start/airline/autoload/airline/extensions/whitespace.vim	/^function! s:ws_refresh()$/;"	f
s:xterm_escape_template	.vim/pack/ide/start/airline/autoload/airline/extensions/cursormode.vim	/^let s:xterm_escape_template = '\\033]12;%s\\007'$/;"	v
s:yellow	.vim/colors/astronaut.vim	/^ let s:yellow  = "darkyellow"$/;"	v
s:yellow	.vim/colors/astronaut.vim	/^ let s:yellow  = "yellow"$/;"	v
s:yellow	.vim/colors/twilight.vim	/^let s:yellow = '#e3d796'$/;"	v
s:yellow	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:yellow      = "#af8700"$/;"	v
s:yellow	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:yellow      = "#b58900"$/;"	v
s:yellow	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:yellow      = "136"$/;"	v
s:yellow	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:yellow      = "3"$/;"	v
s:yellow	.vim/pack/ide/start/colors-solarized/colors/solarized.vim	/^    let s:yellow      = "DarkYellow"    " 3$/;"	v
s:zoomwintab_status_zoomed_in	.vim/pack/ide/start/airline/autoload/airline/extensions/zoomwintab.vim	/^let s:zoomwintab_status_zoomed_in =$/;"	v
s:zoomwintab_status_zoomed_out	.vim/pack/ide/start/airline/autoload/airline/extensions/zoomwintab.vim	/^let s:zoomwintab_status_zoomed_out =$/;"	v
save_cpo	.vim/colors/candycode.vim	/^let save_cpo = &cpo$/;"	v
screen shot (if possible)	.vim/pack/ide/start/airline/.github/ISSUE_TEMPLATE.md	/^#### screen shot (if possible)$/;"	t
self.Highlighter	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^        function! self.Highlighter(rx) dict abort$/;"	f
seoul256	.vim/pack/ide/opt/seoul256/README.md	/^### seoul256$/;"	S	section:seoul256.vim ![travis-ci](https://travis-ci.org/junegunn/seoul256.vim.svg?branch=master)
seoul256 (light version)	.vim/pack/ide/opt/seoul256/README.md	/^### seoul256 (light version)$/;"	S	section:seoul256.vim ![travis-ci](https://travis-ci.org/junegunn/seoul256.vim.svg?branch=master)
seoul256.vim ![travis-ci](https://travis-ci.org/junegunn/seoul256.vim.svg?branch=master)	.vim/pack/ide/opt/seoul256/README.md	/^seoul256.vim ![travis-ci](https:\/\/travis-ci.org\/junegunn\/seoul256.vim.svg?branch=master)$/;"	s
signify	.vim/pack/ide/start/signify/autoload/sy.vim	/^  augroup signify$/;"	a
sp	.vim/pack/ide/start/tlib/autoload/tlib/textobjects.vim	/^        onoremap <silent> sp :<C-u>normal Vsp<CR>$/;"	m
sp	.vim/pack/ide/start/tlib/autoload/tlib/textobjects.vim	/^        vnoremap <silent> sp <Esc>:call tlib#textobjects#StandardParagraph()<CR>$/;"	m
split_at_equals	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^split_at_equals([$=|T], Acc) ->$/;"	f
split_at_equals	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^split_at_equals([H|T], Acc) ->$/;"	f
split_at_equals	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^split_at_equals([], Acc) ->$/;"	f
statics	.vim/pack/ide/start/yajs/data/p.js	/^  var statics = [];$/;"	v
statusline on top	.vim/pack/ide/start/airline/README.md	/^### statusline on top$/;"	S	section:Features""Extras
stl	.vim/pack/ide/start/airline/t/builder.vim	/^    let stl = s:builder.build()$/;"	v
stl	.vim/pack/ide/start/airline/t/extensions_default.vim	/^    let stl = s:builder.build()$/;"	v
surround.vim	.vim/pack/ide/start/surround/README.markdown	/^# surround.vim$/;"	c
sy#buffer_is_active	.vim/pack/ide/start/signify/autoload/sy.vim	/^function! sy#buffer_is_active(...)$/;"	f
sy#debug#list_active_buffers	.vim/pack/ide/start/signify/autoload/sy/debug.vim	/^function! sy#debug#list_active_buffers() abort$/;"	f
sy#fold#disable	.vim/pack/ide/start/signify/autoload/sy/fold.vim	/^function! sy#fold#disable() abort$/;"	f
sy#fold#dispatch	.vim/pack/ide/start/signify/autoload/sy/fold.vim	/^function! sy#fold#dispatch(do_tab) abort$/;"	f
sy#fold#enable	.vim/pack/ide/start/signify/autoload/sy/fold.vim	/^function! sy#fold#enable(do_tab) abort$/;"	f
sy#fold#toggle	.vim/pack/ide/start/signify/autoload/sy/fold.vim	/^function! sy#fold#toggle() abort$/;"	f
sy#highlight#line_disable	.vim/pack/ide/start/signify/autoload/sy/highlight.vim	/^function! sy#highlight#line_disable() abort$/;"	f
sy#highlight#line_enable	.vim/pack/ide/start/signify/autoload/sy/highlight.vim	/^function! sy#highlight#line_enable() abort$/;"	f
sy#highlight#line_toggle	.vim/pack/ide/start/signify/autoload/sy/highlight.vim	/^function! sy#highlight#line_toggle() abort$/;"	f
sy#highlight#setup	.vim/pack/ide/start/signify/autoload/sy/highlight.vim	/^function! sy#highlight#setup() abort$/;"	f
sy#jump#next_hunk	.vim/pack/ide/start/signify/autoload/sy/jump.vim	/^function! sy#jump#next_hunk(count)$/;"	f
sy#jump#prev_hunk	.vim/pack/ide/start/signify/autoload/sy/jump.vim	/^function! sy#jump#prev_hunk(count)$/;"	f
sy#repo#debug_detection	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! sy#repo#debug_detection()$/;"	f
sy#repo#detect	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! sy#repo#detect(bufnr) abort$/;"	f
sy#repo#diff_hunk	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! sy#repo#diff_hunk() abort$/;"	f
sy#repo#diffmode	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! sy#repo#diffmode(do_tab) abort$/;"	f
sy#repo#get_diff	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! sy#repo#get_diff(bufnr, vcs, func) abort$/;"	f
sy#repo#get_stats	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! sy#repo#get_stats(...) abort$/;"	f
sy#repo#get_stats_decorated	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! sy#repo#get_stats_decorated(...)$/;"	f
sy#repo#undo_hunk	.vim/pack/ide/start/signify/autoload/sy/repo.vim	/^function! sy#repo#undo_hunk() abort$/;"	f
sy#set_buflocal_autocmds	.vim/pack/ide/start/signify/autoload/sy.vim	/^function! sy#set_buflocal_autocmds(bufnr) abort$/;"	f
sy#sign#get_current_signs	.vim/pack/ide/start/signify/autoload/sy/sign.vim	/^function! sy#sign#get_current_signs(sy) abort$/;"	f
sy#sign#id_next	.vim/pack/ide/start/signify/autoload/sy/sign.vim	/^function! sy#sign#id_next(sy) abort$/;"	f
sy#sign#parse_hunk	.vim/pack/ide/start/signify/autoload/sy/sign.vim	/^function! sy#sign#parse_hunk(diffline) abort$/;"	f
sy#sign#process_diff	.vim/pack/ide/start/signify/autoload/sy/sign.vim	/^function! sy#sign#process_diff(sy, vcs, diff) abort$/;"	f
sy#sign#remove_all_signs	.vim/pack/ide/start/signify/autoload/sy/sign.vim	/^function! sy#sign#remove_all_signs(bufnr) abort$/;"	f
sy#sign#set_signs	.vim/pack/ide/start/signify/autoload/sy/sign.vim	/^function! sy#sign#set_signs(sy, vcs, diff) abort$/;"	f
sy#start	.vim/pack/ide/start/signify/autoload/sy.vim	/^function! sy#start(...) abort$/;"	f
sy#start_all	.vim/pack/ide/start/signify/autoload/sy.vim	/^function! sy#start_all() abort$/;"	f
sy#stop	.vim/pack/ide/start/signify/autoload/sy.vim	/^function! sy#stop(...) abort$/;"	f
sy#stop_all	.vim/pack/ide/start/signify/autoload/sy.vim	/^function! sy#stop_all() abort$/;"	f
sy#toggle	.vim/pack/ide/start/signify/autoload/sy.vim	/^function! sy#toggle() abort$/;"	f
sy#util#chdir	.vim/pack/ide/start/signify/autoload/sy/util.vim	/^function! sy#util#chdir() abort$/;"	f
sy#util#escape	.vim/pack/ide/start/signify/autoload/sy/util.vim	/^function! sy#util#escape(path) abort$/;"	f
sy#util#execute	.vim/pack/ide/start/signify/autoload/sy/util.vim	/^function! sy#util#execute(cmd) abort$/;"	f
sy#util#get_hunk_stats	.vim/pack/ide/start/signify/autoload/sy/util.vim	/^function! sy#util#get_hunk_stats() abort$/;"	f
sy#util#hunk_text_object	.vim/pack/ide/start/signify/autoload/sy/util.vim	/^function! sy#util#hunk_text_object(emptylines) abort$/;"	f
sy#util#popup_close	.vim/pack/ide/start/signify/autoload/sy/util.vim	/^function! sy#util#popup_close() abort$/;"	f
sy#util#popup_create	.vim/pack/ide/start/signify/autoload/sy/util.vim	/^function! sy#util#popup_create(hunkdiff) abort$/;"	f
sy#util#refresh_windows	.vim/pack/ide/start/signify/autoload/sy/util.vim	/^function! sy#util#refresh_windows() abort$/;"	f
sy#util#return_if_no_changes	.vim/pack/ide/start/signify/autoload/sy/util.vim	/^function! sy#util#return_if_no_changes() abort$/;"	f
sy#util#shell_redirect	.vim/pack/ide/start/signify/autoload/sy/util.vim	/^function! sy#util#shell_redirect(path) abort$/;"	f
sy#verbose	.vim/pack/ide/start/signify/autoload/sy.vim	/^function! sy#verbose(msg, ...) abort$/;"	f
syntastic	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^    augroup syntastic$/;"	a
syntastic	.vim/pack/ide/start/syntastic/plugin/syntastic.vim	/^augroup syntastic$/;"	a
syntastic	.vim/pack/ide/start/syntastic/syntax_checkers/java/javac.vim	/^        augroup syntastic$/;"	a
syntastic	.vim/pack/ide/start/syntastic/syntax_checkers/rst/sphinx.vim	/^augroup syntastic$/;"	a
syntastic	.vim/pack/ide/start/syntastic/syntax_checkers/sass/sass.vim	/^augroup syntastic$/;"	a
syntastic#c#GetLocList	.vim/pack/ide/start/syntastic/autoload/syntastic/c.vim	/^function! syntastic#c#GetLocList(filetype, subchecker, options) abort " {{{2$/;"	f
syntastic#c#NullOutput	.vim/pack/ide/start/syntastic/autoload/syntastic/c.vim	/^function! syntastic#c#NullOutput() abort " {{{2$/;"	f
syntastic#c#ReadConfig	.vim/pack/ide/start/syntastic/autoload/syntastic/c.vim	/^function! syntastic#c#ReadConfig(file) abort " {{{2$/;"	f
syntastic#log#debug	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#debug(level, msg, ...) abort " {{{2$/;"	f
syntastic#log#debugDump	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#debugDump(level) abort " {{{2$/;"	f
syntastic#log#debugShowOptions	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#debugShowOptions(level, names) abort " {{{2$/;"	f
syntastic#log#debugShowVariables	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#debugShowVariables(level, names) abort " {{{2$/;"	f
syntastic#log#deprecationWarn	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#deprecationWarn(old, new, ...) abort " {{{2$/;"	f
syntastic#log#error	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#error(msg) abort " {{{2$/;"	f
syntastic#log#info	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#info(msg) abort " {{{2$/;"	f
syntastic#log#ndebug	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#ndebug(level, title, messages) abort " {{{2$/;"	f
syntastic#log#oneTimeWarn	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#oneTimeWarn(msg) abort " {{{2$/;"	f
syntastic#log#warn	.vim/pack/ide/start/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#warn(msg) abort " {{{2$/;"	f
syntastic#postprocess#compressWhitespace	.vim/pack/ide/start/syntastic/autoload/syntastic/postprocess.vim	/^function! syntastic#postprocess#compressWhitespace(errors) abort " {{{2$/;"	f
syntastic#postprocess#cygwinRemoveCR	.vim/pack/ide/start/syntastic/autoload/syntastic/postprocess.vim	/^function! syntastic#postprocess#cygwinRemoveCR(errors) abort " {{{2$/;"	f
syntastic#postprocess#decodeXMLEntities	.vim/pack/ide/start/syntastic/autoload/syntastic/postprocess.vim	/^function! syntastic#postprocess#decodeXMLEntities(errors) abort " {{{2$/;"	f
syntastic#postprocess#filterForeignErrors	.vim/pack/ide/start/syntastic/autoload/syntastic/postprocess.vim	/^function! syntastic#postprocess#filterForeignErrors(errors) abort " {{{2$/;"	f
syntastic#postprocess#guards	.vim/pack/ide/start/syntastic/autoload/syntastic/postprocess.vim	/^function! syntastic#postprocess#guards(errors) abort " {{{2$/;"	f
syntastic#postprocess#iconv	.vim/pack/ide/start/syntastic/autoload/syntastic/postprocess.vim	/^function! syntastic#postprocess#iconv(errors) abort " {{{2$/;"	f
syntastic#preprocess#bandit	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#bandit(errors) abort " {{{2$/;"	f
syntastic#preprocess#basex	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#basex(errors) abort " {{{2$/;"	f
syntastic#preprocess#bro	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#bro(errors) abort " {{{2$/;"	f
syntastic#preprocess#cabal	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#cabal(errors) abort " {{{2$/;"	f
syntastic#preprocess#checkstyle	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#checkstyle(errors) abort " {{{2$/;"	f
syntastic#preprocess#coffeelint	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#coffeelint(errors) abort " {{{2$/;"	f
syntastic#preprocess#cppcheck	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#cppcheck(errors) abort " {{{2$/;"	f
syntastic#preprocess#dockerfile_lint	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#dockerfile_lint(errors) abort " {{{2$/;"	f
syntastic#preprocess#dscanner	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#dscanner(errors) abort " {{{2$/;"	f
syntastic#preprocess#flow	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#flow(errors) abort " {{{2$/;"	f
syntastic#preprocess#iconv	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#iconv(errors) abort " {{{2$/;"	f
syntastic#preprocess#jscs	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#jscs(errors) abort " {{{2$/;"	f
syntastic#preprocess#killEmpty	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#killEmpty(errors) abort " {{{2$/;"	f
syntastic#preprocess#lynt	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#lynt(errors) abort " {{{2$/;"	f
syntastic#preprocess#mypy	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#mypy(errors) abort " {{{2$/;"	f
syntastic#preprocess#nix	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#nix(errors) abort " {{{2$/;"	f
syntastic#preprocess#perl	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#perl(errors) abort " {{{2$/;"	f
syntastic#preprocess#prospector	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#prospector(errors) abort " {{{2$/;"	f
syntastic#preprocess#raku	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#raku(errors) abort " {{{2$/;"	f
syntastic#preprocess#remark_lint	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#remark_lint(errors) abort " {{{2$/;"	f
syntastic#preprocess#rparse	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#rparse(errors) abort " {{{2$/;"	f
syntastic#preprocess#scss_lint	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#scss_lint(errors) abort " {{{2$/;"	f
syntastic#preprocess#stylelint	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#stylelint(errors) abort " {{{2$/;"	f
syntastic#preprocess#tern_lint	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#tern_lint(errors) abort " {{{2$/;"	f
syntastic#preprocess#tslint	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#tslint(errors) abort " {{{2$/;"	f
syntastic#preprocess#validator	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#validator(errors) abort " {{{2$/;"	f
syntastic#preprocess#vint	.vim/pack/ide/start/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#vint(errors) abort " {{{2$/;"	f
syntastic#util#CygwinPath	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#CygwinPath(path) abort " {{{2$/;"	f
syntastic#util#DevNull	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#DevNull() abort " {{{2$/;"	f
syntastic#util#Slash	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#Slash() abort " {{{2$/;"	f
syntastic#util#argsescape	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#argsescape(opt) abort " {{{2$/;"	f
syntastic#util#bufIsActive	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#bufIsActive(buffer) abort " {{{2$/;"	f
syntastic#util#bufRawVar	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#bufRawVar(buf, name, ...) abort " {{{2$/;"	f
syntastic#util#bufVar	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#bufVar(buf, name, ...) abort " {{{2$/;"	f
syntastic#util#compareLexi	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#compareLexi(a, b) abort " {{{2$/;"	f
syntastic#util#decodeXMLEntities	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#decodeXMLEntities(string) abort " {{{2$/;"	f
syntastic#util#dictFilter	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#dictFilter(errors, filter) abort " {{{2$/;"	f
syntastic#util#findFileInParent	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#findFileInParent(what, where) abort " {{{2$/;"	f
syntastic#util#findGlobInParent	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#findGlobInParent(what, where) abort " {{{2$/;"	f
syntastic#util#float2str	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#float2str(val) abort " {{{2$/;"	f
syntastic#util#fname2buf	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#fname2buf(fname) abort " {{{2$/;"	f
syntastic#util#getbufvar	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#getbufvar(buf, name, ...) abort " {{{2$/;"	f
syntastic#util#isRunningWindows	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#isRunningWindows() abort " {{{2$/;"	f
syntastic#util#parseShebang	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#parseShebang(buf) abort " {{{2$/;"	f
syntastic#util#parseVersion	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#parseVersion(version, ...) abort " {{{2$/;"	f
syntastic#util#rawVar	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#rawVar(name, ...) abort " {{{2$/;"	f
syntastic#util#redraw	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#redraw(full) abort " {{{2$/;"	f
syntastic#util#rmrf	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#rmrf(what) abort " {{{2$/;"	f
syntastic#util#screenWidth	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#screenWidth(str, tabstop) abort " {{{2$/;"	f
syntastic#util#setLastTick	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#setLastTick(buf) abort " {{{2$/;"	f
syntastic#util#setWids	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#setWids() abort " {{{2$/;"	f
syntastic#util#shescape	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#shescape(string) abort " {{{2$/;"	f
syntastic#util#shexpand	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#shexpand(string, ...) abort " {{{2$/;"	f
syntastic#util#stamp	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#stamp() abort " {{{2$/;"	f
syntastic#util#str2float	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#str2float(val) abort " {{{2$/;"	f
syntastic#util#system	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#system(command) abort " {{{2$/;"	f
syntastic#util#tmpdir	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#tmpdir() abort " {{{2$/;"	f
syntastic#util#unique	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#unique(list) abort " {{{2$/;"	f
syntastic#util#var	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#var(name, ...) abort " {{{2$/;"	f
syntastic#util#versionIsAtLeast	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#versionIsAtLeast(installed, required) abort " {{{2$/;"	f
syntastic#util#wformat	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#wformat(format, str) abort " {{{2$/;"	f
syntastic#util#wideMsg	.vim/pack/ide/start/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#wideMsg(msg) abort " {{{2$/;"	f
tagbar#CloseWindow	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#CloseWindow() abort$/;"	f
tagbar#ForceUpdate	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#ForceUpdate() abort$/;"	f
tagbar#GetTagNearLine	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#GetTagNearLine(lnum, ...) abort$/;"	f
tagbar#IsOpen	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#IsOpen() abort$/;"	f
tagbar#OpenWindow	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#OpenWindow(...) abort$/;"	f
tagbar#RestoreSession	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#RestoreSession() abort$/;"	f
tagbar#SetFoldLevel	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#SetFoldLevel(level, force) abort$/;"	f
tagbar#StopAutoUpdate	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#StopAutoUpdate() abort$/;"	f
tagbar#ToggleWindow	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#ToggleWindow(...) abort$/;"	f
tagbar#Update	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#Update() abort$/;"	f
tagbar#autoopen	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#autoopen(...) abort$/;"	f
tagbar#currentfile	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#currentfile() abort$/;"	f
tagbar#currenttag	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#currenttag(fmt, default, ...) abort$/;"	f
tagbar#currenttagtype	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#currenttagtype(fmt, default) abort$/;"	f
tagbar#debug#enabled	.vim/pack/ide/start/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#enabled() abort$/;"	f
tagbar#debug#log	.vim/pack/ide/start/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#log(msg) abort$/;"	f
tagbar#debug#log_ctags_output	.vim/pack/ide/start/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#log_ctags_output(output) abort$/;"	f
tagbar#debug#start_debug	.vim/pack/ide/start/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#start_debug(...) abort$/;"	f
tagbar#debug#stop_debug	.vim/pack/ide/start/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#stop_debug() abort$/;"	f
tagbar#gettypeconfig	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#gettypeconfig(type) abort$/;"	f
tagbar#getusertypes	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#getusertypes() abort$/;"	f
tagbar#highlighttag	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#highlighttag(openfolds, force) abort$/;"	f
tagbar#inspect	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#inspect(var) abort$/;"	f
tagbar#is_paused	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#is_paused() abort$/;"	f
tagbar#jump	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#jump() abort$/;"	f
tagbar#jumpToNearbyTag	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#jumpToNearbyTag(direction, ...) abort$/;"	f
tagbar#printfileinfo	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#printfileinfo() abort$/;"	f
tagbar#prototypes#basetag#new	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! tagbar#prototypes#basetag#new(name) abort$/;"	f
tagbar#prototypes#fileinfo#new	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! tagbar#prototypes#fileinfo#new(fname, ftype, typeinfo) abort$/;"	f
tagbar#prototypes#kindheadertag#new	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! tagbar#prototypes#kindheadertag#new(name) abort$/;"	f
tagbar#prototypes#normaltag#new	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! tagbar#prototypes#normaltag#new(name) abort$/;"	f
tagbar#prototypes#pseudotag#new	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! tagbar#prototypes#pseudotag#new(name) abort$/;"	f
tagbar#prototypes#splittag#new	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! tagbar#prototypes#splittag#new(name) abort$/;"	f
tagbar#prototypes#typeinfo#new	.vim/pack/ide/start/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! tagbar#prototypes#typeinfo#new(...) abort$/;"	f
tagbar#sorting#sort	.vim/pack/ide/start/tagbar/autoload/tagbar/sorting.vim	/^function! tagbar#sorting#sort(tags, compareby, compare_typeinfo) abort$/;"	f
tagbar#state#get_current_file	.vim/pack/ide/start/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#get_current_file(force_current) abort$/;"	f
tagbar#state#set_current_file	.vim/pack/ide/start/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#set_current_file(fileinfo) abort$/;"	f
tagbar#state#set_paused	.vim/pack/ide/start/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#set_paused() abort$/;"	f
tagbar#toggle_pause	.vim/pack/ide/start/tagbar/autoload/tagbar.vim	/^function! tagbar#toggle_pause() abort$/;"	f
tagbar#types#ctags#init	.vim/pack/ide/start/tagbar/autoload/tagbar/types/ctags.vim	/^function! tagbar#types#ctags#init(supported_types) abort$/;"	f
tagbar#types#uctags#init	.vim/pack/ide/start/tagbar/autoload/tagbar/types/uctags.vim	/^function! tagbar#types#uctags#init(supported_types) abort$/;"	f
tcomment#Comment	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^function! tcomment#Comment(beg, end, ...) abort$/;"	f
tcomment#CommentAs	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^function! tcomment#CommentAs(beg, end, comment_anyway, filetype, ...) abort$/;"	f
tcomment#DefineType	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^function! tcomment#DefineType(...) abort$/;"	f
tcomment#GetLineC	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^function! tcomment#GetLineC(...) abort$/;"	f
tcomment#GuessCommentType	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^function! tcomment#GuessCommentType(...) abort "{{{3$/;"	f
tcomment#MaybeReuseOptions	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^function! tcomment#MaybeReuseOptions(name) abort "{{{3$/;"	f
tcomment#ResetOption	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^function! tcomment#ResetOption() abort "{{{3$/;"	f
tcomment#SetOption	.vim/pack/ide/start/tcomment/autoload/tcomment.vim	/^function! tcomment#SetOption(name, arg) abort "{{{3$/;"	f
tcomment#commentdef#BlockGetCommentString	.vim/pack/ide/start/tcomment/autoload/tcomment/commentdef.vim	/^function! tcomment#commentdef#BlockGetCommentString(cdef) abort$/;"	f
tcomment#commentdef#BlockGetMiddleString	.vim/pack/ide/start/tcomment/autoload/tcomment/commentdef.vim	/^function! tcomment#commentdef#BlockGetMiddleString(cdef) abort$/;"	f
tcomment#commentdef#Extend	.vim/pack/ide/start/tcomment/autoload/tcomment/commentdef.vim	/^function! tcomment#commentdef#Extend(beg, end, comment_mode, cdef, args) abort$/;"	f
tcomment#commentdef#Get	.vim/pack/ide/start/tcomment/autoload/tcomment/commentdef.vim	/^function! tcomment#commentdef#Get(beg, end, comment_mode, ...) abort$/;"	f
tcomment#commentdef#GetBlockCommentRx	.vim/pack/ide/start/tcomment/autoload/tcomment/commentdef.vim	/^function! tcomment#commentdef#GetBlockCommentRx(cdef) abort$/;"	f
tcomment#commentdef#GetCommentReplace	.vim/pack/ide/start/tcomment/autoload/tcomment/commentdef.vim	/^function! tcomment#commentdef#GetCommentReplace(cdef, cms0) abort$/;"	f
tcomment#commentdef#GetCustom	.vim/pack/ide/start/tcomment/autoload/tcomment/commentdef.vim	/^function! tcomment#commentdef#GetCustom(filetype, comment_mode, ...) abort$/;"	f
tcomment#commentdef#GetForType	.vim/pack/ide/start/tcomment/autoload/tcomment/commentdef.vim	/^function! tcomment#commentdef#GetForType(beg, end, comment_mode, filetype) abort "{{{3$/;"	f
tcomment#commentdef#RepeatCommentstring	.vim/pack/ide/start/tcomment/autoload/tcomment/commentdef.vim	/^function! tcomment#commentdef#RepeatCommentstring(cdef) abort "{{{3$/;"	f
tcomment#commentdef#SetWhitespaceMode	.vim/pack/ide/start/tcomment/autoload/tcomment/commentdef.vim	/^function! tcomment#commentdef#SetWhitespaceMode(cdef) abort "{{{3$/;"	f
tcomment#commentmode#AddExtra	.vim/pack/ide/start/tcomment/autoload/tcomment/commentmode.vim	/^function! tcomment#commentmode#AddExtra(comment_mode, extra, beg, end) abort "{{{3$/;"	f
tcomment#commentmode#Guess	.vim/pack/ide/start/tcomment/autoload/tcomment/commentmode.vim	/^function! tcomment#commentmode#Guess(comment_mode, supported_comment_modes) abort "{{{3$/;"	f
tcomment#compatibility#Strdisplaywidth	.vim/pack/ide/start/tcomment/autoload/tcomment/compatibility.vim	/^    function! tcomment#compatibility#Strdisplaywidth(...) abort "{{{3$/;"	f
tcomment#compatibility#Strdisplaywidth	.vim/pack/ide/start/tcomment/autoload/tcomment/compatibility.vim	/^    function! tcomment#compatibility#Strdisplaywidth(string, ...) abort "{{{3$/;"	f
tcomment#compatibility#Strwidth	.vim/pack/ide/start/tcomment/autoload/tcomment/compatibility.vim	/^    function! tcomment#compatibility#Strwidth(text) abort "{{{3$/;"	f
tcomment#complete#Args	.vim/pack/ide/start/tcomment/autoload/tcomment/complete.vim	/^function! tcomment#complete#Args(ArgLead, CmdLine, CursorPos) abort "{{{3$/;"	f
tcomment#complete#Complete	.vim/pack/ide/start/tcomment/autoload/tcomment/complete.vim	/^function! tcomment#complete#Complete(ArgLead, CmdLine, CursorPos) abort "{{{3$/;"	f
tcomment#cursor#GetStartEnd	.vim/pack/ide/start/tcomment/autoload/tcomment/cursor.vim	/^function! tcomment#cursor#GetStartEnd(beg, end, comment_mode) abort "{{{3$/;"	f
tcomment#cursor#SetPos	.vim/pack/ide/start/tcomment/autoload/tcomment/cursor.vim	/^function! tcomment#cursor#SetPos(expr, pos) abort "{{{3$/;"	f
tcomment#debug#CollectInfo	.vim/pack/ide/start/tcomment/autoload/tcomment/debug.vim	/^function! tcomment#debug#CollectInfo() abort "{{{3$/;"	f
tcomment#deprecated#Check	.vim/pack/ide/start/tcomment/autoload/tcomment/deprecated.vim	/^function! tcomment#deprecated#Check() abort "{{{3$/;"	f
tcomment#filetype#Get	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^function! tcomment#filetype#Get(...) abort "{{{3$/;"	f
tcomment#filetype#GetAlt	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^function! tcomment#filetype#GetAlt(filetype, cdef) abort "{{{3$/;"	f
tcomment#filetype#Guess	.vim/pack/ide/start/tcomment/autoload/tcomment/filetype.vim	/^function! tcomment#filetype#Guess(beg, end, comment_mode, filetype, ...) abort$/;"	f
tcomment#format#EncodeCommentPart	.vim/pack/ide/start/tcomment/autoload/tcomment/format.vim	/^function! tcomment#format#EncodeCommentPart(string) abort$/;"	f
tcomment#format#Printf1	.vim/pack/ide/start/tcomment/autoload/tcomment/format.vim	/^function! tcomment#format#Printf1(fmt, expr) abort$/;"	f
tcomment#operator#Anyway	.vim/pack/ide/start/tcomment/autoload/tcomment/operator.vim	/^function! tcomment#operator#Anyway(type) abort "{{{3$/;"	f
tcomment#operator#Line	.vim/pack/ide/start/tcomment/autoload/tcomment/operator.vim	/^function! tcomment#operator#Line(type) abort "{{{3$/;"	f
tcomment#operator#LineAnyway	.vim/pack/ide/start/tcomment/autoload/tcomment/operator.vim	/^function! tcomment#operator#LineAnyway(type) abort "{{{3$/;"	f
tcomment#operator#Op	.vim/pack/ide/start/tcomment/autoload/tcomment/operator.vim	/^function! tcomment#operator#Op(type, ...) abort "{{{3$/;"	f
tcomment#regex#Count	.vim/pack/ide/start/tcomment/autoload/tcomment/regex.vim	/^function! tcomment#regex#Count(string, rx) abort$/;"	f
tcomment#regex#EndColRx	.vim/pack/ide/start/tcomment/autoload/tcomment/regex.vim	/^function! tcomment#regex#EndColRx(comment_mode, lnum, pos) abort$/;"	f
tcomment#regex#EndLineRx	.vim/pack/ide/start/tcomment/autoload/tcomment/regex.vim	/^function! tcomment#regex#EndLineRx(pos) abort$/;"	f
tcomment#regex#EndPosRx	.vim/pack/ide/start/tcomment/autoload/tcomment/regex.vim	/^function! tcomment#regex#EndPosRx(comment_mode, lnum, col) abort$/;"	f
tcomment#regex#StartColRx	.vim/pack/ide/start/tcomment/autoload/tcomment/regex.vim	/^function! tcomment#regex#StartColRx(cdef, comment_mode, col, ...) abort$/;"	f
tcomment#regex#StartLineRx	.vim/pack/ide/start/tcomment/autoload/tcomment/regex.vim	/^function! tcomment#regex#StartLineRx(pos) abort$/;"	f
tcomment#regex#StartPosRx	.vim/pack/ide/start/tcomment/autoload/tcomment/regex.vim	/^function! tcomment#regex#StartPosRx(cdef, comment_mode, line, col) abort$/;"	f
tcomment#syntax#GetSyntaxName	.vim/pack/ide/start/tcomment/autoload/tcomment/syntax.vim	/^function! tcomment#syntax#GetSyntaxName(lnum, col, ...) abort "{{{3$/;"	f
tcomment#textobject#InlineComment	.vim/pack/ide/start/tcomment/autoload/tcomment/textobject.vim	/^function! tcomment#textobject#InlineComment() abort "{{{3$/;"	f
tcomment#type#Collect	.vim/pack/ide/start/tcomment/autoload/tcomment/type.vim	/^function! tcomment#type#Collect() abort$/;"	f
tcomment#type#Define	.vim/pack/ide/start/tcomment/autoload/tcomment/type.vim	/^function! tcomment#type#Define(name, commentdef, ...) abort$/;"	f
tcomment#type#Exists	.vim/pack/ide/start/tcomment/autoload/tcomment/type.vim	/^function! tcomment#type#Exists(name, ...) abort$/;"	f
tcomment#type#GetDefinition	.vim/pack/ide/start/tcomment/autoload/tcomment/type.vim	/^function! tcomment#type#GetDefinition(name, ...) abort$/;"	f
tcomment#vimoptions#MakeCommentDefinition	.vim/pack/ide/start/tcomment/autoload/tcomment/vimoptions.vim	/^function! tcomment#vimoptions#MakeCommentDefinition(comment_mode) abort$/;"	f
test	.vim/pack/ide/start/tlib/test/tlib.vim	/^let test = tlib#Test#New()$/;"	v
test1	.vim/pack/ide/start/tlib/test/tlib.vim	/^let test1 = tlib#Test#New()$/;"	v
testc	.vim/pack/ide/start/tlib/test/tlib.vim	/^let testc = tlib#TestChild#New()$/;"	v
testworld	.vim/pack/ide/start/tlib/test/tlib.vim	/^let testworld = tlib#World#New()$/;"	v
text	.vim/pack/ide/start/syntastic/syntax_checkers/python/codec.py	/^            text = codecs.lookup(match.groupdict()["coding"]).incrementaldecoder().decode($/;"	v
text	.vim/pack/ide/start/syntastic/syntax_checkers/python/codec.py	/^        text = ''.join(text).encode('utf-8')$/;"	v
text	.vim/pack/ide/start/syntastic/syntax_checkers/python/codec.py	/^        text = fle.readlines()$/;"	v
tiny_cmd#Get	.vim/pack/ide/start/addon-mw-utils/autoload/tiny_cmd.vim	/^fun! tiny_cmd#Get(nr)$/;"	f
tiny_cmd#Pop	.vim/pack/ide/start/addon-mw-utils/autoload/tiny_cmd.vim	/^fun! tiny_cmd#Pop(nr)$/;"	f
tiny_cmd#Put	.vim/pack/ide/start/addon-mw-utils/autoload/tiny_cmd.vim	/^fun! tiny_cmd#Put(a)$/;"	f
tlib#Filter_cnf#New	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnf.vim	/^function! tlib#Filter_cnf#New(...) "{{{3$/;"	f
tlib#Filter_cnfd#New	.vim/pack/ide/start/tlib/autoload/tlib/Filter_cnfd.vim	/^function! tlib#Filter_cnfd#New(...) "{{{3$/;"	f
tlib#Filter_fuzzy#New	.vim/pack/ide/start/tlib/autoload/tlib/Filter_fuzzy.vim	/^function! tlib#Filter_fuzzy#New(...) "{{{3$/;"	f
tlib#Filter_glob#New	.vim/pack/ide/start/tlib/autoload/tlib/Filter_glob.vim	/^function! tlib#Filter_glob#New(...) "{{{3$/;"	f
tlib#Object#Methods	.vim/pack/ide/start/tlib/autoload/tlib/Object.vim	/^function! tlib#Object#Methods(object, ...) "{{{3$/;"	f
tlib#Object#New	.vim/pack/ide/start/tlib/autoload/tlib/Object.vim	/^function! tlib#Object#New(...) "{{{3$/;"	f
tlib#Test#New	.vim/pack/ide/start/tlib/autoload/tlib/Test.vim	/^function! tlib#Test#New(...) "{{{3$/;"	f
tlib#TestChild#New	.vim/pack/ide/start/tlib/autoload/tlib/TestChild.vim	/^function! tlib#TestChild#New(...) "{{{3$/;"	f
tlib#World#New	.vim/pack/ide/start/tlib/autoload/tlib/World.vim	/^function! tlib#World#New(...) abort$/;"	f
tlib#agent#AND	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#AND(world, selected) "{{{3$/;"	f
tlib#agent#Complete	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Complete(world, selected) abort "{{{3$/;"	f
tlib#agent#CompleteAgentNames	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#CompleteAgentNames(ArgLead, CmdLine, CursorPos)$/;"	f
tlib#agent#Copy	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Copy(world, selected) "{{{3$/;"	f
tlib#agent#CopyItems	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#CopyItems(world, selected) "{{{3$/;"	f
tlib#agent#Cut	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Cut(world, selected) "{{{3$/;"	f
tlib#agent#Debug	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Debug(world, selected) "{{{3$/;"	f
tlib#agent#DeleteItems	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#DeleteItems(world, selected) "{{{3$/;"	f
tlib#agent#DoAtLine	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#DoAtLine(world, selected) "{{{3$/;"	f
tlib#agent#Down	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Down(world, selected, ...) "{{{3$/;"	f
tlib#agent#DownN	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#DownN(world, selected) "{{{3$/;"	f
tlib#agent#EditFile	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#EditFile(world, selected) "{{{3$/;"	f
tlib#agent#EditFileInSplit	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#EditFileInSplit(world, selected) "{{{3$/;"	f
tlib#agent#EditFileInTab	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#EditFileInTab(world, selected) "{{{3$/;"	f
tlib#agent#EditFileInVSplit	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#EditFileInVSplit(world, selected) "{{{3$/;"	f
tlib#agent#EditFileInWindow	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#EditFileInWindow(world, selected) "{{{3$/;"	f
tlib#agent#EditItem	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#EditItem(world, selected) "{{{3$/;"	f
tlib#agent#EditReturnValue	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#EditReturnValue(world, rv) "{{{3$/;"	f
tlib#agent#End	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#End(world, selected) "{{{3$/;"	f
tlib#agent#ExecAgentByName	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#ExecAgentByName(world, selected) "{{{3$/;"	f
tlib#agent#Exit	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Exit(world, selected) "{{{3$/;"	f
tlib#agent#GotoLine	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#GotoLine(world, selected) "{{{3$/;"	f
tlib#agent#Help	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Help(world, selected) "{{{3$/;"	f
tlib#agent#Home	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Home(world, selected) "{{{3$/;"	f
tlib#agent#Input	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Input(world, selected) "{{{3$/;"	f
tlib#agent#NewItem	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#NewItem(world, selected) "{{{3$/;"	f
tlib#agent#Null	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Null(world, selected) "{{{3$/;"	f
tlib#agent#OR	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#OR(world, selected) "{{{3$/;"	f
tlib#agent#PageDown	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#PageDown(world, selected) "{{{3$/;"	f
tlib#agent#PageUp	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#PageUp(world, selected) "{{{3$/;"	f
tlib#agent#Paste	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Paste(world, selected) "{{{3$/;"	f
tlib#agent#PopFilter	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#PopFilter(world, selected) "{{{3$/;"	f
tlib#agent#PreviewLine	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#PreviewLine(world, selected) "{{{3$/;"	f
tlib#agent#ReduceFilter	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#ReduceFilter(world, selected) "{{{3$/;"	f
tlib#agent#Reset	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Reset(world, selected) "{{{3$/;"	f
tlib#agent#RestrictView	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#RestrictView(world, selected) "{{{3$/;"	f
tlib#agent#Select	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Select(world, selected) "{{{3$/;"	f
tlib#agent#SelectAll	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#SelectAll(world, selected) "{{{3$/;"	f
tlib#agent#SelectDown	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#SelectDown(world, selected) "{{{3$/;"	f
tlib#agent#SelectUp	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#SelectUp(world, selected) "{{{3$/;"	f
tlib#agent#ShiftLeft	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#ShiftLeft(world, selected) "{{{3$/;"	f
tlib#agent#ShiftRight	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#ShiftRight(world, selected) "{{{3$/;"	f
tlib#agent#ShowInfo	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#ShowInfo(world, selected)$/;"	f
tlib#agent#Suspend	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Suspend(world, selected) "{{{3$/;"	f
tlib#agent#SuspendToParentWindow	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#SuspendToParentWindow(world, selected) "{{{3$/;"	f
tlib#agent#ToggleRestrictView	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#ToggleRestrictView(world, selected) "{{{3$/;"	f
tlib#agent#ToggleScrollbind	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#ToggleScrollbind(world, selected) "{{{3$/;"	f
tlib#agent#ToggleStickyList	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#ToggleStickyList(world, selected) "{{{3$/;"	f
tlib#agent#UnrestrictView	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#UnrestrictView(world, selected) "{{{3$/;"	f
tlib#agent#Up	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Up(world, selected, ...) "{{{3$/;"	f
tlib#agent#UpN	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#UpN(world, selected) "{{{3$/;"	f
tlib#agent#ViewBufferInWindow	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#ViewBufferInWindow(world, selected) "{{{3$/;"	f
tlib#agent#ViewFile	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#ViewFile(world, selected) "{{{3$/;"	f
tlib#agent#Wildcard	.vim/pack/ide/start/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Wildcard(world, selected) "{{{3$/;"	f
tlib#arg#CComplete	.vim/pack/ide/start/tlib/autoload/tlib/arg.vim	/^function! tlib#arg#CComplete(def, ArgLead) abort "{{{3$/;"	f
tlib#arg#Ex	.vim/pack/ide/start/tlib/autoload/tlib/arg.vim	/^function! tlib#arg#Ex(arg, ...) "{{{3$/;"	f
tlib#arg#Get	.vim/pack/ide/start/tlib/autoload/tlib/arg.vim	/^function! tlib#arg#Get(n, var, ...) "{{{3$/;"	f
tlib#arg#GetOpts	.vim/pack/ide/start/tlib/autoload/tlib/arg.vim	/^function! tlib#arg#GetOpts(args, ...) abort "{{{3$/;"	f
tlib#arg#Let	.vim/pack/ide/start/tlib/autoload/tlib/arg.vim	/^function! tlib#arg#Let(list, ...) "{{{3$/;"	f
tlib#arg#StringAsKeyArgs	.vim/pack/ide/start/tlib/autoload/tlib/arg.vim	/^function! tlib#arg#StringAsKeyArgs(string, ...) "{{{1$/;"	f
tlib#arg#StringAsKeyArgsEqual	.vim/pack/ide/start/tlib/autoload/tlib/arg.vim	/^function! tlib#arg#StringAsKeyArgsEqual(string) "{{{1$/;"	f
tlib#assert#All	.vim/pack/ide/start/tlib/autoload/tlib/assert.vim	/^function! tlib#assert#All(vals) abort "{{{3$/;"	f
tlib#assert#Assert	.vim/pack/ide/start/tlib/autoload/tlib/assert.vim	/^function! tlib#assert#Assert(caller, check, vals) abort "{{{3$/;"	f
tlib#assert#Disable	.vim/pack/ide/start/tlib/autoload/tlib/assert.vim	/^function! tlib#assert#Disable() abort "{{{3$/;"	f
tlib#assert#Enable	.vim/pack/ide/start/tlib/autoload/tlib/assert.vim	/^function! tlib#assert#Enable() abort "{{{3$/;"	f
tlib#assert#Map	.vim/pack/ide/start/tlib/autoload/tlib/assert.vim	/^function! tlib#assert#Map(vals, expr) abort "{{{3$/;"	f
tlib#autocmdgroup#Init	.vim/pack/ide/start/tlib/autoload/tlib/autocmdgroup.vim	/^function! tlib#autocmdgroup#Init() "{{{3$/;"	f
tlib#balloon#Expand	.vim/pack/ide/start/tlib/autoload/tlib/balloon.vim	/^function! tlib#balloon#Expand(expr) abort "{{{3$/;"	f
tlib#balloon#Expr	.vim/pack/ide/start/tlib/autoload/tlib/balloon.vim	/^function! tlib#balloon#Expr() "{{{3$/;"	f
tlib#balloon#Register	.vim/pack/ide/start/tlib/autoload/tlib/balloon.vim	/^function! tlib#balloon#Register(expr) "{{{3$/;"	f
tlib#balloon#Remove	.vim/pack/ide/start/tlib/autoload/tlib/balloon.vim	/^function! tlib#balloon#Remove(expr) "{{{3$/;"	f
tlib#bitwise#AND	.vim/pack/ide/start/tlib/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#AND(num1, num2, ...) "{{{3$/;"	f
tlib#bitwise#Add	.vim/pack/ide/start/tlib/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#Add(num1, num2, ...) "{{{3$/;"	f
tlib#bitwise#Bits2Num	.vim/pack/ide/start/tlib/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#Bits2Num(bits, ...) "{{{3$/;"	f
tlib#bitwise#Num2Bits	.vim/pack/ide/start/tlib/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#Num2Bits(num) "{{{3$/;"	f
tlib#bitwise#OR	.vim/pack/ide/start/tlib/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#OR(num1, num2, ...) "{{{3$/;"	f
tlib#bitwise#ShiftLeft	.vim/pack/ide/start/tlib/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#ShiftLeft(bits, n) "{{{3$/;"	f
tlib#bitwise#ShiftRight	.vim/pack/ide/start/tlib/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#ShiftRight(bits, n) "{{{3$/;"	f
tlib#bitwise#Sub	.vim/pack/ide/start/tlib/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#Sub(num1, num2, ...) "{{{3$/;"	f
tlib#bitwise#XOR	.vim/pack/ide/start/tlib/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#XOR(num1, num2, ...) "{{{3$/;"	f
tlib#buffer#BufDo	.vim/pack/ide/start/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#BufDo(exec) abort "{{{3$/;"	f
tlib#buffer#CurrentByte	.vim/pack/ide/start/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#CurrentByte() abort "{{{3$/;"	f
tlib#buffer#DeleteRange	.vim/pack/ide/start/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#DeleteRange(line1, line2) abort "{{{3$/;"	f
tlib#buffer#DisableMRU	.vim/pack/ide/start/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#DisableMRU() abort "{{{3$/;"	f
tlib#buffer#EnableMRU	.vim/pack/ide/start/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#EnableMRU() abort "{{{3$/;"	f
tlib#buffer#Eval	.vim/pack/ide/start/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#Eval(buffer, code) abort "{{{3$/;"	f
tlib#buffer#GetList	.vim/pack/ide/start/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#GetList(...) abort$/;"	f
tlib#buffer#HighlightLine	.vim/pack/ide/start/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#HighlightLine(...) abort "{{{3$/;"	f
tlib#buffer#InsertText	.vim/pack/ide/start/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#InsertText(text, ...) abort "{{{3$/;"	f
tlib#buffer#InsertText0	.vim/pack/ide/start/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#InsertText0(text, ...) abort "{{{3$/;"	f
tlib#buffer#KeepCursorPosition	.vim/pack/ide/start/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#KeepCursorPosition(cmd) abort "{{{3$/;"	f
tlib#buffer#ReplaceRange	.vim/pack/ide/start/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#ReplaceRange(line1, line2, lines) abort$/;"	f
tlib#buffer#ScratchEnd	.vim/pack/ide/start/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#ScratchEnd() abort "{{{3$/;"	f
tlib#buffer#ScratchStart	.vim/pack/ide/start/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#ScratchStart() abort "{{{3$/;"	f
tlib#buffer#Set	.vim/pack/ide/start/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#Set(buffer) abort "{{{3$/;"	f
tlib#buffer#ViewLine	.vim/pack/ide/start/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#ViewLine(line, ...) abort "{{{3$/;"	f
tlib#cache#Dir	.vim/pack/ide/start/tlib/autoload/tlib/cache.vim	/^function! tlib#cache#Dir(...) "{{{3$/;"	f
tlib#cache#EncodedFilename	.vim/pack/ide/start/tlib/autoload/tlib/cache.vim	/^function! tlib#cache#EncodedFilename(type, file, ...) "{{{3$/;"	f
tlib#cache#Filename	.vim/pack/ide/start/tlib/autoload/tlib/cache.vim	/^function! tlib#cache#Filename(type, ...) "{{{3$/;"	f
tlib#cache#Get	.vim/pack/ide/start/tlib/autoload/tlib/cache.vim	/^function! tlib#cache#Get(cfile, ...) "{{{3$/;"	f
tlib#cache#ListFilesInCache	.vim/pack/ide/start/tlib/autoload/tlib/cache.vim	/^function! tlib#cache#ListFilesInCache(...) "{{{3$/;"	f
tlib#cache#MTime	.vim/pack/ide/start/tlib/autoload/tlib/cache.vim	/^function! tlib#cache#MTime(cfile) "{{{3$/;"	f
tlib#cache#MaybePurge	.vim/pack/ide/start/tlib/autoload/tlib/cache.vim	/^function! tlib#cache#MaybePurge() "{{{3$/;"	f
tlib#cache#Purge	.vim/pack/ide/start/tlib/autoload/tlib/cache.vim	/^function! tlib#cache#Purge() "{{{3$/;"	f
tlib#cache#Save	.vim/pack/ide/start/tlib/autoload/tlib/cache.vim	/^function! tlib#cache#Save(cfile, value, ...) "{{{3$/;"	f
tlib#cache#Value	.vim/pack/ide/start/tlib/autoload/tlib/cache.vim	/^function! tlib#cache#Value(cfile, generator, ftime, ...) "{{{3$/;"	f
tlib#cache#ValueFromName	.vim/pack/ide/start/tlib/autoload/tlib/cache.vim	/^function! tlib#cache#ValueFromName(type, name, ...) abort "{{{3$/;"	f
tlib#char#Get	.vim/pack/ide/start/tlib/autoload/tlib/char.vim	/^function! tlib#char#Get(...) "{{{3$/;"	f
tlib#char#GetWithTimeout	.vim/pack/ide/start/tlib/autoload/tlib/char.vim	/^function! tlib#char#GetWithTimeout(timeout, ...) "{{{3$/;"	f
tlib#char#IsAvailable	.vim/pack/ide/start/tlib/autoload/tlib/char.vim	/^function! tlib#char#IsAvailable() "{{{3$/;"	f
tlib#cmd#BrowseOutput	.vim/pack/ide/start/tlib/autoload/tlib/cmd.vim	/^function! tlib#cmd#BrowseOutput(command) "{{{3$/;"	f
tlib#cmd#BrowseOutputWithCallback	.vim/pack/ide/start/tlib/autoload/tlib/cmd.vim	/^function! tlib#cmd#BrowseOutputWithCallback(callback, command) "{{{3$/;"	f
tlib#cmd#Capture	.vim/pack/ide/start/tlib/autoload/tlib/cmd.vim	/^function! tlib#cmd#Capture(cmd) "{{{3$/;"	f
tlib#cmd#DefaultBrowseOutput	.vim/pack/ide/start/tlib/autoload/tlib/cmd.vim	/^function! tlib#cmd#DefaultBrowseOutput(cmd) "{{{3$/;"	f
tlib#cmd#OutputAsList	.vim/pack/ide/start/tlib/autoload/tlib/cmd.vim	/^function! tlib#cmd#OutputAsList(command) "{{{3$/;"	f
tlib#cmd#ParseScriptname	.vim/pack/ide/start/tlib/autoload/tlib/cmd.vim	/^function! tlib#cmd#ParseScriptname(line) "{{{3$/;"	f
tlib#cmd#TBrowseScriptnames	.vim/pack/ide/start/tlib/autoload/tlib/cmd.vim	/^function! tlib#cmd#TBrowseScriptnames() abort "{{{3$/;"	f
tlib#cmd#Time	.vim/pack/ide/start/tlib/autoload/tlib/cmd.vim	/^function! tlib#cmd#Time(cmd) "{{{3$/;"	f
tlib#cmd#UseVertical	.vim/pack/ide/start/tlib/autoload/tlib/cmd.vim	/^function! tlib#cmd#UseVertical(...) "{{{3$/;"	f
tlib#comments#Comments	.vim/pack/ide/start/tlib/autoload/tlib/comments.vim	/^function! tlib#comments#Comments(...)$/;"	f
tlib#date#AddDays	.vim/pack/ide/start/tlib/autoload/tlib/date.vim	/^function! tlib#date#AddDays(date, n) abort "{{{3$/;"	f
tlib#date#DiffInDays	.vim/pack/ide/start/tlib/autoload/tlib/date.vim	/^function! tlib#date#DiffInDays(date, ...)$/;"	f
tlib#date#Format	.vim/pack/ide/start/tlib/autoload/tlib/date.vim	/^function! tlib#date#Format(...) abort "{{{3$/;"	f
tlib#date#IsDate	.vim/pack/ide/start/tlib/autoload/tlib/date.vim	/^function! tlib#date#IsDate(text) abort "{{{3$/;"	f
tlib#date#Parse	.vim/pack/ide/start/tlib/autoload/tlib/date.vim	/^function! tlib#date#Parse(date, ...) "{{{3$/;"	f
tlib#date#SecondsSince1970	.vim/pack/ide/start/tlib/autoload/tlib/date.vim	/^function! tlib#date#SecondsSince1970(date, ...) "{{{3$/;"	f
tlib#date#Shift	.vim/pack/ide/start/tlib/autoload/tlib/date.vim	/^function! tlib#date#Shift(date, shift) abort "{{{3$/;"	f
tlib#dictionary#Rev	.vim/pack/ide/start/tlib/autoload/tlib/dictionary.vim	/^function! tlib#dictionary#Rev(dict, ...) abort "{{{3$/;"	f
tlib#dir#CD	.vim/pack/ide/start/tlib/autoload/tlib/dir.vim	/^function! tlib#dir#CD(dir, ...) "{{{3$/;"	f
tlib#dir#CanonicName	.vim/pack/ide/start/tlib/autoload/tlib/dir.vim	/^function! tlib#dir#CanonicName(dirname) "{{{3$/;"	f
tlib#dir#Ensure	.vim/pack/ide/start/tlib/autoload/tlib/dir.vim	/^function! tlib#dir#Ensure(dir) "{{{3$/;"	f
tlib#dir#MyRuntime	.vim/pack/ide/start/tlib/autoload/tlib/dir.vim	/^function! tlib#dir#MyRuntime() "{{{3$/;"	f
tlib#dir#NativeName	.vim/pack/ide/start/tlib/autoload/tlib/dir.vim	/^function! tlib#dir#NativeName(dirname) "{{{3$/;"	f
tlib#dir#PlainName	.vim/pack/ide/start/tlib/autoload/tlib/dir.vim	/^function! tlib#dir#PlainName(dirname) "{{{3$/;"	f
tlib#dir#Pop	.vim/pack/ide/start/tlib/autoload/tlib/dir.vim	/^function! tlib#dir#Pop() "{{{3$/;"	f
tlib#dir#Push	.vim/pack/ide/start/tlib/autoload/tlib/dir.vim	/^function! tlib#dir#Push(dir, ...) "{{{3$/;"	f
tlib#eval#Extend	.vim/pack/ide/start/tlib/autoload/tlib/eval.vim	/^function! tlib#eval#Extend(a, b, ...) abort "{{{3$/;"	f
tlib#eval#FormatValue	.vim/pack/ide/start/tlib/autoload/tlib/eval.vim	/^function! tlib#eval#FormatValue(value, ...) "{{{3$/;"	f
tlib#file#Absolute	.vim/pack/ide/start/tlib/autoload/tlib/file.vim	/^function! tlib#file#Absolute(filename, ...) abort "{{{3$/;"	f
tlib#file#Canonic	.vim/pack/ide/start/tlib/autoload/tlib/file.vim	/^function! tlib#file#Canonic(filename, ...) abort "{{{3$/;"	f
tlib#file#Edit	.vim/pack/ide/start/tlib/autoload/tlib/file.vim	/^function! tlib#file#Edit(fileid) abort "{{{3$/;"	f
tlib#file#Filereadable	.vim/pack/ide/start/tlib/autoload/tlib/file.vim	/^function! tlib#file#Filereadable(filename) abort "{{{3$/;"	f
tlib#file#FilterFiles	.vim/pack/ide/start/tlib/autoload/tlib/file.vim	/^function! tlib#file#FilterFiles(files, options) abort "{{{3$/;"	f
tlib#file#Glob	.vim/pack/ide/start/tlib/autoload/tlib/file.vim	/^    function! tlib#file#Glob(pattern, ...) abort "{{{3$/;"	f
tlib#file#Globpath	.vim/pack/ide/start/tlib/autoload/tlib/file.vim	/^    function! tlib#file#Globpath(path, pattern, ...) abort "{{{3$/;"	f
tlib#file#IsAbsolute	.vim/pack/ide/start/tlib/autoload/tlib/file.vim	/^function! tlib#file#IsAbsolute(filename) abort "{{{3$/;"	f
tlib#file#Join	.vim/pack/ide/start/tlib/autoload/tlib/file.vim	/^function! tlib#file#Join(filename_parts, ...) abort "{{{3$/;"	f
tlib#file#Relative	.vim/pack/ide/start/tlib/autoload/tlib/file.vim	/^function! tlib#file#Relative(filename, basedir) abort "{{{3$/;"	f
tlib#file#Split	.vim/pack/ide/start/tlib/autoload/tlib/file.vim	/^function! tlib#file#Split(filename) abort "{{{3$/;"	f
tlib#file#With	.vim/pack/ide/start/tlib/autoload/tlib/file.vim	/^function! tlib#file#With(fcmd, bcmd, files, ...) abort "{{{3$/;"	f
tlib#fixes#Winpos	.vim/pack/ide/start/tlib/autoload/tlib/fixes.vim	/^function! tlib#fixes#Winpos() "{{{3$/;"	f
tlib#grep#Do	.vim/pack/ide/start/tlib/autoload/tlib/grep.vim	/^function! tlib#grep#Do(cmd, rx, files) "{{{3$/;"	f
tlib#grep#List	.vim/pack/ide/start/tlib/autoload/tlib/grep.vim	/^function! tlib#grep#List(rx, files) "{{{3$/;"	f
tlib#grep#LocList	.vim/pack/ide/start/tlib/autoload/tlib/grep.vim	/^function! tlib#grep#LocList(rx, files) "{{{3$/;"	f
tlib#grep#QuickFixList	.vim/pack/ide/start/tlib/autoload/tlib/grep.vim	/^function! tlib#grep#QuickFixList(rx, files) "{{{3$/;"	f
tlib#hash#Adler32	.vim/pack/ide/start/tlib/autoload/tlib/hash.vim	/^function! tlib#hash#Adler32(chars) "{{{3$/;"	f
tlib#hash#Adler32_tlib	.vim/pack/ide/start/tlib/autoload/tlib/hash.vim	/^function! tlib#hash#Adler32_tlib(chars) "{{{3$/;"	f
tlib#hash#Adler32_vim	.vim/pack/ide/start/tlib/autoload/tlib/hash.vim	/^function! tlib#hash#Adler32_vim(chars) "{{{3$/;"	f
tlib#hash#CRC32B	.vim/pack/ide/start/tlib/autoload/tlib/hash.vim	/^function! tlib#hash#CRC32B(chars) "{{{3$/;"	f
tlib#hash#CRC32B_ruby	.vim/pack/ide/start/tlib/autoload/tlib/hash.vim	/^function! tlib#hash#CRC32B_ruby(chars) "{{{3$/;"	f
tlib#hash#CRC32B_vim	.vim/pack/ide/start/tlib/autoload/tlib/hash.vim	/^function! tlib#hash#CRC32B_vim(chars) "{{{3$/;"	f
tlib#hash#CreateCrcTable	.vim/pack/ide/start/tlib/autoload/tlib/hash.vim	/^function! tlib#hash#CreateCrcTable() "{{{3$/;"	f
tlib#hook#Run	.vim/pack/ide/start/tlib/autoload/tlib/hook.vim	/^function! tlib#hook#Run(hook, ...) "{{{3$/;"	f
tlib#input#CommandSelect	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^function! tlib#input#CommandSelect(command, ...) "{{{3$/;"	f
tlib#input#Dialog	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^function! tlib#input#Dialog(text, options, default) "{{{3$/;"	f
tlib#input#EditCallback	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^function! tlib#input#EditCallback(...) "{{{3$/;"	f
tlib#input#EditList	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^function! tlib#input#EditList(query, list, ...) "{{{3$/;"	f
tlib#input#EditW	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^function! tlib#input#EditW(world, name, value, callback, ...) "{{{3$/;"	f
tlib#input#List	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^function! tlib#input#List(type, ...) "{{{3$/;"	f
tlib#input#ListD	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^function! tlib#input#ListD(dict) "{{{3$/;"	f
tlib#input#ListW	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^function! tlib#input#ListW(world, ...) "{{{3$/;"	f
tlib#input#Resume	.vim/pack/ide/start/tlib/autoload/tlib/input.vim	/^function! tlib#input#Resume(name, pick, bufnr) "{{{3$/;"	f
tlib#list#All	.vim/pack/ide/start/tlib/autoload/tlib/list.vim	/^function! tlib#list#All(list, expr) abort "{{{3$/;"	f
tlib#list#Any	.vim/pack/ide/start/tlib/autoload/tlib/list.vim	/^function! tlib#list#Any(list, expr) abort "{{{3$/;"	f
tlib#list#Compact	.vim/pack/ide/start/tlib/autoload/tlib/list.vim	/^function! tlib#list#Compact(list) abort "{{{3$/;"	f
tlib#list#Find	.vim/pack/ide/start/tlib/autoload/tlib/list.vim	/^function! tlib#list#Find(list, filter, ...) abort "{{{3$/;"	f
tlib#list#FindAll	.vim/pack/ide/start/tlib/autoload/tlib/list.vim	/^function! tlib#list#FindAll(list, filter, ...) abort "{{{3$/;"	f
tlib#list#Flatten	.vim/pack/ide/start/tlib/autoload/tlib/list.vim	/^function! tlib#list#Flatten(list) abort "{{{3$/;"	f
tlib#list#Inject	.vim/pack/ide/start/tlib/autoload/tlib/list.vim	/^function! tlib#list#Inject(list, value, Function) abort "{{{3$/;"	f
tlib#list#Remove	.vim/pack/ide/start/tlib/autoload/tlib/list.vim	/^function! tlib#list#Remove(list, element) abort "{{{3$/;"	f
tlib#list#RemoveAll	.vim/pack/ide/start/tlib/autoload/tlib/list.vim	/^function! tlib#list#RemoveAll(list, element) abort "{{{3$/;"	f
tlib#list#ToDictionary	.vim/pack/ide/start/tlib/autoload/tlib/list.vim	/^function! tlib#list#ToDictionary(list, default, ...) abort "{{{3$/;"	f
tlib#list#Uniq	.vim/pack/ide/start/tlib/autoload/tlib/list.vim	/^function! tlib#list#Uniq(list, ...) abort "{{{3$/;"	f
tlib#list#Zip	.vim/pack/ide/start/tlib/autoload/tlib/list.vim	/^function! tlib#list#Zip(lists, ...) abort "{{{3$/;"	f
tlib#loclist#Browse	.vim/pack/ide/start/tlib/autoload/tlib/loclist.vim	/^function! tlib#loclist#Browse(...) abort "{{{3$/;"	f
tlib#map#PumAccept	.vim/pack/ide/start/tlib/autoload/tlib/map.vim	/^function! tlib#map#PumAccept(key) "{{{3$/;"	f
tlib#normal#WithRegister	.vim/pack/ide/start/tlib/autoload/tlib/normal.vim	/^function! tlib#normal#WithRegister(cmd, ...) "{{{3$/;"	f
tlib#notify#Echo	.vim/pack/ide/start/tlib/autoload/tlib/notify.vim	/^function! tlib#notify#Echo(text, ...)$/;"	f
tlib#notify#PrintError	.vim/pack/ide/start/tlib/autoload/tlib/notify.vim	/^function! tlib#notify#PrintError() abort "{{{3$/;"	f
tlib#notify#TrimMessage	.vim/pack/ide/start/tlib/autoload/tlib/notify.vim	/^function! tlib#notify#TrimMessage(message) "{{{3$/;"	f
tlib#number#ConvertBase	.vim/pack/ide/start/tlib/autoload/tlib/number.vim	/^function! tlib#number#ConvertBase(num, base, ...) "{{{3$/;"	f
tlib#paragraph#GetMetric	.vim/pack/ide/start/tlib/autoload/tlib/paragraph.vim	/^function! tlib#paragraph#GetMetric() "{{{3$/;"	f
tlib#paragraph#Move	.vim/pack/ide/start/tlib/autoload/tlib/paragraph.vim	/^function! tlib#paragraph#Move(direction, count)$/;"	f
tlib#persistent#Dir	.vim/pack/ide/start/tlib/autoload/tlib/persistent.vim	/^function! tlib#persistent#Dir() "{{{3$/;"	f
tlib#persistent#EncodedFilename	.vim/pack/ide/start/tlib/autoload/tlib/persistent.vim	/^function! tlib#persistent#EncodedFilename(type, file, ...) "{{{3$/;"	f
tlib#persistent#Filename	.vim/pack/ide/start/tlib/autoload/tlib/persistent.vim	/^function! tlib#persistent#Filename(type, ...) "{{{3$/;"	f
tlib#persistent#Get	.vim/pack/ide/start/tlib/autoload/tlib/persistent.vim	/^function! tlib#persistent#Get(...) "{{{3$/;"	f
tlib#persistent#MTime	.vim/pack/ide/start/tlib/autoload/tlib/persistent.vim	/^function! tlib#persistent#MTime(cfile) "{{{3$/;"	f
tlib#persistent#Save	.vim/pack/ide/start/tlib/autoload/tlib/persistent.vim	/^function! tlib#persistent#Save(...) "{{{3$/;"	f
tlib#persistent#Value	.vim/pack/ide/start/tlib/autoload/tlib/persistent.vim	/^function! tlib#persistent#Value(...) "{{{3$/;"	f
tlib#progressbar#Display	.vim/pack/ide/start/tlib/autoload/tlib/progressbar.vim	/^function! tlib#progressbar#Display(value, ...) "{{{3$/;"	f
tlib#progressbar#Init	.vim/pack/ide/start/tlib/autoload/tlib/progressbar.vim	/^function! tlib#progressbar#Init(max, ...) "{{{3$/;"	f
tlib#progressbar#Restore	.vim/pack/ide/start/tlib/autoload/tlib/progressbar.vim	/^function! tlib#progressbar#Restore(...) "{{{3$/;"	f
tlib#qfl#AgentEditLine	.vim/pack/ide/start/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentEditLine(world, selected) "{{{3$/;"	f
tlib#qfl#AgentEditQFE	.vim/pack/ide/start/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentEditQFE(world, selected, ...) "{{{3$/;"	f
tlib#qfl#AgentGotoQFE	.vim/pack/ide/start/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentGotoQFE(world, selected) "{{{3$/;"	f
tlib#qfl#AgentPreviewQFE	.vim/pack/ide/start/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentPreviewQFE(world, selected) "{{{3$/;"	f
tlib#qfl#AgentSplitBuffer	.vim/pack/ide/start/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentSplitBuffer(world, selected) "{{{3$/;"	f
tlib#qfl#AgentTabBuffer	.vim/pack/ide/start/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentTabBuffer(world, selected) "{{{3$/;"	f
tlib#qfl#AgentVSplitBuffer	.vim/pack/ide/start/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentVSplitBuffer(world, selected) "{{{3$/;"	f
tlib#qfl#AgentWithSelected	.vim/pack/ide/start/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentWithSelected(world, selected, ...) "{{{3$/;"	f
tlib#qfl#Balloon	.vim/pack/ide/start/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#Balloon() "{{{3$/;"	f
tlib#qfl#Browse	.vim/pack/ide/start/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#Browse(...) abort "{{{3$/;"	f
tlib#qfl#EditLine	.vim/pack/ide/start/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#EditLine(lnum) "{{{3$/;"	f
tlib#qfl#FormatQFLE	.vim/pack/ide/start/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#FormatQFLE(qfe) dict abort "{{{3$/;"	f
tlib#qfl#InitListBuffer	.vim/pack/ide/start/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#InitListBuffer(world) "{{{3$/;"	f
tlib#qfl#QfeFilename	.vim/pack/ide/start/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#QfeFilename(qfe) abort "{{{3$/;"	f
tlib#qfl#QflList	.vim/pack/ide/start/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#QflList(list, ...) abort "{{{3$/;"	f
tlib#qfl#RunCmdOnSelected	.vim/pack/ide/start/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#RunCmdOnSelected(world, selected, cmd, ...) "{{{3$/;"	f
tlib#qfl#SetFollowCursor	.vim/pack/ide/start/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#SetFollowCursor(world, selected) "{{{3$/;"	f
tlib#qfl#SetSyntax	.vim/pack/ide/start/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#SetSyntax() dict abort "{{{3$/;"	f
tlib#rx#Escape	.vim/pack/ide/start/tlib/autoload/tlib/rx.vim	/^function! tlib#rx#Escape(text, ...) "{{{3$/;"	f
tlib#rx#EscapeReplace	.vim/pack/ide/start/tlib/autoload/tlib/rx.vim	/^function! tlib#rx#EscapeReplace(text, ...) "{{{3$/;"	f
tlib#rx#LooksLikeRegexp	.vim/pack/ide/start/tlib/autoload/tlib/rx.vim	/^function! tlib#rx#LooksLikeRegexp(text) abort "{{{3$/;"	f
tlib#rx#Suffixes	.vim/pack/ide/start/tlib/autoload/tlib/rx.vim	/^function! tlib#rx#Suffixes(...) "{{{3$/;"	f
tlib#scratch#CloseScratch	.vim/pack/ide/start/tlib/autoload/tlib/scratch.vim	/^function! tlib#scratch#CloseScratch(keyargs, ...) "{{{3$/;"	f
tlib#scratch#UseScratch	.vim/pack/ide/start/tlib/autoload/tlib/scratch.vim	/^function! tlib#scratch#UseScratch(...) "{{{3$/;"	f
tlib#selection#GetSelection	.vim/pack/ide/start/tlib/autoload/tlib/selection.vim	/^function! tlib#selection#GetSelection(mode, ...) range "{{{3$/;"	f
tlib#signs#ClearAll	.vim/pack/ide/start/tlib/autoload/tlib/signs.vim	/^function! tlib#signs#ClearAll(sign) "{{{3$/;"	f
tlib#signs#ClearBuffer	.vim/pack/ide/start/tlib/autoload/tlib/signs.vim	/^function! tlib#signs#ClearBuffer(sign, bufnr) "{{{3$/;"	f
tlib#signs#Mark	.vim/pack/ide/start/tlib/autoload/tlib/signs.vim	/^function! tlib#signs#Mark(sign, list) "{{{3$/;"	f
tlib#string#Chomp	.vim/pack/ide/start/tlib/autoload/tlib/string.vim	/^function! tlib#string#Chomp(string, ...) "{{{3$/;"	f
tlib#string#Count	.vim/pack/ide/start/tlib/autoload/tlib/string.vim	/^function! tlib#string#Count(string, rx) "{{{3$/;"	f
tlib#string#Format	.vim/pack/ide/start/tlib/autoload/tlib/string.vim	/^function! tlib#string#Format(template, dict, ...) "{{{3$/;"	f
tlib#string#Input	.vim/pack/ide/start/tlib/autoload/tlib/string.vim	/^function! tlib#string#Input(...) abort "{{{3$/;"	f
tlib#string#MatchAll	.vim/pack/ide/start/tlib/autoload/tlib/string.vim	/^function! tlib#string#MatchAll(string, regexp, ...) abort "{{{3$/;"	f
tlib#string#Printf1	.vim/pack/ide/start/tlib/autoload/tlib/string.vim	/^function! tlib#string#Printf1(format, string) "{{{3$/;"	f
tlib#string#RemoveBackslashes	.vim/pack/ide/start/tlib/autoload/tlib/string.vim	/^function! tlib#string#RemoveBackslashes(text, ...) "{{{3$/;"	f
tlib#string#SplitCommaList	.vim/pack/ide/start/tlib/autoload/tlib/string.vim	/^function! tlib#string#SplitCommaList(text, ...) abort "{{{3$/;"	f
tlib#string#Strcharpart	.vim/pack/ide/start/tlib/autoload/tlib/string.vim	/^    function! tlib#string#Strcharpart(...) abort "{{{3$/;"	f
tlib#string#Strip	.vim/pack/ide/start/tlib/autoload/tlib/string.vim	/^function! tlib#string#Strip(string) "{{{3$/;"	f
tlib#string#TrimLeft	.vim/pack/ide/start/tlib/autoload/tlib/string.vim	/^function! tlib#string#TrimLeft(string) "{{{3$/;"	f
tlib#string#TrimRight	.vim/pack/ide/start/tlib/autoload/tlib/string.vim	/^function! tlib#string#TrimRight(string) "{{{3$/;"	f
tlib#syntax#Collect	.vim/pack/ide/start/tlib/autoload/tlib/syntax.vim	/^function! tlib#syntax#Collect() "{{{3$/;"	f
tlib#syntax#Names	.vim/pack/ide/start/tlib/autoload/tlib/syntax.vim	/^function! tlib#syntax#Names(...) "{{{3$/;"	f
tlib#sys#ConvertPath	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^function! tlib#sys#ConvertPath(converter, filename) "{{{3$/;"	f
tlib#sys#FileArgs	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^function! tlib#sys#FileArgs(cmd, files) "{{{3$/;"	f
tlib#sys#GetCmd	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^function! tlib#sys#GetCmd(cmd) "{{{3$/;"	f
tlib#sys#IsCygwinBin	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^function! tlib#sys#IsCygwinBin(cmd) "{{{3$/;"	f
tlib#sys#IsExecutable	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^function! tlib#sys#IsExecutable(cmd, ...) "{{{3$/;"	f
tlib#sys#IsSpecial	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^function! tlib#sys#IsSpecial(filename) abort "{{{3$/;"	f
tlib#sys#MaybeUseCygpath	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^function! tlib#sys#MaybeUseCygpath(cmd) "{{{3$/;"	f
tlib#sys#Open	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^function! tlib#sys#Open(filename) abort "{{{3$/;"	f
tlib#sys#OpenWithSystemViewer	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^function! tlib#sys#OpenWithSystemViewer(filename) abort "{{{3$/;"	f
tlib#sys#SystemInDir	.vim/pack/ide/start/tlib/autoload/tlib/sys.vim	/^function! tlib#sys#SystemInDir(dir, ...) abort "{{{3$/;"	f
tlib#tab#BufMap	.vim/pack/ide/start/tlib/autoload/tlib/tab.vim	/^function! tlib#tab#BufMap() "{{{3$/;"	f
tlib#tab#Set	.vim/pack/ide/start/tlib/autoload/tlib/tab.vim	/^function! tlib#tab#Set(tabnr) "{{{3$/;"	f
tlib#tab#TabWinNr	.vim/pack/ide/start/tlib/autoload/tlib/tab.vim	/^function! tlib#tab#TabWinNr(buffer) "{{{3$/;"	f
tlib#tag#Collect	.vim/pack/ide/start/tlib/autoload/tlib/tag.vim	/^function! tlib#tag#Collect(constraints, ...) "{{{3$/;"	f
tlib#tag#Format	.vim/pack/ide/start/tlib/autoload/tlib/tag.vim	/^function! tlib#tag#Format(tag) "{{{3$/;"	f
tlib#tag#Retrieve	.vim/pack/ide/start/tlib/autoload/tlib/tag.vim	/^function! tlib#tag#Retrieve(rx, ...) "{{{3$/;"	f
tlib#textobjects#Init	.vim/pack/ide/start/tlib/autoload/tlib/textobjects.vim	/^function! tlib#textobjects#Init() "{{{3$/;"	f
tlib#textobjects#StandardParagraph	.vim/pack/ide/start/tlib/autoload/tlib/textobjects.vim	/^function! tlib#textobjects#StandardParagraph() "{{{3$/;"	f
tlib#time#Command	.vim/pack/ide/start/tlib/autoload/tlib/time.vim	/^function! tlib#time#Command(cmd, ...) abort "{{{3$/;"	f
tlib#time#Diff	.vim/pack/ide/start/tlib/autoload/tlib/time.vim	/^function! tlib#time#Diff(a, b, ...) "{{{3$/;"	f
tlib#time#DiffMSecs	.vim/pack/ide/start/tlib/autoload/tlib/time.vim	/^function! tlib#time#DiffMSecs(a, b, ...) "{{{3$/;"	f
tlib#time#FormatNow	.vim/pack/ide/start/tlib/autoload/tlib/time.vim	/^function! tlib#time#FormatNow() "{{{3$/;"	f
tlib#time#MSecs	.vim/pack/ide/start/tlib/autoload/tlib/time.vim	/^function! tlib#time#MSecs() "{{{3$/;"	f
tlib#time#Now	.vim/pack/ide/start/tlib/autoload/tlib/time.vim	/^function! tlib#time#Now() "{{{3$/;"	f
tlib#trace#Backtrace	.vim/pack/ide/start/tlib/autoload/tlib/trace.vim	/^function! tlib#trace#Backtrace(caller) abort "{{{3$/;"	f
tlib#trace#Disable	.vim/pack/ide/start/tlib/autoload/tlib/trace.vim	/^function! tlib#trace#Disable() abort "{{{3$/;"	f
tlib#trace#Enable	.vim/pack/ide/start/tlib/autoload/tlib/trace.vim	/^function! tlib#trace#Enable() abort "{{{3$/;"	f
tlib#trace#Print	.vim/pack/ide/start/tlib/autoload/tlib/trace.vim	/^function! tlib#trace#Print(caller, vars, values) abort "{{{3$/;"	f
tlib#trace#Printer_echom	.vim/pack/ide/start/tlib/autoload/tlib/trace.vim	/^function! tlib#trace#Printer_echom(type, text, args) abort "{{{3$/;"	f
tlib#trace#Printer_file	.vim/pack/ide/start/tlib/autoload/tlib/trace.vim	/^function! tlib#trace#Printer_file(type, text, args) abort "{{{3$/;"	f
tlib#trace#Reset	.vim/pack/ide/start/tlib/autoload/tlib/trace.vim	/^function! tlib#trace#Reset() abort "{{{3$/;"	f
tlib#trace#Set	.vim/pack/ide/start/tlib/autoload/tlib/trace.vim	/^function! tlib#trace#Set(vars, ...) abort "{{{3$/;"	f
tlib#type#Are	.vim/pack/ide/start/tlib/autoload/tlib/type.vim	/^function! tlib#type#Are(vals, type) abort "{{{3$/;"	f
tlib#type#Check	.vim/pack/ide/start/tlib/autoload/tlib/type.vim	/^function! tlib#type#Check(caller, names, vals) abort "{{{3$/;"	f
tlib#type#Define	.vim/pack/ide/start/tlib/autoload/tlib/type.vim	/^function! tlib#type#Define(name, schema) abort "{{{3$/;"	f
tlib#type#Disable	.vim/pack/ide/start/tlib/autoload/tlib/type.vim	/^function! tlib#type#Disable() abort "{{{3$/;"	f
tlib#type#Enable	.vim/pack/ide/start/tlib/autoload/tlib/type.vim	/^function! tlib#type#Enable() abort "{{{3$/;"	f
tlib#type#Has	.vim/pack/ide/start/tlib/autoload/tlib/type.vim	/^function! tlib#type#Has(val, schema) abort "{{{3$/;"	f
tlib#type#Have	.vim/pack/ide/start/tlib/autoload/tlib/type.vim	/^function! tlib#type#Have(vals, schema) abort "{{{3$/;"	f
tlib#type#Is	.vim/pack/ide/start/tlib/autoload/tlib/type.vim	/^function! tlib#type#Is(val, type) abort "{{{3$/;"	f
tlib#type#IsDictionary	.vim/pack/ide/start/tlib/autoload/tlib/type.vim	/^function! tlib#type#IsDictionary(expr)$/;"	f
tlib#type#IsFuncref	.vim/pack/ide/start/tlib/autoload/tlib/type.vim	/^function! tlib#type#IsFuncref(expr)$/;"	f
tlib#type#IsList	.vim/pack/ide/start/tlib/autoload/tlib/type.vim	/^function! tlib#type#IsList(expr)$/;"	f
tlib#type#IsNil	.vim/pack/ide/start/tlib/autoload/tlib/type.vim	/^function! tlib#type#IsNil(expr) abort "{{{3$/;"	f
tlib#type#IsNumber	.vim/pack/ide/start/tlib/autoload/tlib/type.vim	/^function! tlib#type#IsNumber(expr)$/;"	f
tlib#type#IsString	.vim/pack/ide/start/tlib/autoload/tlib/type.vim	/^function! tlib#type#IsString(expr)$/;"	f
tlib#url#Decode	.vim/pack/ide/start/tlib/autoload/tlib/url.vim	/^function! tlib#url#Decode(url) "{{{3$/;"	f
tlib#url#DecodeChar	.vim/pack/ide/start/tlib/autoload/tlib/url.vim	/^function! tlib#url#DecodeChar(char) "{{{3$/;"	f
tlib#url#Encode	.vim/pack/ide/start/tlib/autoload/tlib/url.vim	/^function! tlib#url#Encode(url, ...) "{{{3$/;"	f
tlib#url#EncodeChar	.vim/pack/ide/start/tlib/autoload/tlib/url.vim	/^function! tlib#url#EncodeChar(char) "{{{3$/;"	f
tlib#var#EGet	.vim/pack/ide/start/tlib/autoload/tlib/var.vim	/^function! tlib#var#EGet(var, namespace, ...) "{{{3$/;"	f
tlib#var#Get	.vim/pack/ide/start/tlib/autoload/tlib/var.vim	/^function! tlib#var#Get(var, namespace, ...) "{{{3$/;"	f
tlib#var#Let	.vim/pack/ide/start/tlib/autoload/tlib/var.vim	/^function! tlib#var#Let(name, val) "{{{3$/;"	f
tlib#var#List	.vim/pack/ide/start/tlib/autoload/tlib/var.vim	/^function! tlib#var#List(rx, ...) "{{{3$/;"	f
tlib#vcs#Diff	.vim/pack/ide/start/tlib/autoload/tlib/vcs.vim	/^function! tlib#vcs#Diff(filename, ...) "{{{3$/;"	f
tlib#vcs#Executable	.vim/pack/ide/start/tlib/autoload/tlib/vcs.vim	/^function! tlib#vcs#Executable(type) "{{{3$/;"	f
tlib#vcs#FindVCS	.vim/pack/ide/start/tlib/autoload/tlib/vcs.vim	/^function! tlib#vcs#FindVCS(filename) "{{{3$/;"	f
tlib#vcs#GitLsPostprocess	.vim/pack/ide/start/tlib/autoload/tlib/vcs.vim	/^function! tlib#vcs#GitLsPostprocess(filename) abort "{{{3$/;"	f
tlib#vcs#IsDirty	.vim/pack/ide/start/tlib/autoload/tlib/vcs.vim	/^function! tlib#vcs#IsDirty(...) abort "{{{3$/;"	f
tlib#vcs#Ls	.vim/pack/ide/start/tlib/autoload/tlib/vcs.vim	/^function! tlib#vcs#Ls(...) "{{{3$/;"	f
tlib#vcs#Status	.vim/pack/ide/start/tlib/autoload/tlib/vcs.vim	/^function! tlib#vcs#Status(...) abort "{{{3$/;"	f
tlib#vim#CopyFunction	.vim/pack/ide/start/tlib/autoload/tlib/vim.vim	/^function! tlib#vim#CopyFunction(old, new, ...) "{{{3$/;"	f
tlib#vim#Maximize	.vim/pack/ide/start/tlib/autoload/tlib/vim.vim	/^    fun! tlib#vim#Maximize(fullscreen) "{{{3$/;"	f
tlib#vim#RestoreWindow	.vim/pack/ide/start/tlib/autoload/tlib/vim.vim	/^    function! tlib#vim#RestoreWindow() "{{{3$/;"	f
tlib#win#GetID	.vim/pack/ide/start/tlib/autoload/tlib/win.vim	/^    function! tlib#win#GetID() abort "{{{3$/;"	f
tlib#win#GetLayout	.vim/pack/ide/start/tlib/autoload/tlib/win.vim	/^function! tlib#win#GetLayout(...) "{{{3$/;"	f
tlib#win#GotoID	.vim/pack/ide/start/tlib/autoload/tlib/win.vim	/^    function! tlib#win#GotoID(win_id) abort "{{{3$/;"	f
tlib#win#List	.vim/pack/ide/start/tlib/autoload/tlib/win.vim	/^function! tlib#win#List() "{{{3$/;"	f
tlib#win#Set	.vim/pack/ide/start/tlib/autoload/tlib/win.vim	/^function! tlib#win#Set(winnr) "{{{3$/;"	f
tlib#win#SetById	.vim/pack/ide/start/tlib/autoload/tlib/win.vim	/^function! tlib#win#SetById(win_id) "{{{3$/;"	f
tlib#win#SetLayout	.vim/pack/ide/start/tlib/autoload/tlib/win.vim	/^function! tlib#win#SetLayout(layout) "{{{3$/;"	f
tlib#win#Width	.vim/pack/ide/start/tlib/autoload/tlib/win.vim	/^function! tlib#win#Width(wnr) "{{{3$/;"	f
tlib#win#WinDo	.vim/pack/ide/start/tlib/autoload/tlib/win.vim	/^function! tlib#win#WinDo(ex) "{{{3$/;"	f
togglebg#map	.vim/pack/ide/start/colors-solarized/autoload/togglebg.vim	/^function! togglebg#map(mapActivation)$/;"	f
tovl#scratch_buffer#GetContents	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/scratch_buffer.vim	/^function! tovl#scratch_buffer#GetContents()$/;"	f
tovl#scratch_buffer#Help	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/scratch_buffer.vim	/^function! tovl#scratch_buffer#Help()$/;"	f
tovl#scratch_buffer#KeepIntactLineNr	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/scratch_buffer.vim	/^function! tovl#scratch_buffer#KeepIntactLineNr()$/;"	f
tovl#scratch_buffer#ScratchBuffer	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/scratch_buffer.vim	/^function! tovl#scratch_buffer#ScratchBuffer(opts)$/;"	f
tovl#scratch_buffer#Write	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/scratch_buffer.vim	/^function! tovl#scratch_buffer#Write()$/;"	f
tovl#ui#filter_list#ListTest	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^fun! tovl#ui#filter_list#ListTest()$/;"	f
tovl#ui#filter_list#ListTestGotoLineCurrentBuf	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^fun! tovl#ui#filter_list#ListTestGotoLineCurrentBuf()$/;"	f
tovl#ui#filter_list#ListView	.vim/pack/ide/start/addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^fun! tovl#ui#filter_list#ListView(opts)$/;"	f
translate_path	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^translate_path(Dir, {i, Path}) ->$/;"	f
translate_path	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^translate_path(_, Other) -> Other.$/;"	f
translate_paths	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^translate_paths(Dir, RebarOpts) ->$/;"	f
type	.vim/pack/ide/start/tcomment/addon-info.json	/^    "repository" : {"type": "git", "url": "git:\/\/github.com\/tomtom\/tcomment_vim.git"},$/;"	s	object:repository
type	.vim/pack/ide/start/tlib/addon-info.json	/^    "repository" : {"type": "git", "url": "git:\/\/github.com\/tomtom\/tlib_vim.git"},$/;"	s	object:repository
uninstall	.vim/pack/ide/start/yajs/Makefile	/^uninstall: uninstall-files rmrecord$/;"	t
uninstall-files	.vim/pack/ide/start/yajs/Makefile	/^uninstall-files:$/;"	t
unlink_file	.vim/pack/ide/start/yajs/Makefile	/^unlink_file = \\$/;"	m
update	.vim/pack/ide/start/yajs/Makefile	/^update:$/;"	t
url	.vim/pack/ide/start/tcomment/addon-info.json	/^    "repository" : {"type": "git", "url": "git:\/\/github.com\/tomtom\/tcomment_vim.git"},$/;"	s	object:repository
url	.vim/pack/ide/start/tlib/addon-info.json	/^    "repository" : {"type": "git", "url": "git:\/\/github.com\/tomtom\/tlib_vim.git"},$/;"	s	object:repository
use_raw_list	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^        if ["%FILE_LIST_CMD_IS_ABSOLUTE%"]==["1"] set use_raw_list=1$/;"	v
use_raw_list	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^        if ["%PROJECT_ROOT%"]==["."] set use_raw_list=1$/;"	v
use_raw_list	.vim/pack/ide/start/gutentags/plat/win32/update_tags.cmd	/^        set use_raw_list=0$/;"	v
version	.vim/pack/ide/start/tcomment/addon-info.json	/^    "version" : "dev",$/;"	s
version	.vim/pack/ide/start/tlib/addon-info.json	/^    "version" : "dev",$/;"	s
version	.vim/pack/ide/start/yajs/Makefile	/^version:$/;"	t
version	.vim/pack/ide/start/yajs/package.json	/^    "version": "1.0.0",$/;"	s
vim-airline	.vim/pack/ide/start/airline/README.md	/^# vim-airline $/;"	c
vim-glsl	.vim/pack/ide/start/vim-glsl/README.md	/^# vim-glsl$/;"	c
vimball	.vim/pack/ide/start/yajs/Makefile	/^vimball:$/;"	t
vimball-edit	.vim/pack/ide/start/yajs/Makefile	/^vimball-edit:$/;"	t
vmode	.vim/pack/ide/opt/ctrlsf/syntax/ctrlsf.vim	/^let vmode = ctrlsf#CurrentMode()$/;"	v
which_build_tool	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^which_build_tool(Dir, Profile) ->$/;"	f
which_compile_opts_profile	.vim/pack/ide/start/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^which_compile_opts_profile(File) ->$/;"	f
whitespace	.vim/pack/ide/start/airline/README.md	/^#### whitespace$/;"	t	section:Features""Extras
world.Set_display_format	.vim/pack/ide/start/tlib/autoload/tlib/Filter_fuzzy.vim	/^    function! a:world.Set_display_format(value) dict$/;"	f
yS	.vim/pack/ide/start/surround/plugin/surround.vim	/^  nmap yS  <Plug>YSurround$/;"	m
ySS	.vim/pack/ide/start/surround/plugin/surround.vim	/^  nmap ySS <Plug>YSsurround$/;"	m
ySs	.vim/pack/ide/start/surround/plugin/surround.vim	/^  nmap ySs <Plug>YSsurround$/;"	m
yaml	.vim/pack/ide/start/yajs/data/p.js	/^var yaml    = require('js-yaml');$/;"	v
yml	.vim/pack/ide/start/yajs/data/p.js	/^  var yml = {};$/;"	v
ys	.vim/pack/ide/start/surround/plugin/surround.vim	/^  nmap ys  <Plug>Ysurround$/;"	m
yss	.vim/pack/ide/start/surround/plugin/surround.vim	/^  nmap yss <Plug>Yssurround$/;"	m
